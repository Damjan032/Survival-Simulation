THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
17 June 2021 9:59:21.744312 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:21.700312+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:21.700312+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:21.700312+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:21.700312+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:21.700312+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:21.700312+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
17 June 2021 9:59:22.742283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:22.712283+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:22.712283+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:22.712283+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:22.712283+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:22.712283+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T21:59:22.712283+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ConnectionTimedOut: Cannot connect to 127.0.0.1:8080
17 June 2021 9:59:33.622283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver stringFromAddress: arg1) , ':'
			, arg2 asString ] in Socket>>connectTo:port:waitForConnectionFor:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	3
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[123 183 173 10 0 0 0 0 224 9 173 1 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>waitForConnectionFor:ifTimedOut:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver s...etc...
		tmp1: 	8886
		tmp2: 	30000
		tmp3: 	0
		tmp4: 	
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[123 183 173 10 0 0 0 0 224 9 173 1 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>connectTo:port:waitForConnectionFor:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	3
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[123 183 173 10 0 0 0 0 224 9 173 1 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


ZdcSocketStream(ZdcAbstractSocketStream)>>socketConnectTo:port:
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	808
	Receiver's instance variables: 
		socket: 	a Socket[unconnected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZdcSocketStream(ZdcSimpleSocketStream)>>connectTo:port:
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	808
	Receiver's instance variables: 
		socket: 	a Socket[unconnected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZdcSocketStream class(ZdcSimpleSocketStream class)>>openConnectionToHost:port:timeout:
	Receiver: ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	30
		tmp1: 	a Socket[unconnected]
		tmp3: 	a ZdcSocketStrea
	Receiver's instance variables: 
		superclass: 	ZdcOptimizedSocketStream
		methodDict: 	a MethodDictionary(#next:putAll:startingAt:->ZdcSocketStream>>#next...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZdcSocketStream
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zodiac-Core'


ZnNetworkingUtils>>socketStreamToUrlDirectly:
	Receiver: a ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/
		tmp1: 	nil
		tmp2: 	127.0.0.
	Receiver's instance variables: 
		socketStreamClass: 	ZdcSocketStream
		secureSocketStreamClass: 	ZdcSecureSocketStream


ZnNetworkingUtils>>socketStreamToUrl:
	Receiver: a ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080
	Receiver's instance variables: 
		socketStreamClass: 	ZdcSocketStream
		secureSocketStreamClass: 	ZdcSecureSocketStream


ZnNetworkingUtils class>>socketStreamToUrl:
	Receiver: ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bufferSize->ZnNetworkingUtils>>#bufferSize #htt...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnNetworkingUtils
		classPool: 	a Dictionary(#Default->a ZnNetworkingUtils #DefaultSocketStreamTimeo...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Support'


ZnClient>>newConnectionTo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/
		tmp1: 	888
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in [ delaySemaphore wait ] in Delay>>wait
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in MorphExtension>>valueOfProperty:ifAbsentPut:
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in MorphExtension>>valueOfProperty:ifAbsentPut:
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in MorphExtension>>valueOfProperty:ifAbsentPut:
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>post
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	formAt: 'search-field' put: 'Pharo Smalltalk';
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	post.
1 to: 50 do: [ :i | 
	el := (RTEllipse new
		size: 20;
		color: (Color blue alpha: 0.4)) element.
	el @ RTDraggable.
	el translateTo: 5 atRandom @ 5 atRandom.
	v add: el.
	food := (RTEllipse new
		size: 20;
		color: (Color green alpha: 0.4)) element.
	food @ RTDraggable.
	food translateTo: 5 atRandom @ 5 atRandom.
	v add: food.
	el2 := (RTEllipse new
		size: 20;
		color: (Color red alpha: 0.4)) element.
	el2 @ RTDraggable.
	el2 translateTo: 5 atRandom @ 5 atRandom.
	v add: el2.
	edge := RTLine edgeFrom: el to: food.
	edge2 := RTLine edgeFrom: el2 to: food.
	v add: edge.
	v add: edge2.
	stepping
		addNode: food;
		addNode: el;
		addEdge: edge;
		addNode: el2;
		addEdge: edge2 ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		el: 	nil
		edge: 	nil
		food: 	nil
		el2: 	nil
		edge2: 	nil
		response: 	ni
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(724579328)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]



--- The full stack ---
[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver stringFromAddress: arg1) , ':'
			, arg2 asString ] in Socket>>connectTo:port:waitForConnectionFor:
Socket>>waitForConnectionFor:ifTimedOut:
Socket>>connectTo:port:waitForConnectionFor:
ZdcSocketStream(ZdcAbstractSocketStream)>>socketConnectTo:port:
ZdcSocketStream(ZdcSimpleSocketStream)>>connectTo:port:
ZdcSocketStream class(ZdcSimpleSocketStream class)>>openConnectionToHost:port:timeout:
ZnNetworkingUtils>>socketStreamToUrlDirectly:
ZnNetworkingUtils>>socketStreamToUrl:
ZnNetworkingUtils class>>socketStreamToUrl:
ZnClient>>newConnectionTo:
ZnClient>>getConnectionAndExecute
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>post
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	formAt: 'search-field' put: 'Pharo Smalltalk';
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	post.
1 to: 50 do: [ :i | 
	el := (RTEllipse new
		size: 20;
		color: (Color blue alpha: 0.4)) element.
	el @ RTDraggable.
	el translateTo: 5 atRandom @ 5 atRandom.
	v add: el.
	food := (RTEllipse new
		size: 20;
		color: (Color green alpha: 0.4)) element.
	food @ RTDraggable.
	food translateTo: 5 atRandom @ 5 atRandom.
	v add: food.
	el2 := (RTEllipse new
		size: 20;
		color: (Color red alpha: 0.4)) element.
	el2 @ RTDraggable.
	el2 translateTo: 5 atRandom @ 5 atRandom.
	v add: el2.
	edge := RTLine edgeFrom: el to: food.
	edge2 := RTLine edgeFrom: el2 to: food.
	v add: edge.
	v add: edge2.
	stepping
		addNode: food;
		addNode: el;
		addEdge: edge;
		addNode: el2;
		addEdge: edge2 ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
[ Processor terminateActive ] in THERE_BE_DRAGONS_HERE
ZnHttpUnsuccessful: 404 Not Found
17 June 2021 10:01:16.086283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnClient>>handleResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>get
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412876
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v @ RTDraggableView.
	ZnClient new
		url: 'http://...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	arg5 selectionInterval: (1 to: arg5 text size
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@1171)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(988824832) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(714420224))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	113363
		lastStepMessage: 	nil
		lastCycleTime: 	113390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	113363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	113363
		lastStepMessage: 	nil
		lastCycleTime: 	113390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	113363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	113363
		lastStepMessage: 	nil
		lastCycleTime: 	113390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	113363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ZnClient>>handleResponse
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>get
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ZnHttpUnsuccessful: 404 Not Found
17 June 2021 10:01:27.793283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnClient>>handleResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>get
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412887
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ ZnClient new
		url: 'http://localhost:8080/initData';
		enforceHtt...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@1171)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(988824832) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(337275904))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(210473216) named: In...etc...
		lastStepTime: 	125061
		lastStepMessage: 	nil
		lastCycleTime: 	125088
		alarms: 	a Heap()
		lastAlarmTime: 	125061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Fadin...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(210473216) named: In...etc...
		lastStepTime: 	125061
		lastStepMessage: 	nil
		lastCycleTime: 	125088
		alarms: 	a Heap()
		lastAlarmTime: 	125061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(210473216) named: In...etc...
		lastStepTime: 	125061
		lastStepMessage: 	nil
		lastCycleTime: 	125088
		alarms: 	a Heap()
		lastAlarmTime: 	125061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(210473216) named: In...etc...
		lastStepTime: 	125061
		lastStepMessage: 	nil
		lastCycleTime: 	125088
		alarms: 	a Heap()
		lastAlarmTime: 	125061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Fadin...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(426711296)
	Arguments and temporary variables: 
		arg1: 	(186@317)
		arg2: 	a WorldMorph(684500736) [world]
		arg3: 	true
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		bounds: 	(184.0@309.0) corner: (380.0@543.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1015357696)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(184.0@309.0) corner: (380.0@543.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (187447296) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(407060480)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(426711296)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		bounds: 	(184.0@309.0) corner: (380.0@543.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1015357696)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(184.0@309.0) corner: (380.0@543.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (187447296) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(407060480)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil



--- The full stack ---
ZnClient>>handleResponse
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>get
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ZnHttpUnsuccessful: 404 Not Found
17 June 2021 10:02:34.915283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnClient>>handleResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>get
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412954
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	v := RTView new.
	v @ RTDraggableView.
	ZnClient new
		url: 'http://...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	arg5 selectionInterval: (1 to: arg5 text size
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@1171)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(988824832) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(541099008))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	192144
		lastStepMessage: 	nil
		lastCycleTime: 	192205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	192144
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	192144
		lastStepMessage: 	nil
		lastCycleTime: 	192205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	192144
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	192144
		lastStepMessage: 	nil
		lastCycleTime: 	192205
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	192144
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ZnClient>>handleResponse
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>get
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ZnHttpUnsuccessful: 404 Not Found
17 June 2021 10:02:58.265283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnClient>>handleResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>get
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /initData)
		response: 	a ZnResponse(404 Not Found text/plain 18B)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801412978
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ ZnClient new
		url: 'http://localhost:8080/initData';
		enforceHtt...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@1171)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(988824832) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(236393472))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	215497
		lastStepMessage: 	nil
		lastCycleTime: 	215545
		alarms: 	a Heap()
		lastAlarmTime: 	215497
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Fadin...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	215497
		lastStepMessage: 	nil
		lastCycleTime: 	215545
		alarms: 	a Heap()
		lastAlarmTime: 	215497
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	215497
		lastStepMessage: 	nil
		lastCycleTime: 	215545
		alarms: 	a Heap()
		lastAlarmTime: 	215497
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(724579328))(a TRMorph(724579...etc...
		lastStepTime: 	215497
		lastStepMessage: 	nil
		lastCycleTime: 	215545
		alarms: 	a Heap()
		lastAlarmTime: 	215497
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Fadin...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(809843712)
	Arguments and temporary variables: 
		arg1: 	(181@319)
		arg2: 	a WorldMorph(684500736) [world]
		arg3: 	true
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		bounds: 	(179.0@311.0) corner: (375.0@545.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(888250368)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(179.0@311.0) corner: (375.0@545.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (223561984) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(437243136)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(809843712)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		bounds: 	(179.0@311.0) corner: (375.0@545.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(888250368)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(179.0@311.0) corner: (375.0@545.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (223561984) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(437243136)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil



--- The full stack ---
ZnClient>>handleResponse
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>get
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 0 arguments, but was called with 1 argument.
17 June 2021 10:07:14.232283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ food := (RTEllipse new
	size: 20;
	color: (Color green alpha: 0.4)) element.
food @ RTDr...etc...
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		outerContext: 	[ | el edge food el2 edge2 response |
response := ZnClient new
	u...etc...
		startpc: 	626
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ food := (RTEllipse new
	size: 20;
	color: (Color green alpha: 0.4)) element.
food @ RTDr...etc...
	Arguments and temporary variables: 
		arg1: 	a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(a Dict...etc..
	Receiver's instance variables: 
		outerContext: 	[ | el edge food el2 edge2 response |
response := ZnClient new
	u...etc...
		startpc: 	626
		numArgs: 	0


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(a Dictionary('...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(a Dictionary('...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
Transcript clear.
Transcript
	show: response size;
	cr.
response
	do: [ food := (RTEllipse new
			size: 20;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		stepping addNode: food ].
'1 to: 50 do: [ :i |
		el := (RTEllipse new size: 20; color: (Color blue alpha: 0.4)) element.
		el @ RTDraggable.
		el translateTo: 5 atRandom @ 5 atRandom.
		v add: el.
		food := (RTEllipse new size: 20; color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		el2 := (RTEllipse new size: 20; color: (Color red alpha: 0.4)) element.
		el2 @ RTDraggable.
		el2 translateTo: 5 atRandom @ 5 atRandom.
		v add: el2.
		edge := RTLine edgeFrom: el to: food.
		edge2 := RTLine edgeFrom: el2 to: food.
		v add: edge.
		v add: edge2.
		stepping addNode: food; addNode: el; addEdge: edge; addNode: el2; addEdge: edge2.].'
	Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		food: 	nil
		el: 	nil
		edge: 	nil
		el2: 	nil
		edge2: 	nil
		response: 	an Array(a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(867274752)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
BlockClosure>>numArgsError:
BlockClosure>>value:
Array(SequenceableCollection)>>do:
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
Transcript clear.
Transcript
	show: response size;
	cr.
response
	do: [ food := (RTEllipse new
			size: 20;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		stepping addNode: food ].
'1 to: 50 do: [ :i |
		el := (RTEllipse new size: 20; color: (Color blue alpha: 0.4)) element.
		el @ RTDraggable.
		el translateTo: 5 atRandom @ 5 atRandom.
		v add: el.
		food := (RTEllipse new size: 20; color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		el2 := (RTEllipse new size: 20; color: (Color red alpha: 0.4)) element.
		el2 @ RTDraggable.
		el2 translateTo: 5 atRandom @ 5 atRandom.
		v add: el2.
		edge := RTLine edgeFrom: el to: food.
		edge2 := RTLine edgeFrom: el2 to: food.
		v add: edge.
		v add: edge2.
		stepping addNode: food; addNode: el; addEdge: edge; addNode: el2; addEdge: edge2.].'
	Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ArgumentsCountMismatch: This block accepts 0 arguments, but was called with 1 argument.
17 June 2021 10:08:58.033283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>numArgsError:
	Receiver: [ food := (RTEllipse new
	size: 20;
	color: (Color green alpha: 0.4)) element.
food @ RTDr...etc...
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		outerContext: 	[ | el edge food el2 edge2 response |
response := ZnClient new
	u...etc...
		startpc: 	610
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ food := (RTEllipse new
	size: 20;
	color: (Color green alpha: 0.4)) element.
food @ RTDr...etc...
	Arguments and temporary variables: 
		arg1: 	a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(a Dict...etc..
	Receiver's instance variables: 
		outerContext: 	[ | el edge food el2 edge2 response |
response := ZnClient new
	u...etc...
		startpc: 	610
		numArgs: 	0


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(a Dictionary('...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(a Dictionary('...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
Transcript clear.
Transcript
	show: response size;
	cr.
response
	do: [ food := (RTEllipse new
			size: 20;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		stepping addNode: food ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		food: 	nil
		el: 	nil
		edge: 	nil
		el2: 	nil
		edge2: 	nil
		response: 	an Array(a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(38972416)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
BlockClosure>>numArgsError:
BlockClosure>>value:
Array(SequenceableCollection)>>do:
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
Transcript clear.
Transcript
	show: response size;
	cr.
response
	do: [ food := (RTEllipse new
			size: 20;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		stepping addNode: food ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #remove
17 June 2021 10:18:38.440283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #remove
	Receiver: 1
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
1

[ | el |
1 to: v elements size do: [ :i | v elements at: i remove ].
v elements size ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		el: 	nil
		i: 	
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TREllipseShape a TREllipseShape...etc...
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(866340096)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #remove
[ | el |
1 to: v elements size do: [ :i | v elements at: i remove ].
v elements size ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #remove
17 June 2021 10:19:51.524283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #remove
	Receiver: 106
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
106

[ | el |
size := v elements size.
1 to: size do: [ :i | v elements at: (size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		el: 	nil
		i: 	
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TREllipseShape a TREllipseShape...etc...
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(660908032)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #remove
[ | el |
size := v elements size.
1 to: size do: [ :i | v elements at: (size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
17 June 2021 10:20:17.130283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

RTGroup(Object)>>errorSubscriptBounds:
	Receiver: a RTGroup(a RTElement)
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		array: 	an Array(a RTElement)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil
		elementFromModelCache: 	nil


RTGroup(OrderedCollection)>>at:
	Receiver: a RTGroup(a RTElement)
	Arguments and temporary variables: 
		arg1: 	0
		tmp1: 	ni
	Receiver's instance variables: 
		array: 	an Array(a RTElement)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil
		elementFromModelCache: 	nil


[ | el |
size := v elements size.
1 to: size do: [ :i | (v elements at: size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		el: 	nil
		i: 	10
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape)
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(445217792)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
RTGroup(Object)>>errorSubscriptBounds:
RTGroup(OrderedCollection)>>at:
[ | el |
size := v elements size.
1 to: size do: [ :i | (v elements at: size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
17 June 2021 10:21:08.015283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

RTGroup(Object)>>errorSubscriptBounds:
	Receiver: a RTGroup(a RTElement)
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		array: 	an Array(a RTElement)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil
		elementFromModelCache: 	nil


RTGroup(OrderedCollection)>>at:
	Receiver: a RTGroup(a RTElement)
	Arguments and temporary variables: 
		arg1: 	0
		tmp1: 	ni
	Receiver's instance variables: 
		array: 	an Array(a RTElement)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil
		elementFromModelCache: 	nil


[ | el |
size := v elements size.
1 to: size do: [ :i | 
	Transcript show: size - i.
	(v elements at: size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		el: 	nil
		i: 	10
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape)
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(200597760)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
RTGroup(Object)>>errorSubscriptBounds:
RTGroup(OrderedCollection)>>at:
[ | el |
size := v elements size.
1 to: size do: [ :i | 
	Transcript show: size - i.
	(v elements at: size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
17 June 2021 10:21:55.119283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

RTGroup(Object)>>errorSubscriptBounds:
	Receiver: a RTGroup(a RTElement)
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		array: 	an Array(a RTElement)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil
		elementFromModelCache: 	nil


RTGroup(OrderedCollection)>>at:
	Receiver: a RTGroup(a RTElement)
	Arguments and temporary variables: 
		arg1: 	0
		tmp1: 	ni
	Receiver's instance variables: 
		array: 	an Array(a RTElement)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil
		elementFromModelCache: 	nil


[ | el |
size := v elements size.
1 to: size do: [ :i | 
	Transcript
		show: size - i;
		cr.
	(v elements at: size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		el: 	nil
		i: 	10
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape)
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(847567872)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
RTGroup(Object)>>errorSubscriptBounds:
RTGroup(OrderedCollection)>>at:
[ | el |
size := v elements size.
1 to: size do: [ :i | 
	Transcript
		show: size - i;
		cr.
	(v elements at: size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
17 June 2021 10:22:52.766283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

RTGroup(Object)>>errorSubscriptBounds:
	Receiver: a RTGroup(a RTElement)
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		array: 	an Array(a RTElement)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil
		elementFromModelCache: 	nil


RTGroup(OrderedCollection)>>at:
	Receiver: a RTGroup(a RTElement)
	Arguments and temporary variables: 
		arg1: 	0
		tmp1: 	ni
	Receiver's instance variables: 
		array: 	an Array(a RTElement)
		firstIndex: 	1
		lastIndex: 	1
		attributes: 	nil
		elementFromModelCache: 	nil


[ | el |
size := v elements size.
1 to: size do: [ :i | 
	Transcript
		show: '---------------------';
		cr.
	Transcript
		show: size;
		cr.
	Transcript
		show: i;
		cr.
	Transcript
		show: size - i;
		cr.
	(v elements at: size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		el: 	nil
		i: 	10
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape)
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(51226624)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
RTGroup(Object)>>errorSubscriptBounds:
RTGroup(OrderedCollection)>>at:
[ | el |
size := v elements size.
1 to: size do: [ :i | 
	Transcript
		show: '---------------------';
		cr.
	Transcript
		show: size;
		cr.
	Transcript
		show: i;
		cr.
	Transcript
		show: size - i;
		cr.
	(v elements at: size - i) remove ].
v elements size ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Range must be positive
17 June 2021 10:25:47.593283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SharedRandom(Object)>>error:
	Receiver: a SharedRandom
	Arguments and temporary variables: 
		arg1: 	'Range must be positive
	Receiver's instance variables: 
		seed: 	2.85726099e8
		a: 	16807.0
		m: 	2.147483647e9
		q: 	127773.0
		r: 	2836.0
		mutex: 	a Semaphore()


SharedRandom(Random)>>nextInt:
	Receiver: a SharedRandom
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		seed: 	2.85726099e8
		a: 	16807.0
		m: 	2.147483647e9
		q: 	127773.0
		r: 	2836.0
		mutex: 	a Semaphore()


[ super nextInt: arg1 ] in SharedRandom>>nextInt:
	Receiver: a SharedRandom
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		seed: 	2.85726099e8
		a: 	16807.0
		m: 	2.147483647e9
		q: 	127773.0
		r: 	2836.0
		mutex: 	a Semaphore()


[ tmp2 := true.
self wait.
tmp3 := arg1 value ] in Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		arg1: 	[ super nextInt: arg1 ]
		tmp2: 	true
		tmp3: 	ni
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


BlockClosure>>ensure:
	Receiver: [ tmp2 := true.
self wait.
tmp3 := arg1 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp2
	ifTrue: [ self signal ] ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	Semaphore>>critical:
		startpc: 	70
		numArgs: 	0


Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		tmp2: 	true
		tmp3: 	nil
		arg1: 	[ super nextInt: arg1 
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


SharedRandom>>nextInt:
	Receiver: a SharedRandom
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		seed: 	2.85726099e8
		a: 	16807.0
		m: 	2.147483647e9
		q: 	127773.0
		r: 	2836.0
		mutex: 	a Semaphore()


RTGroup(SequenceableCollection)>>atRandom:
	Receiver: a RTGroup()
	Arguments and temporary variables: 
		arg1: 	a SharedRando
	Receiver's instance variables: 
		array: 	#()
		firstIndex: 	1
		lastIndex: 	0
		attributes: 	nil
		elementFromModelCache: 	nil


RTGroup(Collection)>>atRandom
	Receiver: a RTGroup()
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#()
		firstIndex: 	1
		lastIndex: 	0
		attributes: 	nil
		elementFromModelCache: 	nil


[ | el edge food el2 edge2 response |
size := v elements size.
1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
v elements atRandom remove.
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
Transcript clear.
Transcript
	show: response size;
	cr.
response
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 20;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color red.
				el := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 5 atRandom @ 5 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				el := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 5 atRandom @ 5 atRandom.
				v add: el.
				el2 := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	ni
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(233767936)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SharedRandom(Object)>>error:
SharedRandom(Random)>>nextInt:
[ super nextInt: arg1 ] in SharedRandom>>nextInt:
[ tmp2 := true.
self wait.
tmp3 := arg1 value ] in Semaphore>>critical:
BlockClosure>>ensure:
Semaphore>>critical:
SharedRandom>>nextInt:
RTGroup(SequenceableCollection)>>atRandom:
RTGroup(Collection)>>atRandom
[ | el edge food el2 edge2 response |
size := v elements size.
1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
v elements atRandom remove.
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
Transcript clear.
Transcript
	show: response size;
	cr.
response
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 20;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color red.
				el := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 5 atRandom @ 5 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				el := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 5 atRandom @ 5 atRandom.
				v add: el.
				el2 := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Range must be positive
17 June 2021 10:26:04.682283 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SharedRandom(Object)>>error:
	Receiver: a SharedRandom
	Arguments and temporary variables: 
		arg1: 	'Range must be positive
	Receiver's instance variables: 
		seed: 	2.85726099e8
		a: 	16807.0
		m: 	2.147483647e9
		q: 	127773.0
		r: 	2836.0
		mutex: 	a Semaphore()


SharedRandom(Random)>>nextInt:
	Receiver: a SharedRandom
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		seed: 	2.85726099e8
		a: 	16807.0
		m: 	2.147483647e9
		q: 	127773.0
		r: 	2836.0
		mutex: 	a Semaphore()


[ super nextInt: arg1 ] in SharedRandom>>nextInt:
	Receiver: a SharedRandom
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		seed: 	2.85726099e8
		a: 	16807.0
		m: 	2.147483647e9
		q: 	127773.0
		r: 	2836.0
		mutex: 	a Semaphore()


[ tmp2 := true.
self wait.
tmp3 := arg1 value ] in Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		arg1: 	[ super nextInt: arg1 ]
		tmp2: 	true
		tmp3: 	ni
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


BlockClosure>>ensure:
	Receiver: [ tmp2 := true.
self wait.
tmp3 := arg1 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp2
	ifTrue: [ self signal ] ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	Semaphore>>critical:
		startpc: 	70
		numArgs: 	0


Semaphore>>critical:
	Receiver: a Semaphore()
	Arguments and temporary variables: 
		tmp2: 	true
		tmp3: 	nil
		arg1: 	[ super nextInt: arg1 
	Receiver's instance variables: 
		firstLink: 	nil
		lastLink: 	nil
		excessSignals: 	0


SharedRandom>>nextInt:
	Receiver: a SharedRandom
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		seed: 	2.85726099e8
		a: 	16807.0
		m: 	2.147483647e9
		q: 	127773.0
		r: 	2836.0
		mutex: 	a Semaphore()


RTGroup(SequenceableCollection)>>atRandom:
	Receiver: a RTGroup()
	Arguments and temporary variables: 
		arg1: 	a SharedRando
	Receiver's instance variables: 
		array: 	#()
		firstIndex: 	1
		lastIndex: 	0
		attributes: 	nil
		elementFromModelCache: 	nil


RTGroup(Collection)>>atRandom
	Receiver: a RTGroup()
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#()
		firstIndex: 	1
		lastIndex: 	0
		attributes: 	nil
		elementFromModelCache: 	nil


[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
v elements atRandom remove.
Transcript clear.
Transcript
	show: response size;
	cr.
response
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 20;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color red.
				el := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 5 atRandom @ 5 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				el := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 5 atRandom @ 5 atRandom.
				v add: el.
				el2 := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictiona...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(770669824)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SharedRandom(Object)>>error:
SharedRandom(Random)>>nextInt:
[ super nextInt: arg1 ] in SharedRandom>>nextInt:
[ tmp2 := true.
self wait.
tmp3 := arg1 value ] in Semaphore>>critical:
BlockClosure>>ensure:
Semaphore>>critical:
SharedRandom>>nextInt:
RTGroup(SequenceableCollection)>>atRandom:
RTGroup(Collection)>>atRandom
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
v elements atRandom remove.
Transcript clear.
Transcript
	show: response size;
	cr.
response
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 20;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 5 atRandom @ 5 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color red.
				el := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 5 atRandom @ 5 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				el := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 5 atRandom @ 5 atRandom.
				v add: el.
				el2 := (RTEllipse new
					size: 20;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
17 June 2021 11:01:42.422317 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:01:42.393317+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:01:42.393317+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:01:42.393317+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:01:42.393317+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:01:42.393317+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:01:42.393317+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
17 June 2021 11:26:05.775126 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:26:05.732126+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:26:05.732126+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:26:05.732126+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:26:05.732126+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:26:05.732126+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-17T23:26:05.732126+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ConnectionTimedOut: Cannot connect to 127.0.0.1:8080
17 June 2021 11:28:11.165126 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver stringFromAddress: arg1) , ':'
			, arg2 asString ] in Socket>>connectTo:port:waitForConnectionFor:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	3
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[210 27 253 10 0 0 0 0 240 155 32 4 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>waitForConnectionFor:ifTimedOut:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver s...etc...
		tmp1: 	123497
		tmp2: 	30000
		tmp3: 	0
		tmp4: 	
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[210 27 253 10 0 0 0 0 240 155 32 4 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>connectTo:port:waitForConnectionFor:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	3
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[210 27 253 10 0 0 0 0 240 155 32 4 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


ZdcSocketStream(ZdcAbstractSocketStream)>>socketConnectTo:port:
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	808
	Receiver's instance variables: 
		socket: 	a Socket[unconnected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZdcSocketStream(ZdcSimpleSocketStream)>>connectTo:port:
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	808
	Receiver's instance variables: 
		socket: 	a Socket[unconnected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZdcSocketStream class(ZdcSimpleSocketStream class)>>openConnectionToHost:port:timeout:
	Receiver: ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	30
		tmp1: 	a Socket[unconnected]
		tmp3: 	a ZdcSocketStrea
	Receiver's instance variables: 
		superclass: 	ZdcOptimizedSocketStream
		methodDict: 	a MethodDictionary(#next:putAll:startingAt:->ZdcSocketStream>>#next...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZdcSocketStream
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zodiac-Core'


ZnNetworkingUtils>>socketStreamToUrlDirectly:
	Receiver: a ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/initData
		tmp1: 	nil
		tmp2: 	127.0.0.
	Receiver's instance variables: 
		socketStreamClass: 	ZdcSocketStream
		secureSocketStreamClass: 	ZdcSecureSocketStream


ZnNetworkingUtils>>socketStreamToUrl:
	Receiver: a ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/initDat
	Receiver's instance variables: 
		socketStreamClass: 	ZdcSocketStream
		secureSocketStreamClass: 	ZdcSecureSocketStream


ZnNetworkingUtils class>>socketStreamToUrl:
	Receiver: ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/initDat
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bufferSize->ZnNetworkingUtils>>#bufferSize #htt...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnNetworkingUtils
		classPool: 	a Dictionary(#Default->a ZnNetworkingUtils #DefaultSocketStreamTimeo...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Support'


ZnClient>>newConnectionTo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/initData
		tmp1: 	12349
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>post
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	sp := SpRadioButtonExample new.
	sp openWithSpec.
	v := RTView new.
...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	arg5 selectionInterval: (1 to: arg5 text size
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel



--- The full stack ---
[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver stringFromAddress: arg1) , ':'
			, arg2 asString ] in Socket>>connectTo:port:waitForConnectionFor:
Socket>>waitForConnectionFor:ifTimedOut:
Socket>>connectTo:port:waitForConnectionFor:
ZdcSocketStream(ZdcAbstractSocketStream)>>socketConnectTo:port:
ZdcSocketStream(ZdcSimpleSocketStream)>>connectTo:port:
ZdcSocketStream class(ZdcSimpleSocketStream class)>>openConnectionToHost:port:timeout:
ZnNetworkingUtils>>socketStreamToUrlDirectly:
ZnNetworkingUtils>>socketStreamToUrl:
ZnNetworkingUtils class>>socketStreamToUrl:
ZnClient>>newConnectionTo:
ZnClient>>getConnectionAndExecute
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>post
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
18 June 2021 5:32:04.026754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-18T17:32:03.984754+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-18T17:32:03.984754+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-18T17:32:03.984754+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-18T17:32:03.984754+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-18T17:32:03.984754+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-18T17:32:03.984754+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #v
18 June 2021 5:34:09.112754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #v
	Receiver: '	stepping := RTSpringLayoutStepping new view: v.
	stepping after: [ v canvas camera focus...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
'	stepping := RTSpringLayoutStepping new view: v.
	stepping after: [ v canvas camera focus...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	sp := SpRadioButtonExample new.
	sp openWithSpec.
	v := RTView new.
...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	arg5 selectionInterval: (1 to: arg5 text size
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@2102)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(345813248) a RubCursor(512062720...etc...
		fullBounds: 	(0@0) corner: (691@2102)
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(216043264))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(560576256))(a TRMorph(560576...etc...
		lastStepTime: 	125195
		lastStepMessage: 	nil
		lastCycleTime: 	125221
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(559991040)))
		lastAlarmTime: 	125195
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(560576256))(a TRMorph(560576...etc...
		lastStepTime: 	125195
		lastStepMessage: 	nil
		lastCycleTime: 	125221
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(559991040)))
		lastAlarmTime: 	125195
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(560576256))(a TRMorph(560576...etc...
		lastStepTime: 	125195
		lastStepMessage: 	nil
		lastCycleTime: 	125221
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(559991040)))
		lastAlarmTime: 	125195
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #v
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #el
18 June 2021 5:40:15.718754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #el
	Receiver: 1
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
1

[ :foodSource | 
food := (RTEllipse new
	size: 30;
	color: (Color green alpha: 0.4)) element.
food @ RTDraggable.
food translateTo: 1 atRandom @ 1 atRandom.
v add: food.
Transcript
	show: (foodSource at: #Occupied);
	cr.
(foodSource at: #Occupied) = 0
	ifTrue: [ stepping addNode: food ].
(foodSource at: #Occupied) = 1
	ifTrue: [ c := Color blue.
		(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
			ifTrue: [ c := Color red ].
		el := (RTEllipse new
			size: 30;
			color: (c alpha: 0.4)) element.
		el @ RTDraggable.
		el translateTo: 1 atRandom @ 1 atRandom.
		v add: el.
		edge := RTLine edgeFrom: el to: food.
		v add: edge.
		stepping
			addNode: food;
			addNode: el;
			addEdge: edge ].
(foodSource at: #Occupied) = 2
	ifTrue: [ c := Color blue.
		(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
			ifTrue: [ c := Color red ].
		el := (RTEllipse new
			size: 30;
			color: (c alpha: 0.4)) element.
		el @ RTDraggable.
		cordinate := 1 atRandom @ 1 atRandom el translateTo: cordinate.
		v add: el.
		c := Color blue.
		(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
			ifTrue: [ c := Color red ].
		el2 := (RTEllipse new
			size: 30;
			color: (c alpha: 0.4)) element.
		el2 @ RTDraggable.
		el2 translateTo: cordinate.
		v add: el2.
		edge := RTLine edgeFrom: el to: food.
		edge2 := RTLine edgeFrom: el2 to: food.
		v add: edge.
		v add: edge2.
		stepping
			addNode: food;
			addNode: el;
			addEdge: edge;
			addNode: el2;
			addEdge: edge2 ] ] in [ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				cordinate := 1 atRandom @ 1 atRandom el translateTo: cordinate.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: cordinate.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		response: 	a Dictionary('NumberOfBad'->6 'NumberOfGood'->8 'currentEpoch'->26 'f...etc...
		foodSource: 	a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('hea...etc...
		edge2: 	nil
		el: 	a RTElement
		el2: 	nil
		edge: 	nil
		food: 	a RTElemen
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->150 'nig...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->150 'nig...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				cordinate := 1 atRandom @ 1 atRandom el translateTo: cordinate.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: cordinate.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	a RTElement
		el2: 	nil
		edge: 	nil
		food: 	a RTElement
		response: 	a Dictionary('NumberOfBad'->6 'NumberOfGood'->8 'currentEpoch'->26 'f...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #food
18 June 2021 5:45:51.782754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #food
	Receiver: 'food @ RTDraggable.'
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
'food @ RTDraggable.'

[ :foodSource | 
food := (RTEllipse new
	size: 30;
	color: (Color green alpha: 0.4)) element.
'food @ RTDraggable.' food translateTo: 1 atRandom @ 1 atRandom.
v add: food.
Transcript
	show: (foodSource at: #Occupied);
	cr.
(foodSource at: #Occupied) = 0
	ifTrue: [ stepping addNode: food ].
(foodSource at: #Occupied) = 1
	ifTrue: [ c := Color blue.
		(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
			ifTrue: [ c := Color red ].
		el := (RTEllipse new
			size: 30;
			color: (c alpha: 0.4)) element.
		el @ RTDraggable.
		el translateTo: 1 atRandom @ 1 atRandom.
		v add: el.
		edge := RTLine edgeFrom: el to: food.
		v add: edge.
		stepping
			addNode: food;
			addNode: el;
			addEdge: edge ].
(foodSource at: #Occupied) = 2
	ifTrue: [ c := Color blue.
		(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
			ifTrue: [ c := Color red ].
		el := (RTEllipse new
			size: 30;
			color: (c alpha: 0.4)) element.
		el @ RTDraggable.
		el translateTo: 1 atRandom @ 1 atRandom.
		v add: el.
		c := Color blue.
		(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
			ifTrue: [ c := Color red ].
		el2 := (RTEllipse new
			size: 30;
			color: (c alpha: 0.4)) element.
		el2 @ RTDraggable.
		el2 translateTo: 5 atRandom @ 5 atRandom.
		v add: el2.
		edge := RTLine edgeFrom: el to: food.
		edge2 := RTLine edgeFrom: el2 to: food.
		v add: edge.
		v add: edge2.
		stepping
			addNode: food;
			addNode: el;
			addEdge: edge;
			addNode: el2;
			addEdge: edge2 ] ] in [ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		'food @ RTDraggable.' food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		response: 	a Dictionary('NumberOfBad'->1 'NumberOfGood'->7 'currentEpoch'->32 'f...etc...
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	a RTElement
		foodSource: 	a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(...etc..
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: an Array(a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(a Dictionary('...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->0 'OccupiedBy'->nil 'Resources'->an Array(a Dictionary('...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		'food @ RTDraggable.' food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	a RTElement
		response: 	a Dictionary('NumberOfBad'->1 'NumberOfGood'->7 'currentEpoch'->32 'f...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(244877056)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #food
[ :foodSource | 
food := (RTEllipse new
	size: 30;
	color: (Color green alpha: 0.4)) element.
'food @ RTDraggable.' food translateTo: 1 atRandom @ 1 atRandom.
v add: food.
Transcript
	show: (foodSource at: #Occupied);
	cr.
(foodSource at: #Occupied) = 0
	ifTrue: [ stepping addNode: food ].
(foodSource at: #Occupied) = 1
	ifTrue: [ c := Color blue.
		(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividTHERE_BE_DRAGONS_HERE
ZnHttpUnsuccessful: 500 Internal Server Error
18 June 2021 5:47:54.825754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnClient>>handleResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in BorderStyle>>frameRectangle:on:
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in BorderStyle>>frameRectangle:on:
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in BorderStyle>>frameRectangle:on:
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484074
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's insTHERE_BE_DRAGONS_HERE
ZnHttpUnsuccessful: 500 Internal Server Error
18 June 2021 5:47:57.782754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnClient>>handleResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>get
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3801484077
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	ni
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TREllipseShape a TREllipseShape...etc...
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@506.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(25440512)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
ZnClient>>handleResponse
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>get
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 5:54:34.605754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 
		arg1: 	#foodSource
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse nTHERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 5:55:52.772754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 
		arg1: 	#foodSource
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 5:59:42.600754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	#foodSource
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictiona...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(882935296)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) elTHERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 6:00:32.994754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	#foodSource
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictiona...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(276561152)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 6:02:24.901754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...
	Arguments and temporary variables: 
		arg1: 	#foodSource
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictionary('health'->200 'nig...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 5;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	an Array(a Dictionary('Occupied'->1 'OccupiedBy'->an Array(a Dictiona...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(330336768)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 5;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 6:02:40.002754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	#foodSource
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictiona...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(212933888)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 6:05:57.797754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	#foodSource
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 10000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictiona...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(414691840)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 10000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript
	show: (response at: #foodSources) size;
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Warning
18 June 2021 6:41:57.840754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

BlockClosure>>ensure:
	Receiver: [ | tmp5 |
tmp4 := self rewriterClass new replace: rule key with: rule value.
(tmp4 execut...etc...
	Arguments and temporary variables: 
		arg1: 	[ activeMethods remove: arg1 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	Deprecation>>transform
		startpc: 	295
		numArgs: 	0


RecursionStopper>>stopMethod:during:
	Receiver: a RecursionStopper
	Arguments and temporary variables: 
		arg1: 	Deprecation>>#transform
		arg2: 	[ | tmp5 |
tmp4 := self rewriterClass new replace: rule key with: rule va...etc..
	Receiver's instance variables: 
		activeMethods: 	an OrderedCollection(Deprecation>>#transform)


RecursionStopper class>>during:
	Receiver: RecursionStopper
	Arguments and temporary variables: 
		arg1: 	[ | tmp5 |
tmp4 := self rewriterClass new replace: rule key with: rule va...etc..
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#initialize->RecursionStopper>>#initialize #stop...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RecursionStopper
		classPool: 	a Dictionary(#Default->a RecursionStopper )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'


Deprecation>>transform
	Receiver: Deprecation: Automatic deprecation code rewrite: The method SpListPresenter>>#displayBlock...etc...
	Arguments and temporary variables: 
		tmp4: 	a RBParseTreeRewriter
		tmp1: 	RBBlockNode([ :arg1 | self labelFor: arg1 ])
		tmp2: 	EyeInspector>>#updateLis
	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	[ | tmp5 |
tmp4 := self rewriterClass new replace: rule key with: rul...etc...
		signalContext: 	Deprecation(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil
		context: 	SpListPresenter>>displayBlock:
		explanationString: 	'Please use #display: instead'
		deprecationDate: 	nil
		versionString: 	nil
		rule: 	'`@receiver displayBlock: `@arg'->'`@receiver display: `@arg'
		condition: 	nil


SpListPresenter(Object)>>deprecated:transformWith:
	Receiver: a SpListPresenter
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	an EyeCollectionInspector
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	a KMCategory
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'List' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		selectionMode: 	a SpSingleSelectionMode
		activationBlock: 	[ self diveIntoSelectedObject ]
		activateOnSingleClick: 	false
		model: 	a SpCollectionListModel
		itemFilter: 	a SpValueHolder[ nil ]
		verticalAlignment: 	a SpVerticalAlignment
		wrapScrollBars: 	true
		contextMenu: 	a SpValueHolder[ nil ]
		allowToSelect: 	a SpValueHolder[ true ]
		autoDeselect: 	a SpValueHolder[ true ]
		headerTitle: 	a SpValueHolder[ nil ]
		display: 	a SpValueHolder[ initialize
	| tmp1 |
	super initialize.
	self initial...etc...
		icon: 	a SpValueHolder[ nil ]
		searchEnabled: 	a SpValueHolder[ true ]
		searchBlock: 	[ :arg1 :arg2 | self performDefaultSearch: arg1 matching: arg2 ]


SpListPresenter>>displayBlock:
	Receiver: a SpListPresenter
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | self labelFor: arg1 ]
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	an EyeCollectionInspector
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	a KMCategory
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'List' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		selectionMode: 	a SpSingleSelectionMode
		activationBlock: 	[ self diveIntoSelectedObject ]
		activateOnSingleClick: 	false
		model: 	a SpCollectionListModel
		itemFilter: 	a SpValueHolder[ nil ]
		verticalAlignment: 	a SpVerticalAlignment
		wrapScrollBars: 	true
		contextMenu: 	a SpValueHolder[ nil ]
		allowToSelect: 	a SpValueHolder[ true ]
		autoDeselect: 	a SpValueHolder[ true ]
		headerTitle: 	a SpValueHolder[ nil ]
		display: 	a SpValueHolder[ initialize
	| tmp1 |
	super initialize.
	self initial...etc...
		icon: 	a SpValueHolder[ nil ]
		searchEnabled: 	a SpValueHolder[ true ]
		searchBlock: 	[ :arg1 :arg2 | self performDefaultSearch: arg1 matching: arg2 ]


EyeCollectionInspector(EyeInspector)>>updateList
	Receiver: an EyeCollectionInspector
	Arguments and temporary variables: 
		tmp1: 	an OrderedCollection('self'->an Array(a Dictionary('Occupied'->2 'Occupie...etc...
		arg1: 	an OrderedCollection('self'->an Array(a Dictionary('Occupied'->2 'Occupie...etc..
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		object: 	a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an A...etc...
		customMenuActions: 	nil
		text: 	a SpCodePresenter
		list: 	a SpListPresenter
		description: 	a SpTextPresenter


EyeCollectionInspector(EyeInspector)>>objectChanged
	Receiver: an EyeCollectionInspector
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		object: 	a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an A...etc...
		customMenuActions: 	nil
		text: 	a SpCodePresenter
		list: 	a SpListPresenter
		description: 	a SpTextPresenter


[ self objectChanged ] in EyeCollectionInspector(EyeAbstractInspector)>>initializePresenter
	Receiver: an EyeCollectionInspector
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		object: 	a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an A...etc...
		customMenuActions: 	nil
		text: 	a SpCodePresenter
		list: 	a SpListPresenter
		description: 	a SpTextPresenter


BlockClosure>>cull:
	Receiver: [ self objectChanged ]
	Arguments and temporary variables: 
		arg1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc..
	Receiver's instance variables: 
		outerContext: 	EyeCollectionInspector(EyeAbstractInspector)>>initializePresenter...etc...
		startpc: 	95
		numArgs: 	0


BlockClosure>>cull:cull:
	Receiver: [ self objectChanged ]
	Arguments and temporary variables: 
		arg1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc...
		arg2: 	ni
	Receiver's instance variables: 
		outerContext: 	EyeCollectionInspector(EyeAbstractInspector)>>initializePresenter...etc...
		startpc: 	95
		numArgs: 	0


[ :arg2 | arg2 cull: self value cull: arg1 ] in SpValueHolder>>valueChanged:
	Receiver: a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc...
	Arguments and temporary variables: 
		arg1: 	nil
		arg2: 	[ self objectChanged 
	Receiver's instance variables: 
		subscriptions: 	an OrderedCollection([ self objectChanged ])
		lock: 	true
		value: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary(...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection([ self objectChanged ])
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array([ self objectChanged ] nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


SpValueHolder>>valueChanged:
	Receiver: a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc...
	Arguments and temporary variables: 
		arg1: 	ni
	Receiver's instance variables: 
		subscriptions: 	an OrderedCollection([ self objectChanged ])
		lock: 	true
		value: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary(...etc...


[ | tmp1 |
tmp1 := value.
value := arg1.
self valueChanged: tmp1 ] in SpValueHolder>>value:
	Receiver: a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc...
	Arguments and temporary variables: 
		arg1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		subscriptions: 	an OrderedCollection([ self objectChanged ])
		lock: 	true
		value: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary(...etc...


BlockClosure>>ensure:
	Receiver: [ | tmp1 |
tmp1 := value.
value := arg1.
self valueChanged: tmp1 ]
	Arguments and temporary variables: 
		arg1: 	[ lock := false ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SpValueHolder>>value:
		startpc: 	59
		numArgs: 	0


SpValueHolder>>value:
	Receiver: a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc...
	Arguments and temporary variables: 
		arg1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc..
	Receiver's instance variables: 
		subscriptions: 	an OrderedCollection([ self objectChanged ])
		lock: 	true
		value: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary(...etc...


EyeCollectionInspector(EyeAbstractInspector)>>object:
	Receiver: an EyeCollectionInspector
	Arguments and temporary variables: 
		arg1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc...
		tmp1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc..
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		object: 	a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an A...etc...
		customMenuActions: 	nil
		text: 	a SpCodePresenter
		list: 	a SpListPresenter
		description: 	a SpTextPresenter


EyeCollectionInspector(EyeInspector)>>inspect:
	Receiver: an EyeCollectionInspector
	Arguments and temporary variables: 
		arg1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc..
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Untitled window' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		object: 	a SpValueHolder[ an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an A...etc...
		customMenuActions: 	nil
		text: 	a SpCodePresenter
		list: 	a SpListPresenter
		description: 	a SpTextPresenter


EyeInspector class>>inspector:
	Receiver: EyeInspector
	Arguments and temporary variables: 
		arg1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc...
		tmp2: 	an EyeCollectionInspecto
	Receiver's instance variables: 
		superclass: 	EyeAbstractInspector
		methodDict: 	a MethodDictionary(#addAllInstVars:->EyeInspector>>#addAllInstVars:...etc...
		format: 	65557
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{EyeBasicInspector. EyeCharacterInspector. EyeCollectionInspector. ...etc...
		name: 	#EyeInspector
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Inspector-Base'


EyeInspector class>>inspect:
	Receiver: EyeInspector
	Arguments and temporary variables: 
		arg1: 	an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('...etc..
	Receiver's instance variables: 
		superclass: 	EyeAbstractInspector
		methodDict: 	a MethodDictionary(#addAllInstVars:->EyeInspector>>#addAllInstVars:...etc...
		format: 	65557
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{EyeBasicInspector. EyeCharacterInspector. EyeCollectionInspector. ...etc...
		name: 	#EyeInspector
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Inspector-Base'


Array(Object)>>basicInspect
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

[ :arg7 | arg7 basicInspect ] in [ :arg6 | arg6 highlightEvaluateAndDo: [ :arg7 | arg7 basicInspect ] ] in GLMPharoScriptPresentation(GLMRubricSmalltalkCodePresentation)>>executionSelectionActions
	Receiver: a GLMPharoScriptPresentation(id=848518144 title=a GTPlaygroundEditableTabLabel(785641984) ...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(893899008 1)
		title: 	[ :arg2 | 
| tmp4 |
tmp4 := GTPlaygroundEditableTabLabel new.
tmp4
	text...etc...
		titleIcon: 	nil
		transformation: 	[ :arg1 | arg1 ]
		actions: 	an OrderedCollection(a GLMGenericAction a GLMGenericAction a GLMPopupA...etc...
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	true
		parentPrototype: 	THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
18 June 2021 6:45:02.393754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
100

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , '/'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	a Dictionary('NumberOfBad'->138 'NumberOfGood'->13 'currentEpoch'->10...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(927914240)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , '/'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
18 June 2021 6:46:39.122754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
100

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , '/' asString.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	a Dictionary('NumberOfBad'->2 'NumberOfGood'->57 'currentEpoch'->100 ...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(984919552)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , '/' asString.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
18 June 2021 6:46:59.287754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
100

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , ' od ' asString.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	a Dictionary('NumberOfBad'->1 'NumberOfGood'->55 'currentEpoch'->100 ...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(638969856)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , ' od ' asString.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
18 June 2021 6:47:26.391754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
100

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch asString) , '/' asString.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	a Dictionary('NumberOfBad'->1 'NumberOfGood'->55 'currentEpoch'->100 ...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(527238144)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch asString) , '/' asString.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
18 June 2021 6:53:58.713754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
100

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch asString) , '/'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	a Dictionary('NumberOfBad'->4 'NumberOfGood'->55 'currentEpoch'->100 ...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(859772928)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch asString) , '/'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 6:54:22.597754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	'currentEpoch
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ response at: #currentEpoch asString
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg5 | arg5 inspect 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(566415872))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4938689
		lastStepMessage: 	nil
		lastCycleTime: 	4938741
		alarms: 	a Heap()
		lastAlarmTime: 	4938689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4938689
		lastStepMessage: 	nil
		lastCycleTime: 	4938741
		alarms: 	a Heap()
		lastAlarmTime: 	4938689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4938689
		lastStepMessage: 	nil
		lastCycleTime: 	4938741
		alarms: 	a Heap()
		lastAlarmTime: 	4938689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4938689
		lastStepMessage: 	nil
		lastCycleTime: 	4938741
		alarms: 	a Heap()
		lastAlarmTime: 	4938689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(430478592)
	Arguments and temporary variables: 
		arg1: 	(310@407)
		arg2: 	a WorldMorph(684500736) [world]
		arg3: 	true
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		bounds: 	(308.0@399.0) corner: (504.0@633.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(565721856)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(308.0@399.0) corner: (504.0@633.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (609795328) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(217106176)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(430478592)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		bounds: 	(308.0@399.0) corner: (504.0@633.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(565721856)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(308.0@399.0) corner: (504.0@633.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (609795328) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(217106176)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(430478592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(308.0@399.0) corner: (504.0@633.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(565721856)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(308.0@399.0) corner: (504.0@633.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (609795328) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(217106176)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	false
		tmp1: 	a MenuMorph(430478592
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(566415872))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(209@719) mouseDown yellow 254455343 nil]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(566415872))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(209@719) mouseDown yellow 254455343 nil]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(566415872))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(209@719) mouseDown yellow 254455343 nil]
	Arguments and temporary variables: 
		arg1: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		timeStamp: 	254455343
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(209@719)
		handler: 	a RubEditingArea(562100992)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(209@719) mouseDown yellow 254455343 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(566415872))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(209@719) mouseDown yellow 254455343 nil]
		arg2: 	a RubEditingArea(562100992)
		tmp1: 	(209@719)
		tmp2: 	[(209@719) mouseDown yellow 254455343 nil]
		tmp3: 	3
		tmp4: 	a RubPrimarySelectionMorph(49772032)
		tmp5: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720))
		tmp6: 	a RubEditingArea(562100992)
		tmp7: 	false
		tmp8: 	a RubScrolledTextMorph(282707200
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(209@719) mouseDown yellow 254455343 nil
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(209@719) mouseDown yellow 254455343 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatche
	Receiver's instance variables: 
		timeStamp: 	254455343
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(209@719)
		handler: 	a RubEditingArea(562100992)
		wasHandled: 	true
		whichButton: 	2


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(209@719) mouseDown yellow 254455343 nil]
		arg2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(209@719) mouseDown yellow 254455343 nil]
		arg2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(209@719) mouseDown yellow 254455343 nil]
		arg2: 	a MorphicEventDispatche
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(566415872))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(310@407) mouseDown yellow 254455343 nil]
		arg2: 	a TransformWithLayoutMorph(452687360)
		tmp1: 	(310@407)
		tmp2: 	[(209@719) mouseDown yellow 254455343 nil]
		tmp3: 	1
		tmp4: 	a RubEditingArea(562100992)
		tmp5: 	an Array(a RubEditingArea(562100992))
		tmp6: 	nil
		tmp7: 	nil
		tmp8: 	a RubScrolledTextMorph(282707200
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(310@407) mouseDown yellow 254455343 nil
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(310@407) mouseDown yellow 254455343 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatche
	Receiver's instance variables: 
		timeStamp: 	254455343
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(310@407)
		handler: 	a RubScrolledTextMorph(282707200)
		wasHandled: 	false
		whichButton: 	2


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(310@407) mouseDown yellow 254455343 nil]
		arg2: 	a TransformWithLayoutMorph(452687360
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(310@407) mouseDown yellow 254455343 nil]
		arg2: 	a TransformWithLayoutMorph(452687360
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(452687360)
	Arguments and temporary variables: 
		arg1: 	[(310@407) mouseDown yellow 254455343 nil]
		arg2: 	a MorphicEventDispatche
	Receiver's instance variables: 
		bounds: 	(101@101) corner: (792@724)
		owner: 	a RubTextScrollPane(855905280)
		submorphs: 	an Array(a RubEditingArea(562100992))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313355008) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-101@312))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(310@407) mouseDown yellow 254455343 nil]
		arg2: 	a RubTextScrollPane(855905280)
		tmp1: 	(310@407)
		tmp2: 	[(310@407) mouseDown yellow 254455343 nil]
		tmp3: 	2
		tmp4: 	a TransformWithLayoutMorph(452687360)
		tmp5: 	an Array(a RubScrollBar(232459264) a TransformWithLayoutMorph(452687360))...etc...
		tmp6: 	nil
		tmp7: 	nil
		tmp8: 	a RubScrolledTextMorph(282707200
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 6:54:35.438754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	#currentEpoc
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ response at: #currentEpoch
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg5 | arg5 inspect 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(658065664))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4951515
		lastStepMessage: 	nil
		lastCycleTime: 	4951580
		alarms: 	a Heap()
		lastAlarmTime: 	4951515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4951515
		lastStepMessage: 	nil
		lastCycleTime: 	4951580
		alarms: 	a Heap()
		lastAlarmTime: 	4951515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4951515
		lastStepMessage: 	nil
		lastCycleTime: 	4951580
		alarms: 	a Heap()
		lastAlarmTime: 	4951515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4951515
		lastStepMessage: 	nil
		lastCycleTime: 	4951580
		alarms: 	a Heap()
		lastAlarmTime: 	4951515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(1052184576)
	Arguments and temporary variables: 
		arg1: 	(311@408)
		arg2: 	a WorldMorph(684500736) [world]
		arg3: 	true
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		bounds: 	(309.0@400.0) corner: (505.0@634.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1020230912)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(309.0@400.0) corner: (505.0@634.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (572323328) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(120601600)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(1052184576)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		bounds: 	(309.0@400.0) corner: (505.0@634.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1020230912)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(309.0@400.0) corner: (505.0@634.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (572323328) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(120601600)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(1052184576)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(309.0@400.0) corner: (505.0@634.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1020230912)'Do it and go' a ToggleMen...etc...
		fullBounds: 	(309.0@400.0) corner: (505.0@634.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (572323328) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(120601600)'Inspect it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	false
		tmp1: 	a MenuMorph(1052184576
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(658065664))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(210@720) mouseDown yellow 254468031 nil]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(658065664))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(210@720) mouseDown yellow 254468031 nil]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(658065664))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(210@720) mouseDown yellow 254468031 nil]
	Arguments and temporary variables: 
		arg1: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		timeStamp: 	254468031
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(210@720)
		handler: 	a RubEditingArea(562100992)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(210@720) mouseDown yellow 254468031 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(658065664))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(210@720) mouseDown yellow 254468031 nil]
		arg2: 	a RubEditingArea(562100992)
		tmp1: 	(210@720)
		tmp2: 	[(210@720) mouseDown yellow 254468031 nil]
		tmp3: 	3
		tmp4: 	a RubCursor(512062720)
		tmp5: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720))
		tmp6: 	a RubEditingArea(562100992)
		tmp7: 	nil
		tmp8: 	a RubScrolledTextMorph(282707200
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(210@720) mouseDown yellow 254468031 nil
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(210@720) mouseDown yellow 254468031 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatche
	Receiver's instance variables: 
		timeStamp: 	254468031
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(210@720)
		handler: 	a RubEditingArea(562100992)
		wasHandled: 	true
		whichButton: 	2


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(210@720) mouseDown yellow 254468031 nil]
		arg2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(210@720) mouseDown yellow 254468031 nil]
		arg2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(210@720) mouseDown yellow 254468031 nil]
		arg2: 	a MorphicEventDispatche
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(658065664))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(311@408) mouseDown yellow 254468031 nil]
		arg2: 	a TransformWithLayoutMorph(452687360)
		tmp1: 	(311@408)
		tmp2: 	[(210@720) mouseDown yellow 254468031 nil]
		tmp3: 	1
		tmp4: 	a RubEditingArea(562100992)
		tmp5: 	an Array(a RubEditingArea(562100992))
		tmp6: 	nil
		tmp7: 	nil
		tmp8: 	a RubScrolledTextMorph(282707200
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(311@408) mouseDown yellow 254468031 nil
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(311@408) mouseDown yellow 254468031 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatche
	Receiver's instance variables: 
		timeStamp: 	254468031
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(311@408)
		handler: 	a RubScrolledTextMorph(282707200)
		wasHandled: 	false
		whichButton: 	2


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(311@408) mouseDown yellow 254468031 nil]
		arg2: 	a TransformWithLayoutMorph(452687360
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(311@408) mouseDown yellow 254468031 nil]
		arg2: 	a TransformWithLayoutMorph(452687360
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(452687360)
	Arguments and temporary variables: 
		arg1: 	[(311@408) mouseDown yellow 254468031 nil]
		arg2: 	a MorphicEventDispatche
	Receiver's instance variables: 
		bounds: 	(101@101) corner: (792@724)
		owner: 	a RubTextScrollPane(855905280)
		submorphs: 	an Array(a RubEditingArea(562100992))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (313355008) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-101@312))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(311@408) mouseDown yellow 254468031 nil]
		arg2: 	a RubTextScrollPane(855905280)
		tmp1: 	(311@408)
		tmp2: 	[(311@408) mouseDown yellow 254468031 nil]
		tmp3: 	2
		tmp4: 	a TransformWithLayoutMorph(452687360)
		tmp5: 	an Array(a RubScrollBar(232459264) a TransformWithLayoutMorph(452687360))...etc...
		tmp6: 	nil
		tmp7: 	nil
		tmp8: 	a RubScrolledTextMorph(282707200
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: only integers should be used as indices
18 June 2021 6:54:53.796754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

Array(Object)>>error:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	'only integers should be used as indices
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>errorNonIntegerIndex
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

Array(Object)>>at:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
		arg1: 	#foodSourc
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ response at: #foodSource
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (691@3280)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(49772032) a RubCursor(512062720)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(893083904))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4969919
		lastStepMessage: 	nil
		lastCycleTime: 	4969952
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	4969919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4969919
		lastStepMessage: 	nil
		lastCycleTime: 	4969952
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	4969919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(859772928))(a TRMorph(859772...etc...
		lastStepTime: 	4969919
		lastStepMessage: 	nil
		lastCycleTime: 	4969952
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	4969919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Array(Object)>>error:
Array(Object)>>errorNonIntegerIndex
Array(Object)>>at:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
18 June 2021 6:55:04.125754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
100

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , '/'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	a Dictionary('NumberOfBad'->1 'NumberOfGood'->55 'currentEpoch'->100 ...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(368168448)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , '/'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
18 June 2021 6:56:15.499754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
100

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , 'asdasds'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	a Dictionary('NumberOfBad'->1 'NumberOfGood'->57 'currentEpoch'->100 ...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(1000504576)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , 'asdasds'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
18 June 2021 6:56:52.544754 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
100

[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , 'asdasds'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	a Dictionary('NumberOfBad'->2 'NumberOfGood'->58 'currentEpoch'->100 ...etc..
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(694.0@594.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(1002833408)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :reader | NeoJSONReader fromString: reader contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript clear.
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch) , 'asdasds'.
Transcript
	show: (response at: #finalEpoch);
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		Transcript
			show: (foodSource at: #Occupied);
			cr.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 @ RTDraggable.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
Transcript show: v elements size.
v signalUpdate ] in UndefinedObject>>DoIt
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
24 June 2021 1:42:21.077932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T13:42:21.015932+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T13:42:21.015932+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T13:42:21.015932+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T13:42:21.015932+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T13:42:21.015932+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T13:42:21.015932+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ConnectionTimedOut: Cannot connect to 127.0.0.1:8080
24 June 2021 1:42:30.075932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver stringFromAddress: arg1) , ':'
			, arg2 asString ] in Socket>>connectTo:port:waitForConnectionFor:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	3
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[205 50 71 28 0 0 0 0 128 30 74 14 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>waitForConnectionFor:ifTimedOut:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver s...etc...
		tmp1: 	7167
		tmp2: 	30000
		tmp3: 	0
		tmp4: 	
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[205 50 71 28 0 0 0 0 128 30 74 14 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>connectTo:port:waitForConnectionFor:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	3
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[205 50 71 28 0 0 0 0 128 30 74 14 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


ZdcSocketStream(ZdcAbstractSocketStream)>>socketConnectTo:port:
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	808
	Receiver's instance variables: 
		socket: 	a Socket[unconnected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZdcSocketStream(ZdcSimpleSocketStream)>>connectTo:port:
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	808
	Receiver's instance variables: 
		socket: 	a Socket[unconnected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	30
		debug: 	false


ZdcSocketStream class(ZdcSimpleSocketStream class)>>openConnectionToHost:port:timeout:
	Receiver: ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	30
		tmp1: 	a Socket[unconnected]
		tmp3: 	a ZdcSocketStrea
	Receiver's instance variables: 
		superclass: 	ZdcOptimizedSocketStream
		methodDict: 	a MethodDictionary(#next:putAll:startingAt:->ZdcSocketStream>>#next...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZdcSocketStream
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zodiac-Core'


ZnNetworkingUtils>>socketStreamToUrlDirectly:
	Receiver: a ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/initData
		tmp1: 	nil
		tmp2: 	127.0.0.
	Receiver's instance variables: 
		socketStreamClass: 	ZdcSocketStream
		secureSocketStreamClass: 	ZdcSecureSocketStream


ZnNetworkingUtils>>socketStreamToUrl:
	Receiver: a ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/initDat
	Receiver's instance variables: 
		socketStreamClass: 	ZdcSocketStream
		secureSocketStreamClass: 	ZdcSecureSocketStream


ZnNetworkingUtils class>>socketStreamToUrl:
	Receiver: ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/initDat
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bufferSize->ZnNetworkingUtils>>#bufferSize #htt...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnNetworkingUtils
		classPool: 	a Dictionary(#Default->a ZnNetworkingUtils #DefaultSocketStreamTimeo...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Support'


ZnClient>>newConnectionTo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/initData
		tmp1: 	716
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>post
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /initData)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	Transcript clear.	DoIt
	Transcript clear.
	v := RTView new.
	v @ RTD...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	arg5 selectionInterval: (1 to: arg5 text size
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel



--- The full stack ---
[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver stringFromAddress: arg1) , ':'
			, arg2 asString ] in Socket>>connectTo:port:waitForConnectionFor:
Socket>>waitForConnectionFor:ifTimedOut:
Socket>>connectTo:port:waitForConnectionFor:
ZdcSocketStream(ZdcAbstractSocketStream)>>socketConnectTo:port:
ZdcSocketStream(ZdcSimpleSocketStream)>>connectTo:port:
ZdcSocketStream class(ZdcSimpleSocketStream class)>>openConnectionToHost:port:timeout:
ZnNetworkingUtils>>socketStreamToUrlDirectly:
ZnNetworkingUtils>>socketStreamToUrl:
ZnNetworkingUtils class>>socketStreamToUrl:
ZnClient>>newConnectionTo:
ZnClient>>getConnectionAndExecute
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>post
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpBoxLayout class did not understand #newTopToBottom
24 June 2021 2:13:16.179932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
	Receiver: SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpExecutableLayout
		methodDict: 	a MethodDictionary(#adapterName->SpBoxLayout>>#adapterName #add:->S...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpBoxLayout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Layout-Box'


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	sp := SimulationDataSetterUI new.
	^ sp openWithSpec
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg1 selection: arg3 
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3508)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(836688640))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(261114624))(a FadingMorp...etc...
		lastStepTime: 	1855199
		lastStepMessage: 	nil
		lastCycleTime: 	1855267
		alarms: 	a Heap()
		lastAlarmTime: 	1855199
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Fadin...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(261114624))(a FadingMorp...etc...
		lastStepTime: 	1855199
		lastStepMessage: 	nil
		lastCycleTime: 	1855267
		alarms: 	a Heap()
		lastAlarmTime: 	1855199
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(261114624))(a FadingMorp...etc...
		lastStepTime: 	1855199
		lastStepMessage: 	nil
		lastCycleTime: 	1855267
		alarms: 	a Heap()
		lastAlarmTime: 	1855199
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(261114624))(a FadingMorp...etc...
		lastStepTime: 	1855199
		lastStepMessage: 	nil
		lastCycleTime: 	1855267
		alarms: 	a Heap()
		lastAlarmTime: 	1855199
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Fadin...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(873286400)
	Arguments and temporary variables: 
		arg1: 	(142@137.0)
		arg2: 	a WorldMorph(684500736) [world]
		arg3: 	true
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		bounds: 	(140.0@129.0) corner: (336.0@363.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(547296000)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(140.0@129.0) corner: (336.0@363.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (856670976) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(547296000)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(873286400)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		bounds: 	(140.0@129.0) corner: (336.0@363.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(547296000)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(140.0@129.0) corner: (336.0@363.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (856670976) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(547296000)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(873286400)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(140.0@129.0) corner: (336.0@363.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(547296000)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(140.0@129.0) corner: (336.0@363.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (856670976) [other:  (basicColor -> Color veryDarkG...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.1348973607038123 g: 0.1348973607038123 b: 0.1348973607...etc...
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(547296000)'Do it and go'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	false
		tmp1: 	a MenuMorph(873286400
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3508)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(836688640))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(32.0@19.0) mouseDown yellow 476282890 nil]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3508)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(836688640))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(32.0@19.0) mouseDown yellow 476282890 nil]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3508)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(836688640))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(32.0@19.0) mouseDown yellow 476282890 nil]
	Arguments and temporary variables: 
		arg1: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		timeStamp: 	476282890
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(32.0@19.0)
		handler: 	a RubEditingArea(562100992)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(32.0@19.0) mouseDown yellow 476282890 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3508)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(836688640))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(32.0@19.0) mouseDown yellow 476282890 nil]
		arg2: 	a RubEditingArea(562100992)
		tmp1: 	(32.0@19.0)
		tmp2: 	[(32.0@19.0) mouseDown yellow 476282890 nil]
		tmp3: 	3
		tmp4: 	a RubCursor(512062720)
		tmp5: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720))
		tmp6: 	a RubEditingArea(562100992)
		tmp7: 	nil
		tmp8: 	a RubScrolledTextMorph(282707200
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(32.0@19.0) mouseDown yellow 476282890 nil
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(32.0@19.0) mouseDown yellow 476282890 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatche
	Receiver's instance variables: 
		timeStamp: 	476282890
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(32.0@19.0)
		handler: 	a RubEditingArea(562100992)
		wasHandled: 	true
		whichButton: 	2


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(32.0@19.0) mouseDown yellow 476282890 nil]
		arg2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(32.0@19.0) mouseDown yellow 476282890 nil]
		arg2: 	a RubEditingArea(562100992
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[(32.0@19.0) mouseDown yellow 476282890 nil]
		arg2: 	a MorphicEventDispatche
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3508)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(836688640))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(142@137) mouseDown yellow 476282890 nil]
		arg2: 	a TransformWithLayoutMorph(452687360)
		tmp1: 	(142@137)
		tmp2: 	[(32.0@19.0) mouseDown yellow 476282890 nil]
		tmp3: 	1
		tmp4: 	a RubEditingArea(562100992)
		tmp5: 	an Array(a RubEditingArea(562100992))
		tmp6: 	nil
		tmp7: 	nil
		tmp8: 	a RubScrolledTextMorph(282707200
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(142@137) mouseDown yellow 476282890 nil
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(142@137) mouseDown yellow 476282890 nil]
	Arguments and temporary variables: 
		arg1: 	a MorphicEventDispatche
	Receiver's instance variables: 
		timeStamp: 	476282890
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(142@137)
		handler: 	a RubScrolledTextMorph(282707200)
		wasHandled: 	false
		whichButton: 	2


[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		arg1: 	[(142@137) mouseDown yellow 476282890 nil]
		arg2: 	a TransformWithLayoutMorph(452687360
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ arg1 sentTo: self ]
	Arguments and temporary variables: 
		arg1: 	[ morph := nil ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0



--- The full stack ---
SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ arg1 sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpBoxLayout class did not understand #newTopToBottom
24 June 2021 2:14:00.884932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
	Receiver: SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpExecutableLayout
		methodDict: 	a MethodDictionary(#adapterName->SpBoxLayout>>#adapterName #add:->S...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpBoxLayout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Layout-Box'


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(263747584)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(929891072)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(369149952)
		submorphs: 	an Array(an ImageMorph(149773056))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (387067904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(149773056)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(929891072)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(369149952)
		submorphs: 	an Array(an ImageMorph(149773056))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (387067904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(149773056)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(929891072)
	Arguments and temporary variables: 
		arg1: 	[(951@104) mouseUp 476327765 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(369149952)
		submorphs: 	an Array(an ImageMorph(149773056))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (387067904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(149773056)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(929891072)
	Arguments and temporary variables: 
		arg1: 	[(951@104) mouseUp 476327765 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(369149952)
		submorphs: 	an Array(an ImageMorph(149773056))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (387067904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(149773056)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(951@104) mouseUp 476327765 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(929891072
	Receiver's instance variables: 
		timeStamp: 	476327765
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(951@104)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(929891072)
	Arguments and temporary variables: 
		arg1: 	[(951@104) mouseUp 476327765 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(369149952)
		submorphs: 	an Array(an ImageMorph(149773056))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (387067904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(149773056)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(929891072)
	Arguments and temporary variables: 
		arg1: 	[(951@104) mouseUp 476327765 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(369149952)
		submorphs: 	an Array(an ImageMorph(149773056))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (387067904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(149773056)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(929891072)
		arg2: 	[(951@104) mouseUp 476327765 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(951@104.0) corner: (967@120.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(951@104.0) corner: (967@120.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(394253056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@104) mouseUp 476327765 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476327765 951 104 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(951@104) mouseOver red 476327687 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(951@104.0) corner: (967@120.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(951@104.0) corner: (967@120.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(394253056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@104) mouseUp 476327765 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476327765 951 104 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(951@104) mouseUp 476327765 nil]
		arg2: 	an IconicButton(929891072)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(951@104.0) corner: (967@120.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(951@104.0) corner: (967@120.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(394253056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@104) mouseUp 476327765 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476327765 951 104 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(951@104) mouseUp 476327765 nil
	Receiver's instance variables: 
		bounds: 	(951@104.0) corner: (967@120.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(951@104.0) corner: (967@120.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(394253056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@104) mouseUp 476327765 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476327765 951 104 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(951@104) mouseUp 476327765 nil]
		tmp1: 	[(951@104) mouseUp 476327765 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(951@104.0) corner: (967@120.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(951@104.0) corner: (967@120.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(394253056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@104) mouseUp 476327765 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476327765 951 104 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(951@104) mouseUp 476327765 nil]
		tmp2: 	#(1 476327765 951 104 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(951@104.0) corner: (967@120.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(951@104.0) corner: (967@120.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(394253056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@104) mouseUp 476327765 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476327765 951 104 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(951@104.0) corner: (967@120.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(951@104.0) corner: (967@120.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(394253056)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@104) mouseUp 476327765 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476327765 951 104 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	1899961
		lastStepMessage: 	nil
		lastCycleTime: 	1899992
		alarms: 	a Heap()
		lastAlarmTime: 	1899961
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	1899961
		lastStepMessage: 	nil
		lastCycleTime: 	1899992
		alarms: 	a Heap()
		lastAlarmTime: 	1899961
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	1899961
		lastStepMessage: 	nil
		lastCycleTime: 	1899992
		alarms: 	a Heap()
		lastAlarmTime: 	1899961
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	1899961
		lastStepMessage: 	nil
		lastCycleTime: 	1899992
		alarms: 	a Heap()
		lastAlarmTime: 	1899961
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassSTHERE_BE_DRAGONS_HERE
Instance of SpBoxLayout class did not understand #newTopToBottom
24 June 2021 2:15:32.843932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
	Receiver: SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpExecutableLayout
		methodDict: 	a MethodDictionary(#adapterName->SpBoxLayout>>#adapterName #add:->S...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpBoxLayout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Layout-Box'


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(263747584)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(67341056)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(79396864)
		submorphs: 	an Array(an ImageMorph(81195008))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994534144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(81195008)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(67341056)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(79396864)
		submorphs: 	an Array(an ImageMorph(81195008))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994534144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(81195008)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(67341056)
	Arguments and temporary variables: 
		arg1: 	[(953@102) mouseUp 476419640 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(79396864)
		submorphs: 	an Array(an ImageMorph(81195008))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994534144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(81195008)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(67341056)
	Arguments and temporary variables: 
		arg1: 	[(953@102) mouseUp 476419640 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(79396864)
		submorphs: 	an Array(an ImageMorph(81195008))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994534144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(81195008)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(953@102) mouseUp 476419640 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(67341056
	Receiver's instance variables: 
		timeStamp: 	476419640
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(953@102)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(67341056)
	Arguments and temporary variables: 
		arg1: 	[(953@102) mouseUp 476419640 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(79396864)
		submorphs: 	an Array(an ImageMorph(81195008))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994534144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(81195008)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(67341056)
	Arguments and temporary variables: 
		arg1: 	[(953@102) mouseUp 476419640 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(79396864)
		submorphs: 	an Array(an ImageMorph(81195008))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (994534144) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(81195008)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(67341056)
		arg2: 	[(953@102) mouseUp 476419640 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(953@102.0) corner: (969@118.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(953@102.0) corner: (969@118.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(791235328)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(953@102) mouseUp 476419640 nil]
		targetOffset: 	(12.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476419640 953 102 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(953@102) mouseOver red 476419640 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(953@102.0) corner: (969@118.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(953@102.0) corner: (969@118.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(791235328)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(953@102) mouseUp 476419640 nil]
		targetOffset: 	(12.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476419640 953 102 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(953@102) mouseUp 476419640 nil]
		arg2: 	an IconicButton(67341056)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(953@102.0) corner: (969@118.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(953@102.0) corner: (969@118.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(791235328)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(953@102) mouseUp 476419640 nil]
		targetOffset: 	(12.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476419640 953 102 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(953@102) mouseUp 476419640 nil
	Receiver's instance variables: 
		bounds: 	(953@102.0) corner: (969@118.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(953@102.0) corner: (969@118.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(791235328)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(953@102) mouseUp 476419640 nil]
		targetOffset: 	(12.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476419640 953 102 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(953@102) mouseUp 476419640 nil]
		tmp1: 	[(953@102) mouseUp 476419640 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(953@102.0) corner: (969@118.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(953@102.0) corner: (969@118.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(791235328)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(953@102) mouseUp 476419640 nil]
		targetOffset: 	(12.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476419640 953 102 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(953@102) mouseUp 476419640 nil]
		tmp2: 	#(1 476419640 953 102 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(953@102.0) corner: (969@118.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(953@102.0) corner: (969@118.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(791235328)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(953@102) mouseUp 476419640 nil]
		targetOffset: 	(12.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476419640 953 102 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(953@102.0) corner: (969@118.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(953@102.0) corner: (969@118.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(791235328)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(953@102) mouseUp 476419640 nil]
		targetOffset: 	(12.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476419640 953 102 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	1991918
		lastStepMessage: 	nil
		lastCycleTime: 	1991968
		alarms: 	a Heap()
		lastAlarmTime: 	1991918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	1991918
		lastStepMessage: 	nil
		lastCycleTime: 	1991968
		alarms: 	a Heap()
		lastAlarmTime: 	1991918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	1991918
		lastStepMessage: 	nil
		lastCycleTime: 	1991968
		alarms: 	a Heap()
		lastAlarmTime: 	1991918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	1991918
		lastStepMessage: 	nil
		lastCycleTime: 	1991968
		alarms: 	a Heap()
		lastAlarmTime: 	1991918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpBoxLayout class did not understand #newTopToBottom
24 June 2021 2:15:55.470932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
	Receiver: SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpExecutableLayout
		methodDict: 	a MethodDictionary(#adapterName->SpBoxLayout>>#adapterName #add:->S...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpBoxLayout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Layout-Box'


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(263747584)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(661270528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(99104768)
		submorphs: 	an Array(an ImageMorph(8591360))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (515734272) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(8591360)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(661270528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(99104768)
		submorphs: 	an Array(an ImageMorph(8591360))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (515734272) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(8591360)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(661270528)
	Arguments and temporary variables: 
		arg1: 	[(955@97) mouseUp 476442312 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(99104768)
		submorphs: 	an Array(an ImageMorph(8591360))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (515734272) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(8591360)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(661270528)
	Arguments and temporary variables: 
		arg1: 	[(955@97) mouseUp 476442312 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(99104768)
		submorphs: 	an Array(an ImageMorph(8591360))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (515734272) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(8591360)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(955@97) mouseUp 476442312 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(661270528
	Receiver's instance variables: 
		timeStamp: 	476442312
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(955@97)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(661270528)
	Arguments and temporary variables: 
		arg1: 	[(955@97) mouseUp 476442312 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(99104768)
		submorphs: 	an Array(an ImageMorph(8591360))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (515734272) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(8591360)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(661270528)
	Arguments and temporary variables: 
		arg1: 	[(955@97) mouseUp 476442312 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(99104768)
		submorphs: 	an Array(an ImageMorph(8591360))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (515734272) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(8591360)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(661270528)
		arg2: 	[(955@97) mouseUp 476442312 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(955@97.0) corner: (971@113.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(955@97.0) corner: (971@113.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(124527360)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(955@97) mouseUp 476442312 nil]
		targetOffset: 	(13.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476442312 955 97 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(955@97) mouseOver red 476442250 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(955@97.0) corner: (971@113.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(955@97.0) corner: (971@113.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(124527360)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(955@97) mouseUp 476442312 nil]
		targetOffset: 	(13.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476442312 955 97 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(955@97) mouseUp 476442312 nil]
		arg2: 	an IconicButton(661270528)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(955@97.0) corner: (971@113.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(955@97.0) corner: (971@113.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(124527360)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(955@97) mouseUp 476442312 nil]
		targetOffset: 	(13.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476442312 955 97 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(955@97) mouseUp 476442312 nil
	Receiver's instance variables: 
		bounds: 	(955@97.0) corner: (971@113.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(955@97.0) corner: (971@113.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(124527360)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(955@97) mouseUp 476442312 nil]
		targetOffset: 	(13.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476442312 955 97 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(955@97) mouseUp 476442312 nil]
		tmp1: 	[(955@97) mouseUp 476442312 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(955@97.0) corner: (971@113.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(955@97.0) corner: (971@113.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(124527360)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(955@97) mouseUp 476442312 nil]
		targetOffset: 	(13.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476442312 955 97 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(955@97) mouseUp 476442312 nil]
		tmp2: 	#(1 476442312 955 97 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(955@97.0) corner: (971@113.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(955@97.0) corner: (971@113.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(124527360)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(955@97) mouseUp 476442312 nil]
		targetOffset: 	(13.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476442312 955 97 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(955@97.0) corner: (971@113.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(955@97.0) corner: (971@113.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(124527360)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(955@97) mouseUp 476442312 nil]
		targetOffset: 	(13.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476442312 955 97 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2014531
		lastStepMessage: 	nil
		lastCycleTime: 	2014596
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(704057344)))
		lastAlarmTime: 	2014531
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2014531
		lastStepMessage: 	nil
		lastCycleTime: 	2014596
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(704057344)))
		lastAlarmTime: 	2014531
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2014531
		lastStepMessage: 	nil
		lastCycleTime: 	2014596
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(704057344)))
		lastAlarmTime: 	2014531
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2014531
		lastStepMessage: 	nil
		lastCycleTime: 	2014596
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(704057344)))
		lastAlarmTime: 	2014531
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpBoxLayout class did not understand #newTopToBottom
24 June 2021 2:16:16.996932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
	Receiver: SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpExecutableLayout
		methodDict: 	a MethodDictionary(#adapterName->SpBoxLayout>>#adapterName #add:->S...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpBoxLayout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Layout-Box'


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(263747584)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(352047104)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(540377856)
		submorphs: 	an Array(an ImageMorph(301652736))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (744534016) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(301652736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(352047104)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(540377856)
		submorphs: 	an Array(an ImageMorph(301652736))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (744534016) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(301652736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(352047104)
	Arguments and temporary variables: 
		arg1: 	[(957@106) mouseUp 476463875 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(540377856)
		submorphs: 	an Array(an ImageMorph(301652736))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (744534016) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(301652736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(352047104)
	Arguments and temporary variables: 
		arg1: 	[(957@106) mouseUp 476463875 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(540377856)
		submorphs: 	an Array(an ImageMorph(301652736))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (744534016) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(301652736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(957@106) mouseUp 476463875 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(352047104
	Receiver's instance variables: 
		timeStamp: 	476463875
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(957@106)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(352047104)
	Arguments and temporary variables: 
		arg1: 	[(957@106) mouseUp 476463875 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(540377856)
		submorphs: 	an Array(an ImageMorph(301652736))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (744534016) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(301652736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(352047104)
	Arguments and temporary variables: 
		arg1: 	[(957@106) mouseUp 476463875 nil
	Receiver's instance variables: 
		bounds: 	(943.0@95.0) corner: (959.0@108.0)
		owner: 	a ClyMainItemCellMorph(540377856)
		submorphs: 	an Array(an ImageMorph(301652736))
		fullBounds: 	(943.0@95.0) corner: (959.0@108.0)
		color: 	Color transparent
		extension: 	a MorphExtension (744534016) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(301652736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(352047104)
		arg2: 	[(957@106) mouseUp 476463875 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(957@106.0) corner: (973@122.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(957@106.0) corner: (973@122.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(689267456)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(957@106) mouseUp 476463875 nil]
		targetOffset: 	(14.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476463875 957 106 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(957@106) mouseOver red 476463828 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(957@106.0) corner: (973@122.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(957@106.0) corner: (973@122.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(689267456)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(957@106) mouseUp 476463875 nil]
		targetOffset: 	(14.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476463875 957 106 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(957@106) mouseUp 476463875 nil]
		arg2: 	an IconicButton(352047104)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(957@106.0) corner: (973@122.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(957@106.0) corner: (973@122.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(689267456)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(957@106) mouseUp 476463875 nil]
		targetOffset: 	(14.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476463875 957 106 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(957@106) mouseUp 476463875 nil
	Receiver's instance variables: 
		bounds: 	(957@106.0) corner: (973@122.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(957@106.0) corner: (973@122.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(689267456)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(957@106) mouseUp 476463875 nil]
		targetOffset: 	(14.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476463875 957 106 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(957@106) mouseUp 476463875 nil]
		tmp1: 	[(957@106) mouseUp 476463875 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(957@106.0) corner: (973@122.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(957@106.0) corner: (973@122.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(689267456)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(957@106) mouseUp 476463875 nil]
		targetOffset: 	(14.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476463875 957 106 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(957@106) mouseUp 476463875 nil]
		tmp2: 	#(1 476463875 957 106 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(957@106.0) corner: (973@122.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(957@106.0) corner: (973@122.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(689267456)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(957@106) mouseUp 476463875 nil]
		targetOffset: 	(14.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476463875 957 106 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(957@106.0) corner: (973@122.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(957@106.0) corner: (973@122.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(689267456)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(957@106) mouseUp 476463875 nil]
		targetOffset: 	(14.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476463875 957 106 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2036098
		lastStepMessage: 	nil
		lastCycleTime: 	2036124
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1071883008)))
		lastAlarmTime: 	2036098
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2036098
		lastStepMessage: 	nil
		lastCycleTime: 	2036124
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1071883008)))
		lastAlarmTime: 	2036098
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2036098
		lastStepMessage: 	nil
		lastCycleTime: 	2036124
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1071883008)))
		lastAlarmTime: 	2036098
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2036098
		lastStepMessage: 	nil
		lastCycleTime: 	2036124
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1071883008)))
		lastAlarmTime: 	2036098
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpBoxLayout class did not understand #newTopToBottom
24 June 2021 2:19:29.549932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
	Receiver: SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpExecutableLayout
		methodDict: 	a MethodDictionary(#adapterName->SpBoxLayout>>#adapterName #add:->S...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpBoxLayout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Layout-Box'


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(263747584)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(554834688)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(425775872)
		submorphs: 	an Array(an ImageMorph(410574848))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (668660480) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(410574848)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(554834688)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(425775872)
		submorphs: 	an Array(an ImageMorph(410574848))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (668660480) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(410574848)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(554834688)
	Arguments and temporary variables: 
		arg1: 	[(1014@114) mouseUp 476656437 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(425775872)
		submorphs: 	an Array(an ImageMorph(410574848))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (668660480) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(410574848)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(554834688)
	Arguments and temporary variables: 
		arg1: 	[(1014@114) mouseUp 476656437 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(425775872)
		submorphs: 	an Array(an ImageMorph(410574848))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (668660480) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(410574848)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1014@114) mouseUp 476656437 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(554834688
	Receiver's instance variables: 
		timeStamp: 	476656437
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1014@114)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(554834688)
	Arguments and temporary variables: 
		arg1: 	[(1014@114) mouseUp 476656437 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(425775872)
		submorphs: 	an Array(an ImageMorph(410574848))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (668660480) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(410574848)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(554834688)
	Arguments and temporary variables: 
		arg1: 	[(1014@114) mouseUp 476656437 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(425775872)
		submorphs: 	an Array(an ImageMorph(410574848))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (668660480) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(410574848)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(554834688)
		arg2: 	[(1014@114) mouseUp 476656437 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(1014@114.0) corner: (1030@130.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@114.0) corner: (1030@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(644981504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@114) mouseUp 476656437 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476656437 1014 114 0 0 1 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(1014@114) mouseOver red 476656359 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(1014@114.0) corner: (1030@130.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@114.0) corner: (1030@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(644981504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@114) mouseUp 476656437 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476656437 1014 114 0 0 1 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1014@114) mouseUp 476656437 nil]
		arg2: 	an IconicButton(554834688)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(1014@114.0) corner: (1030@130.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@114.0) corner: (1030@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(644981504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@114) mouseUp 476656437 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476656437 1014 114 0 0 1 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1014@114) mouseUp 476656437 nil
	Receiver's instance variables: 
		bounds: 	(1014@114.0) corner: (1030@130.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@114.0) corner: (1030@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(644981504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@114) mouseUp 476656437 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476656437 1014 114 0 0 1 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1014@114) mouseUp 476656437 nil]
		tmp1: 	[(1014@114) mouseUp 476656437 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(1014@114.0) corner: (1030@130.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@114.0) corner: (1030@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(644981504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@114) mouseUp 476656437 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476656437 1014 114 0 0 1 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(1014@114) mouseUp 476656437 nil]
		tmp2: 	#(1 476656437 1014 114 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(1014@114.0) corner: (1030@130.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@114.0) corner: (1030@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(644981504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@114) mouseUp 476656437 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476656437 1014 114 0 0 1 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1014@114.0) corner: (1030@130.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@114.0) corner: (1030@130.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(644981504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@114) mouseUp 476656437 nil]
		targetOffset: 	(8.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476656437 1014 114 0 0 1 1)
		lastKeyScanCode: 	27
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2228647
		lastStepMessage: 	nil
		lastCycleTime: 	2228678
		alarms: 	a Heap()
		lastAlarmTime: 	2228647
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2228647
		lastStepMessage: 	nil
		lastCycleTime: 	2228678
		alarms: 	a Heap()
		lastAlarmTime: 	2228647
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2228647
		lastStepMessage: 	nil
		lastCycleTime: 	2228678
		alarms: 	a Heap()
		lastAlarmTime: 	2228647
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2228647
		lastStepMessage: 	nil
		lastCycleTime: 	2228678
		alarms: 	a Heap()
		lastAlarmTime: 	2228647
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout class(Object)>>doesNotUnderstand: #newTopToBottom
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpBoxLayout class did not understand #add:
24 June 2021 2:24:11.476932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout class(Object)>>doesNotUnderstand: #add:
	Receiver: SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpExecutableLayout
		methodDict: 	a MethodDictionary(#adapterName->SpBoxLayout>>#adapterName #add:->S...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpBoxLayout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Layout-Box'


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI
		newTopToBottomMain: 	SpBoxLayout
		newLeftToRight: 	SpBoxLayout
		newTopToBottomLab: 	nil


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI
		newTopToBottomMain: 	SpBoxLayout
		newLeftToRight: 	SpBoxLayout
		newTopToBottomLab: 	nil


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(263747584)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1035765760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(1039142912)
		submorphs: 	an Array(an ImageMorph(841076736))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (167740160) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841076736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1035765760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(1039142912)
		submorphs: 	an Array(an ImageMorph(841076736))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (167740160) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841076736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1035765760)
	Arguments and temporary variables: 
		arg1: 	[(1019@113) mouseUp 476938281 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(1039142912)
		submorphs: 	an Array(an ImageMorph(841076736))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (167740160) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841076736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1035765760)
	Arguments and temporary variables: 
		arg1: 	[(1019@113) mouseUp 476938281 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(1039142912)
		submorphs: 	an Array(an ImageMorph(841076736))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (167740160) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841076736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1019@113) mouseUp 476938281 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(1035765760
	Receiver's instance variables: 
		timeStamp: 	476938281
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1019@113)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(1035765760)
	Arguments and temporary variables: 
		arg1: 	[(1019@113) mouseUp 476938281 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(1039142912)
		submorphs: 	an Array(an ImageMorph(841076736))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (167740160) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841076736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(1035765760)
	Arguments and temporary variables: 
		arg1: 	[(1019@113) mouseUp 476938281 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		owner: 	a ClyMainItemCellMorph(1039142912)
		submorphs: 	an Array(an ImageMorph(841076736))
		fullBounds: 	(1006.0@105.0) corner: (1022.0@118.0)
		color: 	Color transparent
		extension: 	a MorphExtension (167740160) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(841076736)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(1035765760)
		arg2: 	[(1019@113) mouseUp 476938281 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(1019@113.0) corner: (1035@129.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1019@113.0) corner: (1035@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(107958272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1019@113) mouseUp 476938281 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476938281 1019 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(1019@113) mouseOver red 476938187 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(1019@113.0) corner: (1035@129.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1019@113.0) corner: (1035@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(107958272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1019@113) mouseUp 476938281 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476938281 1019 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1019@113) mouseUp 476938281 nil]
		arg2: 	an IconicButton(1035765760)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(1019@113.0) corner: (1035@129.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1019@113.0) corner: (1035@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(107958272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1019@113) mouseUp 476938281 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476938281 1019 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1019@113) mouseUp 476938281 nil
	Receiver's instance variables: 
		bounds: 	(1019@113.0) corner: (1035@129.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1019@113.0) corner: (1035@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(107958272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1019@113) mouseUp 476938281 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476938281 1019 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1019@113) mouseUp 476938281 nil]
		tmp1: 	[(1019@113) mouseUp 476938281 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(1019@113.0) corner: (1035@129.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1019@113.0) corner: (1035@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(107958272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1019@113) mouseUp 476938281 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476938281 1019 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(1019@113) mouseUp 476938281 nil]
		tmp2: 	#(1 476938281 1019 113 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(1019@113.0) corner: (1035@129.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1019@113.0) corner: (1035@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(107958272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1019@113) mouseUp 476938281 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476938281 1019 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1019@113.0) corner: (1035@129.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1019@113.0) corner: (1035@129.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(107958272)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1019@113) mouseUp 476938281 nil]
		targetOffset: 	(13.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 476938281 1019 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2510561
		lastStepMessage: 	nil
		lastCycleTime: 	2510590
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(825973504)))
		lastAlarmTime: 	2510561
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2510561
		lastStepMessage: 	nil
		lastCycleTime: 	2510590
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(825973504)))
		lastAlarmTime: 	2510561
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2510561
		lastStepMessage: 	nil
		lastCycleTime: 	2510590
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(825973504)))
		lastAlarmTime: 	2510561
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2510561
		lastStepMessage: 	nil
		lastCycleTime: 	2510590
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(825973504)))
		lastAlarmTime: 	2510561
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout class(Object)>>doesNotUnderstand: #add:
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HTHERE_BE_DRAGONS_HERE
Instance of SpBoxLayout class did not understand #add:
24 June 2021 2:25:15.721932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout class(Object)>>doesNotUnderstand: #add:
	Receiver: SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	SpExecutableLayout
		methodDict: 	a MethodDictionary(#adapterName->SpBoxLayout>>#adapterName #add:->S...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SpBoxLayout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Layout-Box'


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	SpBoxLayout
		tmp2: 	SpBoxLayout
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI
		newTopToBottomMain: 	SpBoxLayout
		newLeftToRight: 	SpBoxLayout
		newTopToBottomLab: 	nil


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumber: 	a SpLabelPresenter
		inputNumber: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65559
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI
		newTopToBottomMain: 	SpBoxLayout
		newLeftToRight: 	SpBoxLayout
		newTopToBottomLab: 	nil


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(263747584)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(564060928)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		owner: 	a ClyMainItemCellMorph(518658816)
		submorphs: 	an Array(an ImageMorph(739268608))
		fullBounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		color: 	Color transparent
		extension: 	a MorphExtension (623000320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(739268608)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(564060928)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		owner: 	a ClyMainItemCellMorph(518658816)
		submorphs: 	an Array(an ImageMorph(739268608))
		fullBounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		color: 	Color transparent
		extension: 	a MorphExtension (623000320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(739268608)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(564060928)
	Arguments and temporary variables: 
		arg1: 	[(1014@87) mouseUp 477002625 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		owner: 	a ClyMainItemCellMorph(518658816)
		submorphs: 	an Array(an ImageMorph(739268608))
		fullBounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		color: 	Color transparent
		extension: 	a MorphExtension (623000320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(739268608)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(564060928)
	Arguments and temporary variables: 
		arg1: 	[(1014@87) mouseUp 477002625 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		owner: 	a ClyMainItemCellMorph(518658816)
		submorphs: 	an Array(an ImageMorph(739268608))
		fullBounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		color: 	Color transparent
		extension: 	a MorphExtension (623000320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(739268608)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1014@87) mouseUp 477002625 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(564060928
	Receiver's instance variables: 
		timeStamp: 	477002625
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1014@87)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(564060928)
	Arguments and temporary variables: 
		arg1: 	[(1014@87) mouseUp 477002625 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		owner: 	a ClyMainItemCellMorph(518658816)
		submorphs: 	an Array(an ImageMorph(739268608))
		fullBounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		color: 	Color transparent
		extension: 	a MorphExtension (623000320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(739268608)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(564060928)
	Arguments and temporary variables: 
		arg1: 	[(1014@87) mouseUp 477002625 nil
	Receiver's instance variables: 
		bounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		owner: 	a ClyMainItemCellMorph(518658816)
		submorphs: 	an Array(an ImageMorph(739268608))
		fullBounds: 	(1006.0@85.0) corner: (1022.0@98.0)
		color: 	Color transparent
		extension: 	a MorphExtension (623000320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(739268608)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(564060928)
		arg2: 	[(1014@87) mouseUp 477002625 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(1014@87.0) corner: (1030@103.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@87.0) corner: (1030@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(693031680)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@87) mouseUp 477002625 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477002625 1014 87 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(1014@87) mouseOver red 477002531 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(1014@87.0) corner: (1030@103.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@87.0) corner: (1030@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(693031680)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@87) mouseUp 477002625 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477002625 1014 87 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1014@87) mouseUp 477002625 nil]
		arg2: 	an IconicButton(564060928)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(1014@87.0) corner: (1030@103.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@87.0) corner: (1030@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(693031680)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@87) mouseUp 477002625 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477002625 1014 87 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1014@87) mouseUp 477002625 nil
	Receiver's instance variables: 
		bounds: 	(1014@87.0) corner: (1030@103.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@87.0) corner: (1030@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(693031680)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@87) mouseUp 477002625 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477002625 1014 87 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1014@87) mouseUp 477002625 nil]
		tmp1: 	[(1014@87) mouseUp 477002625 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(1014@87.0) corner: (1030@103.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@87.0) corner: (1030@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(693031680)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@87) mouseUp 477002625 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477002625 1014 87 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(1014@87) mouseUp 477002625 nil]
		tmp2: 	#(1 477002625 1014 87 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(1014@87.0) corner: (1030@103.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@87.0) corner: (1030@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(693031680)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@87) mouseUp 477002625 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477002625 1014 87 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1014@87.0) corner: (1030@103.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1014@87.0) corner: (1030@103.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(693031680)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1014@87) mouseUp 477002625 nil]
		targetOffset: 	(8.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477002625 1014 87 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2574814
		lastStepMessage: 	nil
		lastCycleTime: 	2574851
		alarms: 	a Heap()
		lastAlarmTime: 	2574814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2574814
		lastStepMessage: 	nil
		lastCycleTime: 	2574851
		alarms: 	a Heap()
		lastAlarmTime: 	2574814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2574814
		lastStepMessage: 	nil
		lastCycleTime: 	2574851
		alarms: 	a Heap()
		lastAlarmTime: 	2574814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(186441984) named: Pl...etc...
		lastStepTime: 	2574814
		lastStepMessage: 	nil
		lastCycleTime: 	2574851
		alarms: 	a Heap()
		lastAlarmTime: 	2574814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout class(Object)>>doesNotUnderstand: #add:
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: You presenter named "labelNumberOfBads" from a SimulationDataSetterUI was not initialized.
24 June 2021 2:38:40.940932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout(Object)>>error:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	'You presenter named "labelNumberOfBads" from a SimulationDataSetterUI wa...etc..
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfGoods->a SpBoxConstraints #numberO...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfGoods->a SpBoxConstraints #numberO...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpMorphicAdapterBindings
		arg3: 	#labelNumberOfBads
		arg4: 	a SpBoxConstraint
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfGoods->a SpBoxConstraints #numberO...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(#labelNumberOfGoods->a SpBoxConstraints #numberOfGoods->a SpBoxConstr...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc...
		arg2: 	#labelNumberOfBad
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelNumberOfBads->a SpBoxConstraints #labelNumberOfG...etc...
		orderedKeys: 	#(#labelNumberOfGoods #numberOfGoods #labelNumberOfBads #numberOfB...etc...


OrderedDictionary>>keysDo:
	Receiver: an OrderedDictionary(#labelNumberOfGoods->a SpBoxConstraints #numberOfGoods->a SpBoxConstr...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelNumberOfBads->a SpBoxConstraints #labelNumberOfG...etc...
		orderedKeys: 	#(#labelNumberOfGoods #numberOfGoods #labelNumberOfBads #numberOfB...etc...


OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(#labelNumberOfGoods->a SpBoxConstraints #numberOfGoods->a SpBoxConstr...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc..
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelNumberOfBads->a SpBoxConstraints #labelNumberOfG...etc...
		orderedKeys: 	#(#labelNumberOfGoods #numberOfGoods #labelNumberOfBads #numberOfB...etc...


SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfGoods->a SpBoxConstraints #numberO...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpMorphicAdapterBindings
		arg3: 	a SpBoxLayout
		arg4: 	a SpBoxConstraint
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc...
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout nil nil nil nil...etc...


OrderedDictionary>>keysDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout nil nil nil nil...etc...


OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc..
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout nil nil nil nil...etc...


SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SimulationDataSetterUI(SpAbstractPresenter)>>basicBuildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	nil
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>basicBuildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	nil
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ self basicBuildAdapterWithSpecLayout: arg1 ] in SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	nil
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	a SpMorphicAdapterBindings
		tmp1: 	[ self basicBuildAdapterWithSpecLayout: arg1 ]
		tmp2: 	a SpMorphicAdapterBinding
	Receiver's instance variables: 
		index: 	11


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SpBindings(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildAdapterWithSpecLayout: arg1 ]
		tmp1: 	a Process in nil
		tmp2: 	a SpMorphicAdapterBinding
	Receiver's instance variables: 
		index: 	11


SpBindings class(DynamicVariable class)>>value:during:
	Receiver: SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildAdapterWithSpecLayout: arg1 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary(#default->SpBindings>>#default )
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{SpCurrentSpecDefaultBindings}
		name: 	#SpBindings
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Core-Support'
		soleInstance: 	a SpBindings


SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	nil
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>buildWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	nil
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpMorphicWindowAdapter>>addPresenterIn:withSpecLayout:
	Receiver: a SpMorphicWindowAdapter
	Arguments and temporary variables: 
		arg1: 	a SpWindow(144381952) named: Sumulation Data Setter
		arg2: 	a SpBoxLayout
		tmp1: 	nil
		tmp2: 	(400@300
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpWindowPresenter
		widget: 	a SpWindow(144381952) named: Sumulation Data Setter
		selector: 	nil
		owner: 	a SpWindowPresenter


SpMorphicWindowAdapter(SpAbstractAdapter)>>update:with:
	Receiver: a SpMorphicWindowAdapter
	Arguments and temporary variables: 
		arg1: 	#addPresenterIn:withSpecLayout:
		arg2: 	an Array(a SpWindow(144381952) named: Sumulation Data Setter a SpBoxLayou...etc..
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpWindowPresenter
		widget: 	a SpWindow(144381952) named: Sumulation Data Setter
		selector: 	nil
		owner: 	a SpWindowPresenter


[ :arg3 | arg3 update: arg1 with: arg2 ] in SpWindowPresenter(Model)>>changed:with:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	#addPresenterIn:withSpecLayout:
		arg2: 	an Array(a SpWindow(144381952) named: Sumulation Data Setter a SpBoxLayou...etc...
		arg3: 	a SpMorphicWindowAdapte
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(144381952) na...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ nil ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(144381952) named: Sumulation Data Setter ]


DependentsArray>>do:
	Receiver: a DependentsArray(a SpMorphicWindowAdapter a SpWindow(144381952) named: Sumulation Data Se...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
a DependentsArray(a SpMorphicWindowAdapter a SpWindow(144381952) named: Sumulation Data Se...etc...

SpWindowPresenter(Model)>>changed:with:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	#addPresenterIn:withSpecLayout:
		arg2: 	an Array(a SpWindow(144381952) named: Sumulation Data Setter a SpBoxLayou...etc..
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(144381952) na...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ nil ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(144381952) named: Sumulation Data Setter ]


SpWindowPresenter>>addPresenterIn:withSpecLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpWindow(144381952) named: Sumulation Data Setter
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(144381952) na...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ nil ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(144381952) named: Sumulation Data Setter ]


SpWindowPresenter>>buildWindowWithLayout:presenterLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpAbstractWidgetLayout
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(144381952) na...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ nil ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(144381952) named: Sumulation Data Setter ]


SpWindowPresenter>>basicBuildWithSpecLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayout
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(144381952) na...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ nil ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(144381952) named: Sumulation Data Setter ]


[ self basicBuildWithSpecLayout: arg1 ] in SpWindowPresenter>>buildWithSpecLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(144381952) na...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ nil ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(144381952) named: Sumulation Data Setter ]


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	a SpMorphicAdapterBindings
		tmp1: 	[ self basicBuildWithSpecLayout: arg1 ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	11


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SpBindings(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildWithSpecLayout: arg1 ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	11


SpBindings class(DynamicVariable class)>>value:during:
	Receiver: SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildWithSpecLayout: arg1 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary(#default->SpBindings>>#default )
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{SpCurrentSpecDefaultBindings}
		name: 	#SpBindings
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Core-Support'
		soleInstance: 	a SpBindings


SpWindowPresenter>>buildWithSpecLayout:
	Receiver: a SpWindTHERE_BE_DRAGONS_HERE
Instance of SimulationDataSetterUI did not understand #maximum:
24 June 2021 2:40:07.666932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SimulationDataSetterUI(Object)>>doesNotUnderstand: #maximum:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	nil
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	nil
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	nil
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	nil
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>initializePrivateHooks
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	nil
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	nil
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>initialize
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	tru
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	nil
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	nil
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class(Behavior)>>new
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65561
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65561
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(466948864)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(885861120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(764.0@133.0) corner: (780.0@146.0)
		owner: 	a ClyMainItemCellMorph(1023857408)
		submorphs: 	an Array(an ImageMorph(178567936))
		fullBounds: 	(764.0@133.0) corner: (780.0@146.0)
		color: 	Color transparent
		extension: 	a MorphExtension (85053440) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(178567936)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(885861120)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(764.0@133.0) corner: (780.0@146.0)
		owner: 	a ClyMainItemCellMorph(1023857408)
		submorphs: 	an Array(an ImageMorph(178567936))
		fullBounds: 	(764.0@133.0) corner: (780.0@146.0)
		color: 	Color transparent
		extension: 	a MorphExtension (85053440) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(178567936)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(885861120)
	Arguments and temporary variables: 
		arg1: 	[(772@144) mouseUp 477894562 nil
	Receiver's instance variables: 
		bounds: 	(764.0@133.0) corner: (780.0@146.0)
		owner: 	a ClyMainItemCellMorph(1023857408)
		submorphs: 	an Array(an ImageMorph(178567936))
		fullBounds: 	(764.0@133.0) corner: (780.0@146.0)
		color: 	Color transparent
		extension: 	a MorphExtension (85053440) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(178567936)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(885861120)
	Arguments and temporary variables: 
		arg1: 	[(772@144) mouseUp 477894562 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(764.0@133.0) corner: (780.0@146.0)
		owner: 	a ClyMainItemCellMorph(1023857408)
		submorphs: 	an Array(an ImageMorph(178567936))
		fullBounds: 	(764.0@133.0) corner: (780.0@146.0)
		color: 	Color transparent
		extension: 	a MorphExtension (85053440) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(178567936)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(772@144) mouseUp 477894562 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(885861120
	Receiver's instance variables: 
		timeStamp: 	477894562
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(772@144)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(885861120)
	Arguments and temporary variables: 
		arg1: 	[(772@144) mouseUp 477894562 nil
	Receiver's instance variables: 
		bounds: 	(764.0@133.0) corner: (780.0@146.0)
		owner: 	a ClyMainItemCellMorph(1023857408)
		submorphs: 	an Array(an ImageMorph(178567936))
		fullBounds: 	(764.0@133.0) corner: (780.0@146.0)
		color: 	Color transparent
		extension: 	a MorphExtension (85053440) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(178567936)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(885861120)
	Arguments and temporary variables: 
		arg1: 	[(772@144) mouseUp 477894562 nil
	Receiver's instance variables: 
		bounds: 	(764.0@133.0) corner: (780.0@146.0)
		owner: 	a ClyMainItemCellMorph(1023857408)
		submorphs: 	an Array(an ImageMorph(178567936))
		fullBounds: 	(764.0@133.0) corner: (780.0@146.0)
		color: 	Color transparent
		extension: 	a MorphExtension (85053440) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(178567936)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(885861120)
		arg2: 	[(772@144) mouseUp 477894562 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(772@144.0) corner: (788@160.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(772@144.0) corner: (788@160.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(1007768320)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@144) mouseUp 477894562 nil]
		targetOffset: 	(8.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477894562 772 144 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(772@144) mouseOver red 477894484 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(772@144.0) corner: (788@160.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(772@144.0) corner: (788@160.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(1007768320)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@144) mouseUp 477894562 nil]
		targetOffset: 	(8.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477894562 772 144 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(772@144) mouseUp 477894562 nil]
		arg2: 	an IconicButton(885861120)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(772@144.0) corner: (788@160.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(772@144.0) corner: (788@160.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(1007768320)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@144) mouseUp 477894562 nil]
		targetOffset: 	(8.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477894562 772 144 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(772@144) mouseUp 477894562 nil
	Receiver's instance variables: 
		bounds: 	(772@144.0) corner: (788@160.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(772@144.0) corner: (788@160.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(1007768320)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@144) mouseUp 477894562 nil]
		targetOffset: 	(8.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477894562 772 144 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(772@144) mouseUp 477894562 nil]
		tmp1: 	[(772@144) mouseUp 477894562 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(772@144.0) corner: (788@160.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(772@144.0) corner: (788@160.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(1007768320)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@144) mouseUp 477894562 nil]
		targetOffset: 	(8.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477894562 772 144 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(772@144) mouseUp 477894562 nil]
		tmp2: 	#(1 477894562 772 144 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(772@144.0) corner: (788@160.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(772@144.0) corner: (788@160.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(1007768320)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@144) mouseUp 477894562 nil]
		targetOffset: 	(8.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477894562 772 144 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(772@144.0) corner: (788@160.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(772@144.0) corner: (788@160.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(1007768320)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@144) mouseUp 477894562 nil]
		targetOffset: 	(8.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 477894562 772 144 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	3466763
		lastStepMessage: 	nil
		lastCycleTime: 	3466788
		alarms: 	a Heap()
		lastAlarmTime: 	3466763
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	3466763
		lastStepMessage: 	nil
		lastCycleTime: 	3466788
		alarms: 	a Heap()
		lastAlarmTime: 	3466763
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	3466763
		lastStepMessage: 	nil
		lastCycleTime: 	3466788
		alarms: 	a Heap()
		lastAlarmTime: 	3466763
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	3466763
		lastStepMessage: 	nil
		lastCycleTime: 	3466788
		alarms: 	a Heap()
		lastAlarmTime: 	3466763
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SimulationDataSetterUI(Object)>>doesNotUnderstand: #maximum:
SimulationDataSetterUI>>initializePresenters
SimulationDataSetterUI(SpPresenter)>>initializePrivateHooks
SimulationDataSetterUI(SpPresenter)>>initialize
SimulationDataSetterUI class(Behavior)>>new
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SimulationDataSetterUI did not understand #initialExtent:
24 June 2021 2:48:11.776932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SimulationDataSetterUI(Object)>>doesNotUnderstand: #initialExtent:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	sp := SimulationDataSetterUI new.
	sp initialExtent: 1000.
	sp openW...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	arg5 selectionInterval: (1 to: arg5 text size
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3527)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(325507840))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	3950852
		lastStepMessage: 	nil
		lastCycleTime: 	3950882
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	3950852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	3950852
		lastStepMessage: 	nil
		lastCycleTime: 	3950882
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	3950852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	3950852
		lastStepMessage: 	nil
		lastCycleTime: 	3950882
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	3950852
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SimulationDataSetterUI(Object)>>doesNotUnderstand: #initialExtent:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ZnUnknownHttpVersion
24 June 2021 3:06:23.402932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

[ (ZnUnknownHttpVersion version: arg1) signal ] in ZnStatusLine>>version:
	Receiver: a ZnStatusLine
	Arguments and temporary variables: 
		arg1: 	'
	Receiver's instance variables: 
		version: 	nil
		code: 	nil
		reason: 	nil


Array(Collection)>>detect:ifFound:ifNone:
	Receiver: #('HTTP/1.1' 'HTTP/1.0')
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | arg2 = arg1 ]
		arg2: 	[ :arg3 | arg3 ]
		arg3: 	[ (ZnUnknownHttpVersion version: arg1) signal 
	Receiver's instance variables: 
#('HTTP/1.1' 'HTTP/1.0')

Array(Collection)>>detect:ifNone:
	Receiver: #('HTTP/1.1' 'HTTP/1.0')
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | arg2 = arg1 ]
		arg2: 	[ (ZnUnknownHttpVersion version: arg1) signal 
	Receiver's instance variables: 
#('HTTP/1.1' 'HTTP/1.0')

ZnStatusLine>>version:
	Receiver: a ZnStatusLine
	Arguments and temporary variables: 
		arg1: 	'
	Receiver's instance variables: 
		version: 	nil
		code: 	nil
		reason: 	nil


ZnStatusLine>>readFrom:
	Receiver: a ZnStatusLine
	Arguments and temporary variables: 
		tmp4: 	nil
		arg1: 	a ZdcSocketStream
		tmp1: 	''
		tmp2: 	a ReadStrea
	Receiver's instance variables: 
		version: 	nil
		code: 	nil
		reason: 	nil


ZnStatusLine class>>readFrom:
	Receiver: ZnStatusLine
	Arguments and temporary variables: 
		arg1: 	a ZdcSocketStream
		tmp2: 	a ZnStatusLin
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnStatusLine>>#= #code->ZnStatusLine>>#code ...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnStatusLine
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnResponse>>readHeaderFrom:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		arg1: 	a ZdcSocketStrea
	Receiver's instance variables: 
		headers: 	nil
		entity: 	nil
		statusLine: 	nil


ZnResponse(ZnMessage)>>readFrom:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		arg1: 	a ZdcSocketStrea
	Receiver's instance variables: 
		headers: 	nil
		entity: 	nil
		statusLine: 	nil


ZnResponse class(ZnMessage class)>>readFrom:
	Receiver: ZnResponse
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ZnMessage
		methodDict: 	a MethodDictionary(#=->ZnResponse>>#= #addCookie:->ZnResponse>>#add...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnResponse
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


[ :arg1 | ZnResponse readFrom: arg1 ] in [ [ :arg1 | ZnResponse readFrom: arg1 ] ] in ZnClient>>reader
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	a ZdcSocketStrea
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ self reader value: connection ] in [ response := (#(#HEAD #CONNECT) includes: request method)
	ifTrue: [ ZnResponse readHeaderFrom: connection ]
	ifFalse: [ self streaming
			ifTrue: [ ZnResponse readStreamingFrom: connection ]
			ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] in [ self
	withDefaultCharacterEncoderDo: [ response := (#(#HEAD #CONNECT) includes: request method)
			ifTrue: [ ZnResponse readHeaderFrom: connection ]
			ifFalse: [ self streaming
					ifTrue: [ ZnResponse readStreamingFrom: connection ]
					ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] ] in ZnClient>>readResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		arg1: 	[ self reader value: connection ]
		arg2: 	[ ZnMaximumEntitySize value: self maximumEntitySize during: arg1 
	Receiver's instance variables: 
true

ZnClient>>withMaximumEntitySizeDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ self reader value: connection 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ response := (#(#HEAD #CONNECT) includes: request method)
	ifTrue: [ ZnResponse readHeaderFrom: connection ]
	ifFalse: [ self streaming
			ifTrue: [ ZnResponse readStreamingFrom: connection ]
			ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] in [ self
	withDefaultCharacterEncoderDo: [ response := (#(#HEAD #CONNECT) includes: request method)
			ifTrue: [ ZnResponse readHeaderFrom: connection ]
			ifFalse: [ self streaming
					ifTrue: [ ZnResponse readStreamingFrom: connection ]
					ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] ] in ZnClient>>readResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		arg1: 	[ response := (#(#HEAD #CONNECT) includes: request method)
	ifTrue: [ ZnR...etc...
		arg2: 	[ ZnDefaultCharacterEncoder value: self defaultEncoder during: arg1 
	Receiver's instance variables: 
true

ZnClient>>withDefaultCharacterEncoderDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ response := (#(#HEAD #CONNECT) includes: request method)
	ifTrue: [ ZnR...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ self
	withDefaultCharacterEncoderDo: [ response := (#(#HEAD #CONNECT) includes: request method)
			ifTrue: [ ZnResponse readHeaderFrom: connection ]
			ifFalse: [ self streaming
					ifTrue: [ ZnResponse readStreamingFrom: connection ]
					ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] ] in ZnClient>>readResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		arg1: 	[ self
	withDefaultCharacterEncoderDo: [ response := (#(#HEAD #CONNECT) i...etc...
		arg2: 	[ ZnMaximumNumberOfDictionaryEntries
	value: self maximumNumberOfDictiona...etc..
	Receiver's instance variables: 
true

ZnClient>>withMaximumNumberOfDictionaryEntriesDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ self
	withDefaultCharacterEncoderDo: [ response := (#(#HEAD #CONNECT) i...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>readResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeRequestResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp1: 	5019078
		tmp2: 	1
		tmp3: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


request url in ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>ensure:
	Receiver: request url
	Arguments and temporary variables: 
		arg1: 	self
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnClient>>getConnectionAndExecute
		startpc: 	150
		numArgs: 	0


ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /)
		response: 	nil
		connection: 	a ZdcSocketStream
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3



--- The full stack ---
[ (ZnUnknownHttpVersion version: arg1) signal ] in ZnStatusLine>>version:
Array(Collection)>>detect:ifFound:ifNone:
Array(Collection)>>detect:ifNone:
ZnStatusLine>>version:
ZnStatusLine>>readFrom:
ZnStatusLine class>>readFrom:
ZnResponse>>readHeaderFrom:
ZnResponse(ZnMessage)>>readFrom:
ZnResponse class(ZnMessage class)>>readFrom:
[ :arg1 | ZnResponse readFrom: arg1 ] in [ [ :arg1 | ZnResponse readFrom: arg1 ] ] in ZnClient>>reader
[ self reader value: connection ] in [ response := (#(#HEAD #CONNECT) includes: request method)
	ifTrue: [ ZnResponse readHeaderFrom: connection ]
	ifFalse: [ self streaming
			ifTrue: [ ZnResponse readStreamingFrom: connection ]
			ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] in [ self
	withDefaultCharacterEncoderDo: [ response := (#(#HEAD #CONNECT) includes: request method)
			ifTrue: [ ZnResponse readHeaderFrom: connection ]
			ifFalse: [ self streaming
					ifTrue: [ ZnResponse readStreamingFrom: connection ]
					ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] ] in ZnClient>>readResponse
True>>ifTrue:ifFalse:
ZnClient>>withMaximumEntitySizeDo:
[ response := (#(#HEAD #CONNECT) includes: request method)
	ifTrue: [ ZnResponse readHeaderFrom: connection ]
	ifFalse: [ self streaming
			ifTrue: [ ZnResponse readStreamingFrom: connection ]
			ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] in [ self
	withDefaultCharacterEncoderDo: [ response := (#(#HEAD #CONNECT) includes: request method)
			ifTrue: [ ZnResponse readHeaderFrom: connection ]
			ifFalse: [ self streaming
					ifTrue: [ ZnResponse readStreamingFrom: connection ]
					ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] ] in ZnClient>>readResponse
True>>ifTrue:ifFalse:
ZnClient>>withDefaultCharacterEncoderDo:
[ self
	withDefaultCharacterEncoderDo: [ response := (#(#HEAD #CONNECT) includes: request method)
			ifTrue: [ ZnResponse readHeaderFrom: connection ]
			ifFalse: [ self streaming
					ifTrue: [ ZnResponse readStreamingFrom: connection ]
					ifFalse: [ self withMaximumEntitySizeDo: [ self reader value: connection ] ] ] ] ] in ZnClient>>readResponse
True>>ifTrue:ifFalse:
ZnClient>>withMaximumNumberOfDictionaryEntriesDo:
ZnClient>>readResponse
ZnClient>>executeRequestResponse
request url in ZnClient>>getConnectionAndExecute
BlockClosure>>ensure:
ZnClient>>getConnectionAndExecute
ZnClient>>executeWithRedirectsRemaining:
[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
BlockClosure>>on:do:
ZnClient>>executeWithRetriesRemaining:
[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
BlockClosure>>on:do:
[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnConnectionTimeout(DynamicVariable)>>value:during:
ZnConnectionTimeout class(DynamicVariable class)>>value:during:
ZnClient>>withTimeoutDo:
ZnClient>>executeWithTimeout
[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ arg1 value ] in ZnClient>>withProgressDo:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
BlockClosure>>ensure:
ZnSignalProgress(DynamicVariable)>>value:during:
ZnSignalProgress class(DynamicVariable class)>>value:during:
ZnClient>>withProgressDo:
ZnClient>>execute
ZnClient>>post
tmp3 label: 'Open 1' in SimulationDataSetterUI>>initializePresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ZnMimePart class did not understand #formAt:put:
24 June 2021 3:09:11.637932 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnMimePart class(Object)>>doesNotUnderstand: #formAt:put:
	Receiver: ZnMimePart
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnMimePart>>#= #contentDisposition->ZnMimePa...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnMimePart
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


[ | tmp7 tmp9 |
tmp7 := ZnClient new.
tmp7 url: 'http://localhost:8080/'.
tmp9 := ZnMimePart.
tmp9 formAt: 'username' put: 'john.doe@acme.com'.
tmp7
	addPart:
		(tmp9
			formAt: 'search-field'
			put:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString) ].
(Delay forSeconds: 2) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	nil
		tmp7: 	a ZnClient
		tmp9: 	a ZnClien
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp7 tmp9 |
tmp7 := ZnClient new.
tmp7 url: 'http:...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(829077504
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(829077504))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(829077504)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(829077504)
	Arguments and temporary variables: 
		arg1: 	[(386@315) mouseUp 479638531 nil
	Receiver's instance variables: 
		bounds: 	(125.0@299.0) corner: (1115.0@324.0)
		owner: 	a Morph(360110848)
		submorphs: 	an Array(an AlignmentMorph(76649216))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (907881216) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(890429440)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(829077504)
	Arguments and temporary variables: 
		arg1: 	[(386@315) mouseUp 479638531 nil]
		tmp1: 	an Array(a PluggableButtonMorph(829077504))
		arg3: 	a PluggableButtonMorph(829077504
	Receiver's instance variables: 
		bounds: 	(125.0@299.0) corner: (1115.0@324.0)
		owner: 	a Morph(360110848)
		submorphs: 	an Array(an AlignmentMorph(76649216))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (907881216) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(890429440)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(829077504))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(829077504))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(829077504)
	Arguments and temporary variables: 
		arg1: 	an Array(a PluggableButtonMorph(829077504))
		tmp1: 	an Array(a PluggableButtonMorph(829077504))
		arg3: 	[(386@315) mouseUp 479638531 nil
	Receiver's instance variables: 
		bounds: 	(125.0@299.0) corner: (1115.0@324.0)
		owner: 	a Morph(360110848)
		submorphs: 	an Array(an AlignmentMorph(76649216))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (907881216) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(890429440)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(829077504)
	Arguments and temporary variables: 
		arg1: 	[(386@315) mouseUp 479638531 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(125.0@299.0) corner: (1115.0@324.0)
		owner: 	a Morph(360110848)
		submorphs: 	an Array(an AlignmentMorph(76649216))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (907881216) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(890429440)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(386@315) mouseUp 479638531 nil]
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(829077504
	Receiver's instance variables: 
		timeStamp: 	479638531
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(386@315)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(829077504)
	Arguments and temporary variables: 
		arg1: 	[(386@315) mouseUp 479638531 nil
	Receiver's instance variables: 
		bounds: 	(125.0@299.0) corner: (1115.0@324.0)
		owner: 	a Morph(360110848)
		submorphs: 	an Array(an AlignmentMorph(76649216))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (907881216) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(890429440)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(829077504)
	Arguments and temporary variables: 
		arg1: 	[(386@315) mouseUp 479638531 nil
	Receiver's instance variables: 
		bounds: 	(125.0@299.0) corner: (1115.0@324.0)
		owner: 	a Morph(360110848)
		submorphs: 	an Array(an AlignmentMorph(76649216))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (907881216) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(890429440)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(829077504)
		arg2: 	[(386@315) mouseUp 479638531 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(386@315.0) corner: (402@331.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(386@315.0) corner: (402@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(829077504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(386@315) mouseUp 479638531 nil]
		targetOffset: 	(261.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 479638531 386 315 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(386@315) mouseOver red 479638437 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(386@315.0) corner: (402@331.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(386@315.0) corner: (402@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(829077504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(386@315) mouseUp 479638531 nil]
		targetOffset: 	(261.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 479638531 386 315 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(386@315) mouseUp 479638531 nil]
		arg2: 	a PluggableButtonMorph(829077504)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(386@315.0) corner: (402@331.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(386@315.0) corner: (402@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(829077504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(386@315) mouseUp 479638531 nil]
		targetOffset: 	(261.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 479638531 386 315 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(386@315) mouseUp 479638531 nil
	Receiver's instance variables: 
		bounds: 	(386@315.0) corner: (402@331.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(386@315.0) corner: (402@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(829077504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(386@315) mouseUp 479638531 nil]
		targetOffset: 	(261.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 479638531 386 315 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(386@315) mouseUp 479638531 nil]
		tmp1: 	[(386@315) mouseUp 479638531 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(386@315.0) corner: (402@331.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(386@315.0) corner: (402@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(829077504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(386@315) mouseUp 479638531 nil]
		targetOffset: 	(261.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 479638531 386 315 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(386@315) mouseUp 479638531 nil]
		tmp2: 	#(1 479638531 386 315 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(386@315.0) corner: (402@331.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(386@315.0) corner: (402@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(829077504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(386@315) mouseUp 479638531 nil]
		targetOffset: 	(261.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 479638531 386 315 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(386@315.0) corner: (402@331.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(386@315.0) corner: (402@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(829077504)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(386@315) mouseUp 479638531 nil]
		targetOffset: 	(261.0@16.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 479638531 386 315 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	5210729
		lastStepMessage: 	nil
		lastCycleTime: 	5210763
		alarms: 	a Heap()
		lastAlarmTime: 	5210729
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	5210729
		lastStepMessage: 	nil
		lastCycleTime: 	5210763
		alarms: 	a Heap()
		lastAlarmTime: 	5210729
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	5210729
		lastStepMessage: 	nil
		lastCycleTime: 	5210763
		alarms: 	a Heap()
		lastAlarmTime: 	5210729
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(358535168))(a TRMorph(358535...etc...
		lastStepTime: 	5210729
		lastStepMessage: 	nil
		lastCycleTime: 	5210763
		alarms: 	a Heap()
		lastAlarmTime: 	5210729
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1536@801)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1536@801)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ZnMimePart class(Object)>>doesNotUnderstand: #formAt:put:
[ | tmp7 tmp9 |
tmp7 := ZnClient new.
tmp7 url: 'http://localhost:8080/'.
tmp9 := ZnMimePart.
tmp9 formAt: 'username' put: 'john.doe@acme.com'.
tmp7
	addPart:
		(tmp9
			formAt: 'search-field'
			put:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString) ].
(Delay forSeconds: 2) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouTHERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
24 June 2021 3:12:04.874303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot write to the changes file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo 8.0 - 64bit (stable)-01.changes.

Please check that you have write permission for this file.

You won't be able to save this image correctly until you fix this.
24 June 2021 3:12:05.047303 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Damjan\Documents\P...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Damjan\Documents\P...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'the changes file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withChangesRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informProblemInChanges:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:silent:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	false
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	fals
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 

	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-24T15:12:04.840303+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withChangesRef:
PharoFilesOpener>>informProblemInChanges:
PharoFilesOpener>>changesFileOrNilReadOnly:silent:
PharoFilesOpener>>changesFileOrNilReadOnly:
PharoFilesOpener>>changesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
24 June 2021 3:12:16.37585 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:16.33785+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:16.33785+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:16.33785+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:16.33785+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:16.33785+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T15:12:16.33785+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: No presenter named "labelNumberOfFoodSources" was found in a SimulationDataSetterUI
24 June 2021 4:12:16.55285 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout(Object)>>error:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	'No presenter named "labelNumberOfFoodSources" was found in a SimulationD...etc..
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #n...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] in [ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] ] in SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	#labelNumberOfFoodSource
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #n...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


BlockClosure>>cull:
	Receiver: [ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ]
	Arguments and temporary variables: 
		arg1: 	SlotNotFound: Could not build slot named 'labelNumberOfFoodSources' becau...etc..
	Receiver's instance variables: 
		outerContext: 	[ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No present...etc...
		startpc: 	106
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		arg1: 	SlotNotFound: Could not build slot named 'labelNumberOfFoodSources' becau...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		sender: 	SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self readSlotNamed: arg1 ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		arg1: 	SlotNotFound: Could not build slot named 'labelNumberOfFoodSources' becau...etc..
	Receiver's instance variables: 
		sender: 	SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self readSlotNamed: arg1 ]


SlotNotFound(Exception)>>signal
	Receiver: SlotNotFound: Could not build slot named 'labelNumberOfFoodSources' because the assignated...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer => ...etc...
		signalContext: 	SlotNotFound(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		name: 	#labelNumberOfFoodSources


SlotNotFound class>>signalForName:
	Receiver: SlotNotFound
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ClassBuilderError
		methodDict: 	a MethodDictionary(#messageText->SlotNotFound>>#messageText #name->...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SlotNotFound
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-Core-Exception'


[ SlotNotFound signalForName: arg1 ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope(#dependents => InstanceVariableSlot #announcer => InstanceVariableSlot ...etc...
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSource
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer ...etc...


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope(#dependents => InstanceVariableSlot #announcer => InstanceVariableSlot ...etc...
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSources
		arg2: 	[ SlotNotFound signalForName: arg1 
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer ...etc...


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope(#dependents => InstanceVariableSlot #announcer => InstanceVariableSlot ...etc...
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSource
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer ...etc...


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSource
	Receiver's instance variables: 
		host: 	SimulationDataSetterUI
		slotScope: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer =>...etc...


SimulationDataSetterUI class(ClassDescription)>>slotNamed:
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSource
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65563
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI
		numberOfBads: 	nil


SimulationDataSetterUI(Object)>>readSlotNamed:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSource
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ self readSlotNamed: arg1 ] in SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSources
		arg2: 	[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 p...etc..
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


BlockClosure>>on:do:
	Receiver: [ self readSlotNamed: arg1 ]
	Arguments and temporary variables: 
		arg1: 	SlotNotFound
		arg2: 	[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 p...etc..
	Receiver's instance variables: 
		outerContext: 	SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
		startpc: 	54
		numArgs: 	0


SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSources
		arg2: 	[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 p...etc..
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] ] in SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSources
		arg2: 	a SimulationDataSetterU
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #n...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSources
		arg2: 	[ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	#labelNumberOfFoodSources
		arg2: 	a SimulationDataSetterU
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #n...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #n...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpMorphicAdapterBindings
		arg3: 	#labelNumberOfFoodSources
		arg4: 	a SpBoxConstraint
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #n...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #numberOfFoodSources->a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc...
		arg2: 	#labelNumberOfFoodSource
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelNumberOfFoodSources->a SpBoxConstraints #numberO...etc...
		orderedKeys: 	#(#labelNumberOfFoodSources #numberOfFoodSources nil nil nil nil n...etc...


OrderedDictionary>>keysDo:
	Receiver: an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #numberOfFoodSources->a...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelNumberOfFoodSources->a SpBoxConstraints #numberO...etc...
		orderedKeys: 	#(#labelNumberOfFoodSources #numberOfFoodSources nil nil nil nil n...etc...


OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #numberOfFoodSources->a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc..
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelNumberOfFoodSources->a SpBoxConstraints #numberO...etc...
		orderedKeys: 	#(#labelNumberOfFoodSources #numberOfFoodSources nil nil nil nil n...etc...


SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelNumberOfFoodSources->a SpBoxConstraints #n...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpMorphicAdapterBindings
		arg3: 	a SpBoxLayout
		arg4: 	a SpBoxConstraint
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc...
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


OrderedDictionary>>keysDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc..
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SimulationDataSetterUI(SpAbstractPresenter)>>basicBuildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>basicBuildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ self basicBuildAdapterWithSpecLayout: arg1 ] in SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	a SpMorphicAdapterBindings
		tmp1: 	[ self basicBuildAdapterWithSpecLayout: arg1 ]
		tmp2: 	a SpMorphicAdapterBinding
	Receiver's instance variables: 
		index: 	11


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SpBindings(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildAdapterWithSpecLayout: arg1 ]
		tmp1: 	a Process in nil
		tmp2: 	a SpMorphicAdapterBinding
	Receiver's instance variables: 
		index: 	11


SpBindings class(DynamicVariable class)>>value:during:
	Receiver: SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildAdapterWithSpecLayout: arg1 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary(#default->SpBindings>>#default )
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{SpCurrentSpecDefaultBindings}
		name: 	#SpBindings
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Core-Support'
		soleInstance: 	a SpBindings


SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter



--- The full stack ---
SpBoxLayout(Object)>>error:
[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] in [ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] ] in SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
SlotNotFound(Exception)>>signal
SlotNotFound class>>signalForName:
[ SlotNotFound signalForName: arg1 ] in LayoutClassScope(LayoutAbstractScope)>>atName:
LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
LayoutClassScope(LayoutAbstractScope)>>atName:
FixedLayout(PointerLayout)>>resolveSlot:
SimulationDataSetterUI class(ClassDescription)>>slotNamed:
SimulationDataSetterUI(Object)>>readSlotNamed:
[ self readSlotNamed: arg1 ] in SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
BlockClosure>>on:do:
SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
[ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] ] in SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
Dictionary>>at:ifAbsent:
SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
OrderedDictionary>>keysDo:
OrderedDictionary>>keysAndValuesDo:
SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
OrderedDictionary>>keysDo:
OrderedDictionary>>keysAndValuesDo:
SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
SimulationDataSetterUI(SpAbstractPresenter)>>basicBuildAdapterWithSpecLayout:
SimulationDataSetterUI(SpPresenter)>>basicBuildAdapterWithSpecLayout:
[ self basicBuildAdapterWithSpecLayout: arg1 ] in SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
BlockClosure>>ensure:
SpBindings(DynamicVariable)>>value:during:
SpBindings class(DynamicVariable class)>>value:during:
SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SimulationDataSetterUI(SpAbstractPresenter)>>buildWithSpecLayout:
SpMorphicWindowAdapter>>addPresenterIn:withSpecLayout:
SpMorphicWindowAdapter(SpAbstractAdapter)>>update:with:
[ :arg3 | arg3 update: arg1 with: arg2 ] in SpWindowPresenter(Model)>>changed:with:
DependentsArray>>do:
SpWindowPresenter(Model)>>changed:with:
SpWindowPresenter>>addPresenterIn:withSpecLayout:
SpWindowPresenter>>buildWindowWithLayout:presenterLayout:
SpWindowPresenter>>basicBuildWithSpecLayout:
[ self basicBuildWithSpecLayout: arg1 ] in SpWindowPresenter>>buildWithSpecLayout:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
BlockClosure>>ensure:
SpBindings(DynamicVariable)>>value:during:
SpBindings class(DynamicVariable class)>>value:during:
SpWindowPresenter>>buildWithSpecLayout:
SpWindowPresenter>>openWithSpecLayout:
SpNullApplication(SpApplication)>>open:withSpecLayout:using:
SpNullApplication(SpApplication)>>open:withSpecLayout:
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: You presenter named "labelaNumberOfFoodSources" from a SimulationDataSetterUI was not initialized.
24 June 2021 4:13:14.58485 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout(Object)>>error:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	'You presenter named "labelaNumberOfFoodSources" from a SimulationDataSet...etc..
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpMorphicAdapterBindings
		arg3: 	#labelaNumberOfFoodSources
		arg4: 	a SpBoxConstraint
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #numberOfFoodSources->...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc...
		arg2: 	#labelaNumberOfFoodSource
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #number...etc...
		orderedKeys: 	#(#labelaNumberOfFoodSources #numberOfFoodSources nil nil nil nil ...etc...


OrderedDictionary>>keysDo:
	Receiver: an OrderedDictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #numberOfFoodSources->...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #number...etc...
		orderedKeys: 	#(#labelaNumberOfFoodSources #numberOfFoodSources nil nil nil nil ...etc...


OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #numberOfFoodSources->...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc..
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #number...etc...
		orderedKeys: 	#(#labelaNumberOfFoodSources #numberOfFoodSources nil nil nil nil ...etc...


SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#labelaNumberOfFoodSources->a SpBoxConstraints #...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpMorphicAdapterBindings
		arg3: 	a SpBoxLayout
		arg4: 	a SpBoxConstraint
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc...
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


OrderedDictionary>>keysDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc..
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SimulationDataSetterUI(SpAbstractPresenter)>>basicBuildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>basicBuildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ self basicBuildAdapterWithSpecLayout: arg1 ] in SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	a SpMorphicAdapterBindings
		tmp1: 	[ self basicBuildAdapterWithSpecLayout: arg1 ]
		tmp2: 	a SpMorphicAdapterBinding
	Receiver's instance variables: 
		index: 	11


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SpBindings(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildAdapterWithSpecLayout: arg1 ]
		tmp1: 	a Process in nil
		tmp2: 	a SpMorphicAdapterBinding
	Receiver's instance variables: 
		index: 	11


SpBindings class(DynamicVariable class)>>value:during:
	Receiver: SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildAdapterWithSpecLayout: arg1 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary(#default->SpBindings>>#default )
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{SpCurrentSpecDefaultBindings}
		name: 	#SpBindings
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Core-Support'
		soleInstance: 	a SpBindings


SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>buildWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	nil
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpMorphicWindowAdapter>>addPresenterIn:withSpecLayout:
	Receiver: a SpMorphicWindowAdapter
	Arguments and temporary variables: 
		arg1: 	a SpWindow(1051312896) named: Sumulation Data Setter
		arg2: 	a SpBoxLayout
		tmp1: 	nil
		tmp2: 	(1000@1000
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpWindowPresenter
		widget: 	a SpWindow(1051312896) named: Sumulation Data Setter
		selector: 	nil
		owner: 	a SpWindowPresenter


SpMorphicWindowAdapter(SpAbstractAdapter)>>update:with:
	Receiver: a SpMorphicWindowAdapter
	Arguments and temporary variables: 
		arg1: 	#addPresenterIn:withSpecLayout:
		arg2: 	an Array(a SpWindow(1051312896) named: Sumulation Data Setter a SpBoxLayo...etc..
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		model: 	a SpWindowPresenter
		widget: 	a SpWindow(1051312896) named: Sumulation Data Setter
		selector: 	nil
		owner: 	a SpWindowPresenter


[ :arg3 | arg3 update: arg1 with: arg2 ] in SpWindowPresenter(Model)>>changed:with:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	#addPresenterIn:withSpecLayout:
		arg2: 	an Array(a SpWindow(1051312896) named: Sumulation Data Setter a SpBoxLayo...etc...
		arg3: 	a SpMorphicWindowAdapte
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) n...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ (1000@1000) ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(1051312896) named: Sumulation Data Setter ]...etc...


DependentsArray>>do:
	Receiver: a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) named: Sumulation Data S...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) named: Sumulation Data S...etc...

SpWindowPresenter(Model)>>changed:with:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	#addPresenterIn:withSpecLayout:
		arg2: 	an Array(a SpWindow(1051312896) named: Sumulation Data Setter a SpBoxLayo...etc..
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) n...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ (1000@1000) ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(1051312896) named: Sumulation Data Setter ]...etc...


SpWindowPresenter>>addPresenterIn:withSpecLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpWindow(1051312896) named: Sumulation Data Setter
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) n...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ (1000@1000) ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(1051312896) named: Sumulation Data Setter ]...etc...


SpWindowPresenter>>buildWindowWithLayout:presenterLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpAbstractWidgetLayout
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) n...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ (1000@1000) ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(1051312896) named: Sumulation Data Setter ]...etc...


SpWindowPresenter>>basicBuildWithSpecLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayout
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) n...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ (1000@1000) ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(1051312896) named: Sumulation Data Setter ]...etc...


[ self basicBuildWithSpecLayout: arg1 ] in SpWindowPresenter>>buildWithSpecLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) n...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ (1000@1000) ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(1051312896) named: Sumulation Data Setter ]...etc...


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	a SpMorphicAdapterBindings
		tmp1: 	[ self basicBuildWithSpecLayout: arg1 ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	11


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SpBindings(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildWithSpecLayout: arg1 ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	11


SpBindings class(DynamicVariable class)>>value:during:
	Receiver: SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildWithSpecLayout: arg1 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary(#default->SpBindings>>#default )
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{SpCurrentSpecDefaultBindings}
		name: 	#SpBindings
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Core-Support'
		soleInstance: 	a SpBindings


SpWindowPresenter>>buildWithSpecLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) n...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ (1000@1000) ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(1051312896) named: Sumulation Data Setter ]...etc...


SpWindowPresenter>>openWithSpecLayout:
	Receiver: a SpWindowPresenter
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicWindowAdapter a SpWindow(1051312896) n...etc...
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	a SpMorphicWindowAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		presenter: 	a SpValueHolder[ a SimulationDataSetterUI ]
		initialPosition: 	a SpValueHolder[ nil ]
		initialExtent: 	a SpValueHolder[ (1000@1000) ]
		isResizeable: 	a SpValueHolder[ true ]
		menu: 	a SpValueHolder[ nil ]
		centered: 	a SpValueHolder[ false ]
		isClosed: 	a SpValueHolder[ true ]
		statusbar: 	a SpValueHolder[ nil ]
		toolBar: 	a SpValueHolder[ nil ]
		window: 	a SpValueHolder[ a SpWindow(1051312896) named: Sumulation Data Setter ]...etc...


SpNullApplication(SpApplication)>>open:withSpecLayout:using:
	Receiver: a SpNullApplication
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpBoxLayout
		arg3: 	SpWindowPresenter
		tmp1: 	a SpWindowPresente
	Receiver's instance variables: 
		backend: 	a SpMorphicBackend
		windows: 	a Set(a SpWindowPresenter a SpWindowPresenter a SpWindowPresenter a Sp...etc...
		properties: 	a SmallDictionary()
		configuration: 	nil


SpNullApplication(SpApplication)>>open:withSpecLayout:
	Receiver: a SpNullApplication
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		backend: 	a SpMorphicBackend
		windows: 	a Set(a SpWindowPresenter a SpWindowPresenter a SpWindowPresenter a Sp...etc...
		properties: 	a SmallDictionary()
		configuration: 	nil



--- The full stack ---
SpBoxLayout(Object)>>error:
SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
OrderedDictionary>>keysDo:
OrderedDictionary>>keysAndValuesDo:
SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
OrderedDictionary>>keysDo:
OrderedDictionary>>keysAndValuesDo:
SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
SimulationDataSetterUI(SpAbstractPresenter)>>basicBuildAdapterWithSpecLayout:
SimulationDataSetterUI(SpPresenter)>>basicBuildAdapterWithSpecLayout:
[ self basicBuildAdapterWithSpecLayout: arg1 ] in SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
BlockClosure>>ensure:
SpBindings(DynamicVariable)>>value:during:
SpBindings class(DynamicVariable class)>>value:during:
SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
SimulationDataSetterUI(SpAbstractPresenter)>>buildWithSpecLayout:
SpMorphicWindowAdapter>>addPresenterIn:withSpecLayout:
SpMorphicWindowAdapter(SpAbstractAdapter)>>update:with:
[ :arg3 | arg3 update: arg1 with: arg2 ] in SpWindowPresenter(Model)>>changed:with:
DependentsArray>>do:
SpWindowPresenter(Model)>>changed:with:
SpWindowPresenter>>addPresenterIn:withSpecLayout:
SpWindowPresenter>>buildWindowWithLayout:presenterLayout:
SpWindowPresenter>>basicBuildWithSpecLayout:
[ self basicBuildWithSpecLayout: arg1 ] in SpWindowPresenter>>buildWithSpecLayout:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
BlockClosure>>ensure:
SpBindings(DynamicVariable)>>value:during:
SpBindings class(DynamicVariable class)>>value:during:
SpWindowPresenter>>buildWithSpecLayout:
SpWindowPresenter>>openWithSpecLayout:
SpNullApplication(SpApplication)>>open:withSpecLayout:using:
SpNullApplication(SpApplication)>>open:withSpecLayout:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SimulationDataSetterUI did not understand #minimum:
24 June 2021 4:19:07.37685 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SimulationDataSetterUI(Object)>>doesNotUnderstand: #minimum:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	a SpNumberInputFieldPresenter
		tmp2: 	nil
		tmp3: 	a SpRadioButtonPresenter
		tmp4: 	a SpNumberInputFieldPresenter
		tmp6: 	a SimulationDataSetterU
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>initializePrivateHooks
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>initialize
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	tru
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	nil
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class(Behavior)>>new
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65563
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI
		numberOfBads: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	sp := SimulationDataSetterUI new.
	^ sp openWithSpec
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3508)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(496044800))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(315863808))(a TRMorph(315863...etc...
		lastStepTime: 	4011065
		lastStepMessage: 	nil
		lastCycleTime: 	4011111
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	4011065
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(315863808))(a TRMorph(315863...etc...
		lastStepTime: 	4011065
		lastStepMessage: 	nil
		lastCycleTime: 	4011111
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	4011065
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(315863808))(a TRMorph(315863...etc...
		lastStepTime: 	4011065
		lastStepMessage: 	nil
		lastCycleTime: 	4011111
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	4011065
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1536@801)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@785)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1520@785)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SimulationDataSetterUI(Object)>>doesNotUnderstand: #minimum:
SimulationDataSetterUI>>initializePresenters
SimulationDataSetterUI(SpPresenter)>>initializePrivateHooks
SimulationDataSetterUI(SpPresenter)>>initialize
SimulationDataSetterUI class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: No presenter named "button1" was found in a SimulationDataSetterUI
24 June 2021 4:26:11.97785 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout(Object)>>error:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	'No presenter named "button1" was found in a SimulationDataSetterUI
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxCo...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] in [ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] ] in SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	#button
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxCo...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


BlockClosure>>cull:
	Receiver: [ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ]
	Arguments and temporary variables: 
		arg1: 	SlotNotFound: Could not build slot named 'button1' because the assignated...etc..
	Receiver's instance variables: 
		outerContext: 	[ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No present...etc...
		startpc: 	106
		numArgs: 	0


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		arg1: 	SlotNotFound: Could not build slot named 'button1' because the assignated...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		sender: 	SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self readSlotNamed: arg1 ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		arg1: 	SlotNotFound: Could not build slot named 'button1' because the assignated...etc..
	Receiver's instance variables: 
		sender: 	SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ self readSlotNamed: arg1 ]


SlotNotFound(Exception)>>signal
	Receiver: SlotNotFound: Could not build slot named 'button1' because the assignated slot was not fou...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer => ...etc...
		signalContext: 	SlotNotFound(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		name: 	#button1


SlotNotFound class>>signalForName:
	Receiver: SlotNotFound
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	ClassBuilderError
		methodDict: 	a MethodDictionary(#messageText->SlotNotFound>>#messageText #name->...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SlotNotFound
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-Core-Exception'


[ SlotNotFound signalForName: arg1 ] in LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope(#dependents => InstanceVariableSlot #announcer => InstanceVariableSlot ...etc...
	Arguments and temporary variables: 
		arg1: 	#button
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer ...etc...


LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
	Receiver: a LayoutClassScope(#dependents => InstanceVariableSlot #announcer => InstanceVariableSlot ...etc...
	Arguments and temporary variables: 
		arg1: 	#button1
		arg2: 	[ SlotNotFound signalForName: arg1 
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer ...etc...


LayoutClassScope(LayoutAbstractScope)>>atName:
	Receiver: a LayoutClassScope(#dependents => InstanceVariableSlot #announcer => InstanceVariableSlot ...etc...
	Arguments and temporary variables: 
		arg1: 	#button
	Receiver's instance variables: 
		parentScope: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer ...etc...


FixedLayout(PointerLayout)>>resolveSlot:
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		arg1: 	#button
	Receiver's instance variables: 
		host: 	SimulationDataSetterUI
		slotScope: 	a LayoutClassScope(#dependents => InstanceVariableSlot #announcer =>...etc...


SimulationDataSetterUI class(ClassDescription)>>slotNamed:
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#button
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI
		numberOfBads: 	nil


SimulationDataSetterUI(Object)>>readSlotNamed:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#button
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]


[ self readSlotNamed: arg1 ] in SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#button1
		arg2: 	[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 p...etc..
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]


BlockClosure>>on:do:
	Receiver: [ self readSlotNamed: arg1 ]
	Arguments and temporary variables: 
		arg1: 	SlotNotFound
		arg2: 	[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 p...etc..
	Receiver's instance variables: 
		outerContext: 	SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
		startpc: 	54
		numArgs: 	0


SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#button1
		arg2: 	[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 p...etc..
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]


[ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] ] in SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	#button1
		arg2: 	a SimulationDataSetterU
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxCo...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary()
	Arguments and temporary variables: 
		arg1: 	#button1
		arg2: 	[ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil)


SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	#button1
		arg2: 	a SimulationDataSetterU
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxCo...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxCo...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpMorphicAdapterBindings
		arg3: 	#button1
		arg4: 	a SpBoxConstraint
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxCo...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxConstraints #button3->a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc...
		arg2: 	#button
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#button1->a SpBoxConstraints #button2->a SpBoxConstrai...etc...
		orderedKeys: 	#(#button1 #button2 #button3 nil nil nil nil nil nil nil)


OrderedDictionary>>keysDo:
	Receiver: an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxConstraints #button3->a...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#button1->a SpBoxConstraints #button2->a SpBoxConstrai...etc...
		orderedKeys: 	#(#button1 #button2 #button3 nil nil nil nil nil nil nil)


OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxConstraints #button3->a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc..
	Receiver's instance variables: 
		dictionary: 	a Dictionary(#button1->a SpBoxConstraints #button2->a SpBoxConstrai...etc...
		orderedKeys: 	#(#button1 #button2 #button3 nil nil nil nil nil nil nil)


SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints #button2->a SpBoxCo...etc...
		selector: 	nil
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
		arg1: 	a SimulationDataSetterUI
		arg2: 	a SpMorphicAdapterBindings
		arg3: 	a SpBoxLayout
		arg4: 	a SpBoxConstraint
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc...
		arg2: 	a SpBoxLayou
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


OrderedDictionary>>keysDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


OrderedDictionary>>keysAndValuesDo:
	Receiver: an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpBoxConstraints a...etc...
	Arguments and temporary variables: 
		arg1: 	[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: ar...etc..
	Receiver's instance variables: 
		dictionary: 	a Dictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout->a SpB...etc...
		orderedKeys: 	an Array(a SpBoxLayout a SpBoxLayout a SpBoxLayout a SpBoxLayout n...etc...


SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(a SpBoxLayout->a SpBoxConstraints a SpBoxLayout-...etc...
		selector: 	#defaultSpec
		adapter: 	a SpMorphicBoxAdapter
		direction: 	a SpLayoutDirectionVertical
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SimulationDataSetterUI(SpAbstractPresenter)>>basicBuildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]


SimulationDataSetterUI(SpPresenter)>>basicBuildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]


[ self basicBuildAdapterWithSpecLayout: arg1 ] in SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	a SpMorphicAdapterBindings
		tmp1: 	[ self basicBuildAdapterWithSpecLayout: arg1 ]
		tmp2: 	a SpMorphicAdapterBinding
	Receiver's instance variables: 
		index: 	11


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SpBindings(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


SpBindings(DynamicVariable)>>value:during:
	Receiver: a SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildAdapterWithSpecLayout: arg1 ]
		tmp1: 	a Process in nil
		tmp2: 	a SpMorphicAdapterBinding
	Receiver's instance variables: 
		index: 	11


SpBindings class(DynamicVariable class)>>value:during:
	Receiver: SpBindings
	Arguments and temporary variables: 
		arg1: 	a SpMorphicAdapterBindings
		arg2: 	[ self basicBuildAdapterWithSpecLayout: arg1 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary(#default->SpBindings>>#default )
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{SpCurrentSpecDefaultBindings}
		name: 	#SpBindings
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Spec2-Core-Support'
		soleInstance: 	a SpBindings


SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	a SpBoxLayou
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter)
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]



--- The full stack ---
SpBoxLayout(Object)>>error:
[ self
	error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] in [ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] ] in SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
SlotNotFound(Exception)>>signal
SlotNotFound class>>signalForName:
[ SlotNotFound signalForName: arg1 ] in LayoutClassScope(LayoutAbstractScope)>>atName:
LayoutClassScope(LayoutAbstractScope)>>atName:ifAbsent:
LayoutClassScope(LayoutAbstractScope)>>atName:
FixedLayout(PointerLayout)>>resolveSlot:
SimulationDataSetterUI class(ClassDescription)>>slotNamed:
SimulationDataSetterUI(Object)>>readSlotNamed:
[ self readSlotNamed: arg1 ] in SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
BlockClosure>>on:do:
SimulationDataSetterUI(SpPresenter)>>presenterAt:ifAbsent:
[ arg2
	presenterAt: arg1
	ifAbsent: [ self
			error: 'No presenter named "' , arg1 , '" was found in ' , arg2 printString ] ] in SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
Dictionary>>at:ifAbsent:
SpBoxLayout(SpExecutableLayout)>>subpresenterOrLayoutNamed:of:
SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
OrderedDictionary>>keysDo:
OrderedDictionary>>keysAndValuesDo:
SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
SpBoxLayout(SpExecutableLayout)>>resolvePresenter:presenter:bindings:
[ :arg3 :arg4 | 
adapter
	add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2)
	constraints: arg4 ] in SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
[ :arg2 | arg1 value: arg2 value: (self at: arg2) ] in OrderedDictionary>>keysAndValuesDo:
OrderedDictionary>>keysDo:
OrderedDictionary>>keysAndValuesDo:
SpBoxLayout(SpExecutableLayout)>>buildAdapterFor:bindings:
SimulationDataSetterUI(SpAbstractPresenter)>>basicBuildAdapterWithSpecLayout:
SimulationDataSetterUI(SpPresenter)>>basicBuildAdapterWithSpecLayout:
[ self basicBuildAdapterWithSpecLayout: arg1 ] in SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
BlockClosure>>ensure:
SpBindings(DynamicVariable)>>value:during:
SpBindings class(DynamicVariable class)>>value:during:
SimulationDataSetterUI(SpAbstractPresenter)>>buildAdapterWithSpecLayout:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SimulationDataSetterUI(SpAbstractPresenter)>>buildWithSpecLayout:
SpMorphicWindowAdapter>>addPresenterIn:withSpecLayout:
SpMorphicWindowAdapter(SpAbstractAdapter)>>update:with:
[ :arg3 | arg3 update: arg1 with: arg2 ] in SpWindowPresenter(Model)>>changed:with:
DependentsArray>>do:
SpWindowPresenter(Model)>>changed:with:
SpWindowPresenter>>addPresenterIn:withSpecLayout:
SpWindowPresenter>>buildWindowWithLayout:presenterLayout:
SpWindowPresenter>>basicBuildWithSpecLayout:
[ self basicBuildWithSpecLayout: arg1 ] in SpWindowPresenter>>buildWithSpecLayout:
[ tmp1 psValueAt: index put: arg1.
arg2 value ] in SpBindings(DynamicVariable)>>value:during:
BlockClosure>>ensure:
SpBindings(DynamicVariable)>>value:during:
SpBindings class(DynamicVariable class)>>value:during:
SpWindowPresenter>>buildWithSpecLayout:
SpWindowPresenter>>openWithSpecLayout:
SpNullApplication(SpApplication)>>open:withSpecLayout:using:
SpNullApplication(SpApplication)>>open:withSpecLayout:
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
24 June 2021 4:28:05.119079 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T16:28:05.085079+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T16:28:05.085079+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T16:28:05.085079+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T16:28:05.085079+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T16:28:05.085079+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-24T16:28:05.085079+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ZnHttpUnsuccessful: 500 Internal Server Error
24 June 2021 6:29:09.994079 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnClient>>handleResponse
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		arg2: 	30
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	30
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFal...etc...
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>get
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(GET /nextEpoch)
		response: 	a ZnResponse(500 Internal Server Error)
		connection: 	a ZdcSocketStream
		lastUsed: 	3802004949
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #contentReader-...etc...
		session: 	nil
		logLevel: 	3


[ | el edge food el2 edge2 response |
response := ZnClient new
	url: 'http://localhost:8080/nextEpoch';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	contentReader: [ :asd | NeoJSONReader fromString: asd contents ];
	get.
size := v elements size.
size ~= 0
	ifTrue: [ 1 to: size - 1 do: [ :i | (v elements at: size - i) remove ].
		v elements atRandom remove ].
Transcript show: 'Epoche: '.
Transcript show: (response at: #currentEpoch).
Transcript show: '/'.
Transcript
	show: (response at: #finalEpoch);
	cr.
Transcript show: 'Number of good individuals: '.
Transcript
	show: (response at: #NumberOfGood);
	cr.
Transcript show: 'Number of bad individuals: '.
Transcript
	show: (response at: #NumberOfBad);
	cr.
Transcript
	show: '-----------------------------------------------';
	cr.
(response at: #foodSources)
	do: [ :foodSource | 
		food := (RTEllipse new
			size: 30;
			color: (Color green alpha: 0.4)) element.
		food @ RTDraggable.
		food translateTo: 1 atRandom @ 1 atRandom.
		v add: food.
		(foodSource at: #Occupied) = 0
			ifTrue: [ stepping addNode: food ].
		(foodSource at: #Occupied) = 1
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				edge := RTLine edgeFrom: el to: food.
				v add: edge.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge ].
		(foodSource at: #Occupied) = 2
			ifTrue: [ c := Color blue.
				(((foodSource at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el @ RTDraggable.
				el translateTo: 1 atRandom @ 1 atRandom.
				v add: el.
				c := Color blue.
				(((foodSource at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ c := Color red ].
				el2 := (RTEllipse new
					size: 30;
					color: (c alpha: 0.4)) element.
				el2 translateTo: 5 atRandom @ 5 atRandom.
				v add: el2.
				edge := RTLine edgeFrom: el to: food.
				edge2 := RTLine edgeFrom: el2 to: food.
				v add: edge.
				v add: edge2.
				stepping
					addNode: food;
					addNode: el;
					addEdge: edge;
					addNode: el2;
					addEdge: edge2 ] ].
v signalUpdate ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		edge2: 	nil
		el: 	nil
		el2: 	nil
		edge: 	nil
		food: 	nil
		response: 	ni
	Receiver's instance variables: 
nil

[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
25 June 2021 4:52:52.777028 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T16:52:52.724028+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T16:52:52.724028+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T16:52:52.724028+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T16:52:52.724028+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T16:52:52.724028+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T16:52:52.724028+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpExamples did not understand #openWithSpec
25 June 2021 4:59:51.733028 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpExamples(Object)>>doesNotUnderstand: #openWithSpec
	Receiver: a SpExamples
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	sp := SpExamples new.
	^ sp openWithSpec
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3546)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(754832384))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	419098
		lastStepMessage: 	nil
		lastCycleTime: 	419138
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	419098
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1520@784)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	419098
		lastStepMessage: 	nil
		lastCycleTime: 	419138
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	419098
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	419098
		lastStepMessage: 	nil
		lastCycleTime: 	419138
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	419098
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1520@784)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SpExamples(Object)>>doesNotUnderstand: #openWithSpec
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpExamples did not understand #openWithSpec
25 June 2021 5:00:02.094028 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpExamples(Object)>>doesNotUnderstand: #openWithSpec
	Receiver: a SpExamples
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ sp openWithSpec
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		arg1: 	[ :arg2 |  
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(562100992)
		findReplaceService: 	nil
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy
		completionEngine: 	a CompletionEngine


[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(562100992)
	Arguments and temporary variables: 
		arg1: 	[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorp...etc..
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (593@3546)
		owner: 	a TransformWithLayoutMorph(452687360)
		submorphs: 	an Array(a RubPrimarySelectionMorph(161666560) a RubCursor(512062720...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527224320) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(855905280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(512062720)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(308355584))
		getMenuPolicy: 	a RubEditingArea(562100992)
		mouseDownPoint: 	nil
		completionEngine: 	a CompletionEngine
		maxLength: 	nil
		findReplaceService: 	a SpRubFindReplaceService
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		arg1: 	a GLMHighlightAndEvaluat
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(282707200)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		tmp1: 	WaitfreeQueue with 0 items
		tmp2: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEv...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	429477
		lastStepMessage: 	nil
		lastCycleTime: 	429508
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	429477
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1520@784)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	429477
		lastStepMessage: 	nil
		lastCycleTime: 	429508
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	429477
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	429477
		lastStepMessage: 	nil
		lastCycleTime: 	429508
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(512062720)))
		lastAlarmTime: 	429477
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1520@784)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SpExamples(Object)>>doesNotUnderstand: #openWithSpec
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: arg1 action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpBoxLayout did not understand #expand:
25 June 2021 5:04:15.946028 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout(Object)>>doesNotUnderstand: #expand:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints)
		selector: 	nil
		adapter: 	nil
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	a SpBoxLayout
		tmp2: 	a SpBoxLayout
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	a SpBoxLayou
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65564
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65564
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(84512768)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(888852224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(90892032)
		submorphs: 	an Array(an ImageMorph(611990016))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (346224640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(611990016)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(888852224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(90892032)
		submorphs: 	an Array(an ImageMorph(611990016))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (346224640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(611990016)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(888852224)
	Arguments and temporary variables: 
		arg1: 	[(1131@169) mouseUp 36071869 nil
	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(90892032)
		submorphs: 	an Array(an ImageMorph(611990016))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (346224640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(611990016)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(888852224)
	Arguments and temporary variables: 
		arg1: 	[(1131@169) mouseUp 36071869 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(90892032)
		submorphs: 	an Array(an ImageMorph(611990016))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (346224640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(611990016)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1131@169) mouseUp 36071869 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(888852224
	Receiver's instance variables: 
		timeStamp: 	36071869
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1131@169)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(888852224)
	Arguments and temporary variables: 
		arg1: 	[(1131@169) mouseUp 36071869 nil
	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(90892032)
		submorphs: 	an Array(an ImageMorph(611990016))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (346224640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(611990016)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(888852224)
	Arguments and temporary variables: 
		arg1: 	[(1131@169) mouseUp 36071869 nil
	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(90892032)
		submorphs: 	an Array(an ImageMorph(611990016))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (346224640) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(611990016)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(888852224)
		arg2: 	[(1131@169) mouseUp 36071869 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(1131@169.0) corner: (1147@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1131@169.0) corner: (1147@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(560102912)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1131@169) mouseUp 36071869 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36071869 1131 169 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(1131@169) mouseOver red 36071822 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1520@784)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(1131@169.0) corner: (1147@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1131@169.0) corner: (1147@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(560102912)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1131@169) mouseUp 36071869 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36071869 1131 169 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1131@169) mouseUp 36071869 nil]
		arg2: 	an IconicButton(888852224)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(1131@169.0) corner: (1147@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1131@169.0) corner: (1147@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(560102912)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1131@169) mouseUp 36071869 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36071869 1131 169 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1131@169) mouseUp 36071869 nil
	Receiver's instance variables: 
		bounds: 	(1131@169.0) corner: (1147@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1131@169.0) corner: (1147@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(560102912)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1131@169) mouseUp 36071869 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36071869 1131 169 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1131@169) mouseUp 36071869 nil]
		tmp1: 	[(1131@169) mouseUp 36071869 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(1131@169.0) corner: (1147@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1131@169.0) corner: (1147@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(560102912)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1131@169) mouseUp 36071869 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36071869 1131 169 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(1131@169) mouseUp 36071869 nil]
		tmp2: 	#(1 36071869 1131 169 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(1131@169.0) corner: (1147@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1131@169.0) corner: (1147@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(560102912)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1131@169) mouseUp 36071869 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36071869 1131 169 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1131@169.0) corner: (1147@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1131@169.0) corner: (1147@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a FTTableMorph(560102912)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1131@169) mouseUp 36071869 nil]
		targetOffset: 	(9.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36071869 1131 169 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	683286
		lastStepMessage: 	nil
		lastCycleTime: 	683347
		alarms: 	a Heap()
		lastAlarmTime: 	683286
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	683286
		lastStepMessage: 	nil
		lastCycleTime: 	683347
		alarms: 	a Heap()
		lastAlarmTime: 	683286
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	683286
		lastStepMessage: 	nil
		lastCycleTime: 	683347
		alarms: 	a Heap()
		lastAlarmTime: 	683286
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	683286
		lastStepMessage: 	nil
		lastCycleTime: 	683347
		alarms: 	a Heap()
		lastAlarmTime: 	683286
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1520@784)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout(Object)>>doesNotUnderstand: #expand:
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpBoxLayout did not understand #expand:
25 June 2021 5:04:46.625028 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpBoxLayout(Object)>>doesNotUnderstand: #expand:
	Receiver: a SpBoxLayout
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		children: 	an OrderedDictionary(#button1->a SpBoxConstraints)
		selector: 	nil
		adapter: 	nil
		direction: 	a SpLayoutDirectionHorizontal
		spacing: 	0
		borderWidth: 	0
		homogeneous: 	false


SimulationDataSetterUI class>>defaultSpec
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	a SpBoxLayout
		tmp2: 	a SpBoxLayout
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	a SpBoxLayou
	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65564
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpec
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		arg1: 	#defaultSpe
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		owner: 	nil
		adapter: 	nil
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	nil
		layout: 	nil
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SimulationDataSetterUI class>>example
	Receiver: SimulationDataSetterUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SpPresenter
		methodDict: 	a MethodDictionary(#connectPresenters->SimulationDataSetterUI>>#con...etc...
		format: 	65564
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#SimulationDataSetterUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DataSetterUI


ClyExampleScript(ClyClassScript)>>executeOn:
	Receiver: a ClyExampleScript
	Arguments and temporary variables: 
		arg1: 	SimulationDataSetterU
	Receiver's instance variables: 
		implementorMethod: 	SimulationDataSetterUI class>>#example


ClyRunClassScriptCommand>>execute
	Receiver: a ClyRunClassScriptCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		targetClass: 	SimulationDataSetterUI
		script: 	a ClyExampleScript


ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyMethodContextOfFullBrowser
	Arguments and temporary variables: 
		arg1: 	a ClyRunClassScriptCommand
		arg2: 	a CmdCommandActivator(a ClyRunClassScriptCommand
	Receiver's instance variables: 
		tool: 	a ClyFullBrowser(84512768)
		selectedItems: 	an Array(a ClyDataSourceItem(example))
		metaLevelScope: 	ClyClassSideScope


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg1 | self processCommandFailure: arg1 
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClyRunClassScriptCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyRunClassScriptCommand
		context: 	a ClyMethodContextOfFullBrowser
		activationStrategy: 	a ClyTableIconCommandActivation


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(727028224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(1058103296)
		submorphs: 	an Array(an ImageMorph(514191616))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (547248384) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(514191616)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 show ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	120
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		arg1: 	[ target perform: actionSelector withArguments: arguments ]
		tmp1: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r1000...etc..
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(727028224)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(1058103296)
		submorphs: 	an Array(an ImageMorph(514191616))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (547248384) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(514191616)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(727028224)
	Arguments and temporary variables: 
		arg1: 	[(1130@169) mouseUp 36102603 nil
	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(1058103296)
		submorphs: 	an Array(an ImageMorph(514191616))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (547248384) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(514191616)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(727028224)
	Arguments and temporary variables: 
		arg1: 	[(1130@169) mouseUp 36102603 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(1058103296)
		submorphs: 	an Array(an ImageMorph(514191616))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (547248384) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(514191616)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1130@169) mouseUp 36102603 nil]
	Arguments and temporary variables: 
		arg1: 	an IconicButton(727028224
	Receiver's instance variables: 
		timeStamp: 	36102603
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1130@169)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(727028224)
	Arguments and temporary variables: 
		arg1: 	[(1130@169) mouseUp 36102603 nil
	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(1058103296)
		submorphs: 	an Array(an ImageMorph(514191616))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (547248384) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(514191616)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(727028224)
	Arguments and temporary variables: 
		arg1: 	[(1130@169) mouseUp 36102603 nil
	Receiver's instance variables: 
		bounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		owner: 	a ClyMainItemCellMorph(1058103296)
		submorphs: 	an Array(an ImageMorph(514191616))
		fullBounds: 	(1122.0@159.0) corner: (1138.0@172.0)
		color: 	Color transparent
		extension: 	a MorphExtension (547248384) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a CmdCommandActivator(a ClyRunClassScriptCommand)
		actionSelector: 	#executeCommand
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(514191616)
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an IconicButton(727028224)
		arg2: 	[(1130@169) mouseUp 36102603 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(1130@169.0) corner: (1146@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1130@169.0) corner: (1146@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1003312384)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1130@169) mouseUp 36102603 nil]
		targetOffset: 	(8.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36102603 1130 169 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(1130@169) mouseOver red 36102525 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1520@784)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(1130@169.0) corner: (1146@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1130@169.0) corner: (1146@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1003312384)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1130@169) mouseUp 36102603 nil]
		targetOffset: 	(8.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36102603 1130 169 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1130@169) mouseUp 36102603 nil]
		arg2: 	an IconicButton(727028224)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(1130@169.0) corner: (1146@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1130@169.0) corner: (1146@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1003312384)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1130@169) mouseUp 36102603 nil]
		targetOffset: 	(8.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36102603 1130 169 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1130@169) mouseUp 36102603 nil
	Receiver's instance variables: 
		bounds: 	(1130@169.0) corner: (1146@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1130@169.0) corner: (1146@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1003312384)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1130@169) mouseUp 36102603 nil]
		targetOffset: 	(8.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36102603 1130 169 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1130@169) mouseUp 36102603 nil]
		tmp1: 	[(1130@169) mouseUp 36102603 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(1130@169.0) corner: (1146@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1130@169.0) corner: (1146@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1003312384)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1130@169) mouseUp 36102603 nil]
		targetOffset: 	(8.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36102603 1130 169 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(1130@169) mouseUp 36102603 nil]
		tmp2: 	#(1 36102603 1130 169 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(1130@169.0) corner: (1146@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1130@169.0) corner: (1146@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1003312384)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1130@169) mouseUp 36102603 nil]
		targetOffset: 	(8.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36102603 1130 169 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1130@169.0) corner: (1146@185.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1130@169.0) corner: (1146@185.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a RubEditingArea(1003312384)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1130@169) mouseUp 36102603 nil]
		targetOffset: 	(8.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 36102603 1130 169 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	714005
		lastStepMessage: 	nil
		lastCycleTime: 	714033
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1008363008)))
		lastAlarmTime: 	714005
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	714005
		lastStepMessage: 	nil
		lastCycleTime: 	714033
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1008363008)))
		lastAlarmTime: 	714005
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	714005
		lastStepMessage: 	nil
		lastCycleTime: 	714033
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1008363008)))
		lastAlarmTime: 	714005
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	714005
		lastStepMessage: 	nil
		lastCycleTime: 	714033
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1008363008)))
		lastAlarmTime: 	714005
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@784)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a Syste...etc...
		fullBounds: 	(0@0) corner: (1520@784)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil



--- The full stack ---
SpBoxLayout(Object)>>doesNotUnderstand: #expand:
SimulationDataSetterUI class>>defaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpPresenter)>>retrieveSpec:
SimulationDataSetterUI(SpAbstractPresenter)>>retrieveDefaultSpec
SimulationDataSetterUI(SpAbstractPresenter)>>openWithSpec
SimulationDataSetterUI class>>example
ClyExampleScript(ClyClassScript)>>executeOn:
ClyRunClassScriptCommand>>execute
ClyMethodContextOfFullBrowser(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
25 June 2021 5:07:00.608527 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:07:00.569527+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:07:00.569527+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:07:00.569527+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:07:00.569527+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:07:00.569527+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:07:00.569527+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
25 June 2021 5:10:50.131966 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:10:50.098966+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:10:50.098966+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:10:50.098966+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:10:50.098966+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:10:50.098966+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:10:50.098966+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
25 June 2021 5:11:12.828919 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:11:12.796919+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:11:12.796919+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:11:12.796919+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:11:12.796919+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:11:12.796919+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:11:12.796919+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
25 June 2021 5:13:02.021735 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:13:01.988735+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:13:01.988735+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:13:01.988735+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:13:01.988735+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:13:01.988735+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:13:01.988735+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
25 June 2021 5:14:01.607818 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	nil


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot write to the changes file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo 8.0 - 64bit (stable)-01.changes.

Please check that you have write permission for this file.

You won't be able to save this image correctly until you fix this.
25 June 2021 5:14:01.648818 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Damjan\Documents\P...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Damjan\Documents\P...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'the changes file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withChangesRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informProblemInChanges:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:silent:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	false
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	fals
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 

	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ UIManager ...etc...
		id: 	nil
		creationTime: 	2021-06-25T17:14:01.572818+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withChangesRef:
PharoFilesOpener>>informProblemInChanges:
PharoFilesOpener>>changesFileOrNilReadOnly:silent:
PharoFilesOpener>>changesFileOrNilReadOnly:
PharoFilesOpener>>changesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpRadioButtonPresenter did not understand #stat
25 June 2021 5:32:59.611818 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

SpRadioButtonPresenter(Object)>>doesNotUnderstand: #stat
	Receiver: a SpRadioButtonPresenter
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicRadioButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicRadioButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Radio Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ (Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0...etc...
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		state: 	a SpValueHolder[ true ]
		label: 	a SpValueHolder[ 'Easy' ]
		actionWhenActivated: 	a SpValueHolder[ tmp1 ]
		actionWhenDeactivated: 	a SpValueHolder[ [ :arg1 | 
self
	changed:
		{#labelClic...etc...
		labelClickable: 	a SpValueHolder[ true ]
		associatedRadioButtons: 	an Array(a SpRadioButtonPresenter a SpRadioButtonPresen...etc...
		initialStateSet: 	true


[ :arg1 | 
arg1
	<<
		(button1 stat
			ifTrue: [ 'easy' ] asString).
button2 stat
	ifTrue: [ 'normal' ] asString.
button2 stat
	ifTrue: [ 'hard' ] asString ] in [ | tmp6 |
"tmp6 := ZnClient new.
			tmp6
				url: 'http://localhost:8080/setGlobals';
				timeout: 1000;
				addPart:
					(ZnMimePart
						fieldName: 'search-field'
						value:
							button2 label asString , ' ' , button2 label asString , ' '
								, numberOfGoods text asString);
				addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
				addPart:
					(ZnMimePart
						fieldName: 'number-of-food-sources'
						value: numberOfFoodSources text);
				addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
				post."
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 stat
					ifTrue: [ 'easy' ] asString).
		button2 stat
			ifTrue: [ 'normal' ] asString.
		button2 stat
			ifTrue: [ 'hard' ] asString ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	nil
		arg1: 	a ZnCharacterWriteStrea
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ arg1 value: tmp1 ] in FileReference(AbstractFileReference)>>writeStreamDo:
	Receiver: File @ D:\testfile.txt
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | 
arg1
	<<
		(button1 stat
			ifTrue: [ 'easy' ] asString).
butt...etc...
		tmp1: 	a ZnCharacterWriteStrea
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'D:' / 'testfile.txt'


BlockClosure>>ensure:
	Receiver: [ arg1 value: tmp1 ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 close ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	FileReference(AbstractFileReference)>>writeStreamDo:
		startpc: 	58
		numArgs: 	0


FileReference(AbstractFileReference)>>writeStreamDo:
	Receiver: File @ D:\testfile.txt
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | 
arg1
	<<
		(button1 stat
			ifTrue: [ 'easy' ] asString).
butt...etc...
		tmp1: 	a ZnCharacterWriteStrea
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'D:' / 'testfile.txt'


[ | tmp6 |
"tmp6 := ZnClient new.
			tmp6
				url: 'http://localhost:8080/setGlobals';
				timeout: 1000;
				addPart:
					(ZnMimePart
						fieldName: 'search-field'
						value:
							button2 label asString , ' ' , button2 label asString , ' '
								, numberOfGoods text asString);
				addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
				addPart:
					(ZnMimePart
						fieldName: 'number-of-food-sources'
						value: numberOfFoodSources text);
				addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
				post."
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 stat
					ifTrue: [ 'easy' ] asString).
		button2 stat
			ifTrue: [ 'normal' ] asString.
		button2 stat
			ifTrue: [ 'hard' ] asString ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp6 |
"tmp6 := ZnClient new.
			tmp6
				url: 'ht...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(853850880
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(853850880))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(853850880)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(853850880)
	Arguments and temporary variables: 
		arg1: 	[(329@375) mouseUp 37795588 nil
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(108851712)
		submorphs: 	an Array(an AlignmentMorph(464516864))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (636576256) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(177095936)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(853850880)
	Arguments and temporary variables: 
		arg1: 	[(329@375) mouseUp 37795588 nil]
		tmp1: 	an Array(a PluggableButtonMorph(853850880))
		arg3: 	a PluggableButtonMorph(853850880
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(108851712)
		submorphs: 	an Array(an AlignmentMorph(464516864))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (636576256) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(177095936)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(853850880))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(853850880))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(853850880)
	Arguments and temporary variables: 
		arg1: 	an Array(a PluggableButtonMorph(853850880))
		tmp1: 	an Array(a PluggableButtonMorph(853850880))
		arg3: 	[(329@375) mouseUp 37795588 nil
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(108851712)
		submorphs: 	an Array(an AlignmentMorph(464516864))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (636576256) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(177095936)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(853850880)
	Arguments and temporary variables: 
		arg1: 	[(329@375) mouseUp 37795588 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(108851712)
		submorphs: 	an Array(an AlignmentMorph(464516864))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (636576256) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(177095936)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(329@375) mouseUp 37795588 nil]
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(853850880
	Receiver's instance variables: 
		timeStamp: 	37795588
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(329@375)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(853850880)
	Arguments and temporary variables: 
		arg1: 	[(329@375) mouseUp 37795588 nil
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(108851712)
		submorphs: 	an Array(an AlignmentMorph(464516864))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (636576256) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(177095936)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(853850880)
	Arguments and temporary variables: 
		arg1: 	[(329@375) mouseUp 37795588 nil
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(108851712)
		submorphs: 	an Array(an AlignmentMorph(464516864))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (636576256) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(177095936)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(853850880)
		arg2: 	[(329@375) mouseUp 37795588 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(329@375.0) corner: (345@391.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(329@375.0) corner: (345@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853850880)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(329@375) mouseUp 37795588 nil]
		targetOffset: 	(184.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37795588 329 375 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(329@375) mouseOver red 37795541 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(329@375.0) corner: (345@391.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(329@375.0) corner: (345@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853850880)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(329@375) mouseUp 37795588 nil]
		targetOffset: 	(184.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37795588 329 375 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(329@375) mouseUp 37795588 nil]
		arg2: 	a PluggableButtonMorph(853850880)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(329@375.0) corner: (345@391.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(329@375.0) corner: (345@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853850880)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(329@375) mouseUp 37795588 nil]
		targetOffset: 	(184.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37795588 329 375 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(329@375) mouseUp 37795588 nil
	Receiver's instance variables: 
		bounds: 	(329@375.0) corner: (345@391.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(329@375.0) corner: (345@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(853850880)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(329@375) mouseUp 37795588 nil]
		targetOffset: 	(184.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37795588 329 375 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(329@375) mouseUp 37795588 nil]
		tmp1: 	[(329@375) mouseUp 37795588 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
	THERE_BE_DRAGONS_HERE
Instance of ZnCharacterWriteStream did not understand #<
25 June 2021 5:35:26.140818 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ZnCharacterWriteStream(Object)>>doesNotUnderstand: #<
	Receiver: a ZnCharacterWriteStream
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		stream: 	a ZnBufferedWriteStream
		encoder: 	a ZnUTF8Encoder


[ :arg1 | 
arg1
	<
		(button1 state
			ifTrue: [ 'easy' ]
			ifFalse: [ button2 state
					ifTrue: [ 'normal' ]
					ifFalse: [ 'hard' ] ]) ] in [ | tmp6 |
"tmp6 := ZnClient new.
			tmp6
				url: 'http://localhost:8080/setGlobals';
				timeout: 1000;
				addPart:
					(ZnMimePart
						fieldName: 'search-field'
						value:
							button2 label asString , ' ' , button2 label asString , ' '
								, numberOfGoods text asString);
				addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
				addPart:
					(ZnMimePart
						fieldName: 'number-of-food-sources'
						value: numberOfFoodSources text);
				addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
				post."
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	nil
		arg1: 	a ZnCharacterWriteStrea
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


[ arg1 value: tmp1 ] in FileReference(AbstractFileReference)>>writeStreamDo:
	Receiver: File @ D:\testfile.txt
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | 
arg1
	<
		(button1 state
			ifTrue: [ 'easy' ]
			ifFalse: [ b...etc...
		tmp1: 	a ZnCharacterWriteStrea
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'D:' / 'testfile.txt'


BlockClosure>>ensure:
	Receiver: [ arg1 value: tmp1 ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 close ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	FileReference(AbstractFileReference)>>writeStreamDo:
		startpc: 	58
		numArgs: 	0


FileReference(AbstractFileReference)>>writeStreamDo:
	Receiver: File @ D:\testfile.txt
	Arguments and temporary variables: 
		arg1: 	[ :arg1 | 
arg1
	<
		(button1 state
			ifTrue: [ 'easy' ]
			ifFalse: [ b...etc...
		tmp1: 	a ZnCharacterWriteStrea
	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / 'D:' / 'testfile.txt'


[ | tmp6 |
"tmp6 := ZnClient new.
			tmp6
				url: 'http://localhost:8080/setGlobals';
				timeout: 1000;
				addPart:
					(ZnMimePart
						fieldName: 'search-field'
						value:
							button2 label asString , ' ' , button2 label asString , ' '
								, numberOfGoods text asString);
				addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
				addPart:
					(ZnMimePart
						fieldName: 'number-of-food-sources'
						value: numberOfFoodSources text);
				addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
				post."
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp6 |
"tmp6 := ZnClient new.
			tmp6
				url: 'ht...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(211090688
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(211090688))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(211090688)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(211090688)
	Arguments and temporary variables: 
		arg1: 	[(305@372) mouseUp 37942103 nil
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(709988352)
		submorphs: 	an Array(an AlignmentMorph(310701312))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (218320128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(334074368)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(211090688)
	Arguments and temporary variables: 
		arg1: 	[(305@372) mouseUp 37942103 nil]
		tmp1: 	an Array(a PluggableButtonMorph(211090688))
		arg3: 	a PluggableButtonMorph(211090688
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(709988352)
		submorphs: 	an Array(an AlignmentMorph(310701312))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (218320128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(334074368)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(211090688))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(211090688))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(211090688)
	Arguments and temporary variables: 
		arg1: 	an Array(a PluggableButtonMorph(211090688))
		tmp1: 	an Array(a PluggableButtonMorph(211090688))
		arg3: 	[(305@372) mouseUp 37942103 nil
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(709988352)
		submorphs: 	an Array(an AlignmentMorph(310701312))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (218320128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(334074368)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(211090688)
	Arguments and temporary variables: 
		arg1: 	[(305@372) mouseUp 37942103 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(709988352)
		submorphs: 	an Array(an AlignmentMorph(310701312))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (218320128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(334074368)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(305@372) mouseUp 37942103 nil]
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(211090688
	Receiver's instance variables: 
		timeStamp: 	37942103
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(305@372)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(211090688)
	Arguments and temporary variables: 
		arg1: 	[(305@372) mouseUp 37942103 nil
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(709988352)
		submorphs: 	an Array(an AlignmentMorph(310701312))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (218320128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(334074368)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(211090688)
	Arguments and temporary variables: 
		arg1: 	[(305@372) mouseUp 37942103 nil
	Receiver's instance variables: 
		bounds: 	(145.0@362.0) corner: (592.0@387.0)
		owner: 	a Morph(709988352)
		submorphs: 	an Array(an AlignmentMorph(310701312))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (218320128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(334074368)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(211090688)
		arg2: 	[(305@372) mouseUp 37942103 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(305@372.0) corner: (321@388.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(305@372.0) corner: (321@388.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211090688)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(305@372) mouseUp 37942103 nil]
		targetOffset: 	(160.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37942103 305 372 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(305@372) mouseOver red 37942041 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(305@372.0) corner: (321@388.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(305@372.0) corner: (321@388.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211090688)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(305@372) mouseUp 37942103 nil]
		targetOffset: 	(160.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37942103 305 372 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(305@372) mouseUp 37942103 nil]
		arg2: 	a PluggableButtonMorph(211090688)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(305@372.0) corner: (321@388.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(305@372.0) corner: (321@388.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211090688)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(305@372) mouseUp 37942103 nil]
		targetOffset: 	(160.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37942103 305 372 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(305@372) mouseUp 37942103 nil
	Receiver's instance variables: 
		bounds: 	(305@372.0) corner: (321@388.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(305@372.0) corner: (321@388.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211090688)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(305@372) mouseUp 37942103 nil]
		targetOffset: 	(160.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37942103 305 372 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(305@372) mouseUp 37942103 nil]
		tmp1: 	[(305@372) mouseUp 37942103 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(305@372.0) corner: (321@388.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(305@372.0) corner: (321@388.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211090688)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(305@372) mouseUp 37942103 nil]
		targetOffset: 	(160.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37942103 305 372 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(305@372) mouseUp 37942103 nil]
		tmp2: 	#(1 37942103 305 372 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(305@372.0) corner: (321@388.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(305@372.0) corner: (321@388.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211090688)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(305@372) mouseUp 37942103 nil]
		targetOffset: 	(160.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37942103 305 372 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(305@372.0) corner: (321@388.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(305@372.0) corner: (321@388.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(211090688)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(305@372) mouseUp 37942103 nil]
		targetOffset: 	(160.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 37942103 305 372 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	1284613
		lastStepMessage: 	nil
		lastCycleTime: 	1284636
		alarms: 	a Heap()
		lastAlarmTime: 	1284613
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	1284613
		lastStepMessage: 	nil
		lastCycleTime: 	1284636
		alarms: 	a Heap()
		lastAlarmTime: 	1284613
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	1284613
		lastStepMessage: 	nil
		lastCycleTime: 	1284636
		alarms: 	a Heap()
		lastAlarmTime: 	1284613
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(119639552))(a TRMorph(119639...etc...
		lastStepTime: 	1284613
		lastStepMessage: 	nil
		lastCycleTime: 	1284636
		alarms: 	a Heap()
		lastAlarmTime: 	1284613
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ZnCharacterWriteStream(Object)>>doesNotUnderstand: #<
[ :arg1 | 
arg1
	<
		(button1 state
			ifTrue: [ 'easy' ]
			ifFalse: [ button2 state
					ifTrue: [ 'normal' ]
					ifFalse: [ 'hard' ] ]) ] in [ | tmp6 |
"tmp6 := ZnClient new.
			tmp6
				url: 'http://localhost:8080/setGlobals';
				timeout: 1000;
				addPart:
					(ZnMimePart
						fieldName: 'search-field'
						value:
							button2 label asString , ' ' , button2 label asString , ' '
								, numberOfGoods text asString);
				addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
				addPart:
					(ZnMimePart
						fieldName: 'number-of-food-sources'
						value: numberOfFoodSources text);
				addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
				post."
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
[ arg1 value: tmp1 ] in FileReference(AbstractFileReference)>>writeStreamDo:
BlockClosure>>ensure:
FileReference(AbstractFileReference)>>writeStreamDo:
[ | tmp6 |
"tmp6 := ZnClient new.
			tmp6
				url: 'http://localhost:8080/setGlobals';
				timeout: 1000;
				addPart:
					(ZnMimePart
						fieldName: 'search-field'
						value:
							button2 label asString , ' ' , button2 label asString , ' '
								, numberOfGoods text asString);
				addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
				addPart:
					(ZnMimePart
						fieldName: 'number-of-food-sources'
						value: numberOfFoodSources text);
				addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
				post."
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
25 June 2021 5:40:51.384301 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:40:51.350301+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:40:51.350301+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:40:51.350301+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:40:51.350301+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:40:51.350301+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T17:40:51.350301+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
RPackageConflictError: Package/Tag can not be added because it conflicts with package  tag Manifest
25 June 2021 5:44:10.187301 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		arg1: 	''
		arg2: 	'Manifest'
		tmp1: 	a RPackage(
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 10244)
		packages: 	an IdentityDictionary(size 728)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1007)
		debuggingName: 	''


[ (arg1 includes: $-)
	ifFalse: [ ^ self ].
^ self
	validateCanBeAddedPackageName: (arg1 copyUpToLast: $-)
	tagName:
		(arg1 copyAfterLast: $-)
			, (arg2 ifNil: [ '' ] ifNotNil: [ '-' , arg2 ]) ] in RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		arg1: 	nil
		arg2: 	#'-Manifest'
		tmp1: 	ni
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 10244)
		packages: 	an IdentityDictionary(size 728)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1007)
		debuggingName: 	''


IdentityDictionary(Dictionary)>>at:ifAbsent:
	Receiver: an IdentityDictionary(size 728)
	Arguments and temporary variables: 
		arg1: 	#'-Manifest'
		arg2: 	[ (arg1 includes: $-)
	ifFalse: [ ^ self ].
^ self
	validateCanBeAddedPac...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		tally: 	728
		array: 	an Array(#'Refactoring-Environment'->a RPackage(Refactoring-Environment)...etc...


RPackageOrganizer>>packageNamed:ifAbsent:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		arg1: 	#'-Manifest'
		arg2: 	[ (arg1 includes: $-)
	ifFalse: [ ^ self ].
^ self
	validateCanBeAddedPac...etc..
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 10244)
		packages: 	an IdentityDictionary(size 728)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1007)
		debuggingName: 	''


RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		arg1: 	#'-Manifest'
		arg2: 	nil
		tmp1: 	ni
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 10244)
		packages: 	an IdentityDictionary(size 728)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1007)
		debuggingName: 	''


RPackageOrganizer>>validateCanBeAddedPackage:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		arg1: 	a RPackage(-Manifest
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 10244)
		packages: 	an IdentityDictionary(size 728)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1007)
		debuggingName: 	''


RPackageOrganizer>>registerPackage:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		arg1: 	a RPackage(-Manifest
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 10244)
		packages: 	an IdentityDictionary(size 728)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1007)
		debuggingName: 	''


RPackageOrganizer>>systemCategoryAddedActionFrom:
	Receiver: a RPackageOrganizer
	Arguments and temporary variables: 
		arg1: 	a CategoryAdded
		tmp1: 	ni
	Receiver's instance variables: 
		classPackageMapping: 	an IdentityDictionary(size 10244)
		packages: 	an IdentityDictionary(size 728)
		classExtendingPackagesMapping: 	an IdentityDictionary(size 1007)
		debuggingName: 	''


WeakMessageSend>>value:
	Receiver: a WeakMessageSend(#systemCategoryAddedActionFrom: -> a RPackageOrganizer)
	Arguments and temporary variables: 
		arg1: 	a CategoryAdded
		tmp1: 	a RPackageOrganize
	Receiver's instance variables: 
		selector: 	#systemCategoryAddedActionFrom:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: a WeakMessageSend(#systemCategoryAddedActionFrom: -> a RPackageOrganizer)
	Arguments and temporary variables: 
		arg1: 	a CategoryAdde
	Receiver's instance variables: 
		selector: 	#systemCategoryAddedActionFrom:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: a WeakMessageSend(#systemCategoryAddedActionFrom: -> a RPackageOrganizer)
	Arguments and temporary variables: 
		arg1: 	a CategoryAdded
		arg2: 	an Announce
	Receiver's instance variables: 
		selector: 	#systemCategoryAddedActionFrom:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: arg1 cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#systemCategoryAddedActionFrom: -> a RPac...etc...
	Arguments and temporary variables: 
		arg1: 	a CategoryAdde
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	an Announcer
		announcementClass: 	CategoryAdded
		action: 	a WeakMessageSend(#systemCategoryAddedActionFrom: -> a RPackageOrganize...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg2 | arg2 pass 
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription(a WeakMessageSend(#systemCategoryAddedActionFrom: -> a RPac...etc...
	Arguments and temporary variables: 
		arg1: 	a CategoryAdde
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	an Announcer
		announcementClass: 	CategoryAdded
		action: 	a WeakMessageSend(#systemCategoryAddedActionFrom: -> a RPackageOrganize...etc...


[ tmp4 deliver: arg1 ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ tmp4 deliver: arg1 ]
	Arguments and temporary variables: 
		arg1: 	[ self deliver: arg1 to: arg2 startingAt: tmp3 + 1 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		arg1: 	a CategoryAdded
		arg2: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#systemCategory...etc..
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		tmp2: 	an Array(a WeakAnnouncementSubscription(a WeakMessageSend(#systemCategory...etc...
		arg1: 	a CategoryAdde
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(a WeakAnnouncementSubscription(a WeakMessageSend(...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		arg1: 	a CategoryAdded
		tmp1: 	a CategoryAdde
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		arg1: 	a CategoryAdde
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemAnnouncer>>classCategoryAdded:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		arg1: 	#'-Manifest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer
		storedAnnouncements: 	nil


SystemOrganizer>>addCategory:
	Receiver: a SystemOrganizer
	Arguments and temporary variables: 
		arg1: 	#'-Manifest
	Receiver's instance variables: 
		categoryArray: 	#(#'AST-Core-Formatter' #'AST-Core-Manifest' #'AST-Core-Matching...etc...
		categoryStops: 	#(1 2 9 35 41 47 48 49 51 60 66 68 82 83 90 103 105 107 108 109 ...etc...
		elementArray: 	#(#RBSimpleFormatter #ManifestASTCore #RBBlockReplaceRule #RBPars...etc...
		environment: 	a SystemDictionary(lots of globals)


RPackageTag>>ensureSystemCategory
	Receiver: a RPackageTag(Manifest)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		package: 	a RPackage()
		name: 	'Manifest'
		classNames: 	a Set()


RPackage>>basicAddClassTag:
	Receiver: a RPackage()
	Arguments and temporary variables: 
		arg1: 	'Manifest'
		tmp1: 	a RPackageTag(Manifest
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary(#SimulationVisualsation->a Set(#messageSele...etc...
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set(#SimulationVisualsation #Manifest)
		name: 	#''
		classTags: 	a Set(a RPackageTag(Manifest) a RPackageTag())


[ self class organizer validateCanBeAddedPackage: self tagName: tmp1.
tmp3 := self basicAddClassTag: tmp1.
SystemAnnouncer uniqueInstance classTagAdded: tmp1 inPackage: self.
^ tmp3 ] in RPackage>>addClassTag:
	Receiver: a RPackage()
	Arguments and temporary variables: 
		arg1: 	'Manifest'
		tmp1: 	'Manifest'
		tmp3: 	ni
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary(#SimulationVisualsation->a Set(#messageSele...etc...
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set(#SimulationVisualsation #Manifest)
		name: 	#''
		classTags: 	a Set(a RPackageTag(Manifest) a RPackageTag())


Set(Collection)>>detect:ifFound:ifNone:
	Receiver: a Set(a RPackageTag(Manifest) a RPackageTag())
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 name = arg1 ]
		arg2: 	[ :arg3 | arg3 ]
		arg3: 	[ self class organizer validateCanBeAddedPackage: self tagName: tmp1.
tmp...etc..
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(a RPackageTag(Manifest) nil nil nil a RPackageTag())


Set(Collection)>>detect:ifNone:
	Receiver: a Set(a RPackageTag(Manifest) a RPackageTag())
	Arguments and temporary variables: 
		arg1: 	[ :arg3 | arg3 name = arg1 ]
		arg2: 	[ self class organizer validateCanBeAddedPackage: self tagName: tmp1.
tmp...etc..
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(a RPackageTag(Manifest) nil nil nil a RPackageTag())


RPackage>>classTagNamed:ifAbsent:
	Receiver: a RPackage()
	Arguments and temporary variables: 
		arg1: 	'Manifest'
		arg2: 	[ self class organizer validateCanBeAddedPackage: self tagName: tmp1.
tmp...etc..
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary(#SimulationVisualsation->a Set(#messageSele...etc...
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set(#SimulationVisualsation #Manifest)
		name: 	#''
		classTags: 	a Set(a RPackageTag(Manifest) a RPackageTag())


RPackage>>addClassTag:
	Receiver: a RPackage()
	Arguments and temporary variables: 
		tmp3: 	nil
		arg1: 	'Manifest'
		tmp1: 	'Manifest
	Receiver's instance variables: 
		classDefinedSelectors: 	a Dictionary(#SimulationVisualsation->a Set(#messageSele...etc...
		metaclassDefinedSelectors: 	a Dictionary()
		classExtensionSelectors: 	a Dictionary()
		metaclassExtensionSelectors: 	a Dictionary()
		classes: 	a Set(#SimulationVisualsation #Manifest)
		name: 	#''
		classTags: 	a Set(a RPackageTag(Manifest) a RPackageTag())


Manifest class(ClassDescription)>>tagWith:
	Receiver: Manifest
	Arguments and temporary variables: 
		arg1: 	'Manifest'
		tmp1: 	a RPackage()
		tmp2: 	ni
	Receiver's instance variables: 
		superclass: 	PackageManifest
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Manifest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#''


TheManifestBuilder>>createManifestNamed:
	Receiver: ManifestBuilder of Manifest
	Arguments and temporary variables: 
		arg1: 	#''
		tmp1: 	'Manifest'
		tmp3: 	Manifes
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		manifestClass: 	Manifest


TheManifestBuilder>>createManifestOf:
	Receiver: ManifestBuilder of Manifest
	Arguments and temporary variables: 
		arg1: 	SimulationVisualsation>>#messageSelectorAndArgumentName
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		manifestClass: 	Manifest


TheManifestBuilder class>>of:
	Receiver: TheManifestBuilder
	Arguments and temporary variables: 
		arg1: 	SimulationVisualsation>>#messageSelectorAndArgumentNames
		tmp1: 	ManifestBuilder of Manifes
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(#=->TheManifestBuilder>>#= #addAllFalsePositive:...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TheManifestBuilder
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Manifest-Core-Base'


CompiledMethod>>ban:
	Receiver: SimulationVisualsation>>#messageSelectorAndArgumentNames
	Arguments and temporary variables: 
		arg1: 	a ReReplaceNodeCritique (Debugging code left in methods
	Receiver's instance variables: 
SimulationVisualsation>>#messageSelectorAndArgumentNames

ReCriticEngine>>guidedBy:ban:
	Receiver: a ReCriticEngine
	Arguments and temporary variables: 
		arg1: 	SimulationVisualsation>>#messageSelectorAndArgumentNames
		arg2: 	a ReReplaceNodeCritique (Debugging code left in methods)
		tmp1: 	an Array(SimulationVisualsation>>#messageSelectorAndArgumentNames Simulat...etc...
		tmp2: 	SimulationVisualsation>>#messageSelectorAndArgumentName
	Receiver's instance variables: 
a ReCriticEngine

ReCriticEngine class>>guidedBy:ban:
	Receiver: ReCriticEngine
	Arguments and temporary variables: 
		arg1: 	SimulationVisualsation>>#messageSelectorAndArgumentNames
		arg2: 	a ReReplaceNodeCritique (Debugging code left in methods
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#critiquesOf:->ReCriticEngine>>#critiquesOf: #gu...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ReCriticEngine
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Renraku-Utility'
		uniqueInstance: 	a ReCriticEngine


ReReplaceNodeCritique(ReAbstractCritique)>>guidedBan
	Receiver: a ReReplaceNodeCritique (Debugging code left in methods)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	nil
		sourceAnchor: 	a ReIntervalSourceAnchor
		rule: 	a RBCodeCruftLeftInMethodsRule
		tinyHint: 	nil
		oldNode: 	RBSequenceNode(| tmp6 tmp7 tmp9 tmp10 tmp11 tmp12 tmp13 tmp15 tmp17 tm...etc...
		newNode: 	RBSequenceNode(| tmp6 tmp7 tmp9 tmp10 tmp11 tmp12 tmp13 tmp15 tmp17 tm...etc...



--- The full stack ---
RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
[ (arg1 includes: $-)
	ifFalse: [ ^ self ].
^ self
	validateCanBeAddedPackageName: (arg1 copyUpToLast: $-)
	tagName:
		(arg1 copyAfterLast: $-)
			, (arg2 ifNil: [ '' ] ifNotNil: [ '-' , arg2 ]) ] in RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
IdentityDictionary(Dictionary)>>at:ifAbsent:
RPackageOrganizer>>packageNamed:ifAbsent:
RPackageOrganizer>>validateCanBeAddedPackageName:tagName:
RPackageOrganizer>>validateCanBeAddedPackage:
RPackageOrganizer>>registerPackage:
RPackageOrganizer>>systemCategoryAddedActionFrom:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ tmp4 deliver: arg1 ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classCategoryAdded:
SystemOrganizer>>addCategory:
RPackageTag>>ensureSystemCategory
RPackage>>basicAddClassTag:
[ self class organizer validateCanBeAddedPackage: self tagName: tmp1.
tmp3 := self basicAddClassTag: tmp1.
SystemAnnouncer uniqueInstance classTagAdded: tmp1 inPackage: self.
^ tmp3 ] in RPackage>>addClassTag:
Set(Collection)>>detect:ifFound:ifNone:
Set(Collection)>>detect:ifNone:
RPackage>>classTagNamed:ifAbsent:
RPackage>>addClassTag:
Manifest class(ClassDescription)>>tagWith:
TheManifestBuilder>>createManifestNamed:
TheManifestBuilder>>createManifestOf:
TheManifestBuilder class>>of:
CompiledMethod>>ban:
ReCriticEngine>>guidedBy:ban:
ReCriticEngine class>>guidedBy:ban:
ReReplaceNodeCritique(ReAbstractCritique)>>guidedBan
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyBanCritiqueRuleCommand>>execute
ClyCriticContext>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
InvalidGlobalName: NameOfSubclass: Class name is not a valid global name. It must start with uppercase letter and continue with alphanumeric characters or underscore. Default names used in class or trait templates are not allowed.
25 June 2021 5:49:09.483301 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ShiftClassBuilder>>validateClassName
	Receiver: a ShiftClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		buildEnvironment: 	a ShSmalltalkGlobalsEnvironment
		superclassName: 	#Object
		name: 	#NameOfSubclass
		layoutDefinition: 	a ShLayoutDefinition
		comment: 	nil
		commentStamp: 	nil
		superclass: 	RTView
		category: 	'Unclassified'
		newMetaclass: 	nil
		newClass: 	nil
		oldClass: 	nil
		oldMetaclass: 	nil
		builderEnhancer: 	nil
		metaclassClass: 	nil
		extensibleProperties: 	a Dictionary()
		changeComparers: 	an OrderedCollection()
		changes: 	a Set()
		metaSuperclass: 	nil
		superclassResolver: 	a ClassResolverStrictResolve


ShiftClassBuilder>>name:
	Receiver: a ShiftClassBuilder
	Arguments and temporary variables: 
		arg1: 	#NameOfSubclas
	Receiver's instance variables: 
		buildEnvironment: 	a ShSmalltalkGlobalsEnvironment
		superclassName: 	#Object
		name: 	#NameOfSubclass
		layoutDefinition: 	a ShLayoutDefinition
		comment: 	nil
		commentStamp: 	nil
		superclass: 	RTView
		category: 	'Unclassified'
		newMetaclass: 	nil
		newClass: 	nil
		oldClass: 	nil
		oldMetaclass: 	nil
		builderEnhancer: 	nil
		metaclassClass: 	nil
		extensibleProperties: 	a Dictionary()
		changeComparers: 	an OrderedCollection()
		changes: 	a Set()
		metaSuperclass: 	nil
		superclassResolver: 	a ClassResolverStrictResolve


[ :arg6 | 
| tmp2 |
tmp2 := arg6.
tmp2
	superclass: self;
	name: arg1;
	layoutClass: self classLayout class;
	slots: arg2 asSlotCollection;
	sharedVariablesFromString: arg3;
	sharedPools: arg4;
	category: arg5;
	environment: self environment ] in RTView class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: RTView
	Arguments and temporary variables: 
		arg1: 	''
		arg2: 	''
		arg3: 	#NameOfSubclass
		arg4: 	''
		arg5: 	''
		arg6: 	a ShiftClassBuilder
		tmp2: 	a ShiftClassBuilde
	Receiver's instance variables: 
		superclass: 	RTAnnounceableObject
		methodDict: 	a MethodDictionary(#accept:->RTView>>#accept: #add:->RTView>>#add: ...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{RTViewForSpec}
		name: 	#RTView
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core-Base'


ShiftClassInstaller>>make:
	Receiver: a ShiftClassInstaller
	Arguments and temporary variables: 
		arg1: 	[ :arg6 | 
| tmp2 |
tmp2 := arg6.
tmp2
	superclass: self;
	name: arg1;
	l...etc..
	Receiver's instance variables: 
		oldClass: 	nil
		builder: 	a ShiftClassBuilder
		installingEnvironment: 	nil


ShiftClassInstaller class>>make:
	Receiver: ShiftClassInstaller
	Arguments and temporary variables: 
		arg1: 	[ :arg6 | 
| tmp2 |
tmp2 := arg6.
tmp2
	superclass: self;
	name: arg1;
	l...etc..
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#builder->ShiftClassInstaller>>#builder #comment...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ShiftAnonymousClassInstaller}
		name: 	#ShiftClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Shift-ClassInstaller-Base'


RTView class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
	Receiver: RTView
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		superclass: 	RTAnnounceableObject
		methodDict: 	a MethodDictionary(#accept:->RTView>>#accept: #add:->RTView>>#add: ...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{RTViewForSpec}
		name: 	#RTView
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core-Base'


RTView class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
	Receiver: RTView
	Arguments and temporary variables: 
		arg1: 	#NameOfSubclass
		arg2: 	''
		arg3: 	''
		arg4: 	'
	Receiver's instance variables: 
		superclass: 	RTAnnounceableObject
		methodDict: 	a MethodDictionary(#accept:->RTView>>#accept: #add:->RTView>>#add: ...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{RTViewForSpec}
		name: 	#RTView
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Roassal2-Core-Base'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		ast: 	DoIt
	^ RTView
		subclass: #NameOfSubclass
		instanceVariableNames: ''
		c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


ClySystemEnvironment>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a ClySystemEnvironment(current image)
	Arguments and temporary variables: 
		arg1: 	'RTView subclass: #NameOfSubclass
	instanceVariableNames: ''''
	classVari...etc...
		arg2: 	a RubScrolledTextMorph(380268032)
		arg3: 	nil
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	'NameOfSubclass'
		tmp4: 	an OrderedCollection('RTView' 'subclass:' '#NameOfSubclass' 'instanceVari...etc...
		tmp5: 	2
		tmp6: 	an OpalCompile
	Receiver's instance variables: 
		name: 	'current image'
		globals: 	a SystemDictionary(lots of globals)
		changesAnnouncer: 	a SystemAnnouncer
		packageOrganizer: 	a RPackageOrganizer
		projectManager: 	a ClyProjectManagerRegistry


ClyFullBrowser>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a ClyFullBrowser(582660096)
	Arguments and temporary variables: 
		arg1: 	'RTView subclass: #NameOfSubclass
	instanceVariableNames: ''''
	classVari...etc...
		arg2: 	a RubScrolledTextMorph(380268032)
		arg3: 	ni
	Receiver's instance variables: 
		bounds: 	(462.0@86.0) corner: (1312.0@707.0)
		owner: 	a SystemWindow(282272512) named: 
		submorphs: 	an Array(a ProportionalSplitterMorph(402712576) a PanelMorph(5659586...etc...
		fullBounds: 	(462@86) corner: (1312@707)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (429137152) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	Color veryDarkGray
		navigationPanel: 	a PanelMorph(565958656)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(479949568) a ClyQuery...etc...
		toolPanel: 	a PanelMorph(831527680)
		toolbar: 	a ClyToolbarMorph(858748928)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyInheritanceAnalysis...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		packageView: 	a ClyQueryViewMorph(479949568)
		classView: 	a ClyQueryViewMorph(812359680)
		methodGroupView: 	a ClyQueryViewMorph(479361792)
		methodView: 	a ClyQueryViewMorph(1031002112)
		metaLevelScope: 	ClyInstanceSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from empty scope


ClyClassCreationToolMorph>>applyChanges
	Receiver: a ClyClassCreationToolMorph(260610816)
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(464.0@423.0) corner: (1311.0@706.0)
		owner: 	a Morph(378206208)
		submorphs: 	an Array(a PanelMorph(254284032))
		fullBounds: 	(464@423) corner: (1311@706)
		color: 	Color transparent
		extension: 	a MorphExtension (617146624)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(582660096)
		context: 	a ClyPackageContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(990548224)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(38634240)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(380268032)
		changesCancelRequested: 	false
		applyingChanges: 	true
		package: 	a RPackage()
		classTag: 	nil


[ self changesAreAboutApply.
tmp2 := self applyChanges ] in [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
tmp2 := self applyChanges ]
	on: Error
	do: [ :arg1 | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		arg1 pass ].
tmp2
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyClassCreationToolMorph(260610816)
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(464.0@423.0) corner: (1311.0@706.0)
		owner: 	a Morph(378206208)
		submorphs: 	an Array(a PanelMorph(254284032))
		fullBounds: 	(464@423) corner: (1311@706)
		color: 	Color transparent
		extension: 	a MorphExtension (617146624)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(582660096)
		context: 	a ClyPackageContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(990548224)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(38634240)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(380268032)
		changesCancelRequested: 	false
		applyingChanges: 	true
		package: 	a RPackage()
		classTag: 	nil


BlockClosure>>on:do:
	Receiver: [ self changesAreAboutApply.
tmp2 := self applyChanges ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | 
textModel text: self editingText.
textMorph hasUnacceptedEdits...etc..
	Receiver's instance variables: 
		outerContext: 	[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply...etc...
		startpc: 	140
		numArgs: 	0


[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
tmp2 := self applyChanges ]
	on: Error
	do: [ :arg1 | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		arg1 pass ].
tmp2
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyClassCreationToolMorph(260610816)
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(464.0@423.0) corner: (1311.0@706.0)
		owner: 	a Morph(378206208)
		submorphs: 	an Array(a PanelMorph(254284032))
		fullBounds: 	(464@423) corner: (1311@706)
		color: 	Color transparent
		extension: 	a MorphExtension (617146624)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(582660096)
		context: 	a ClyPackageContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(990548224)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(38634240)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(380268032)
		changesCancelRequested: 	false
		applyingChanges: 	true
		package: 	a RPackage()
		classTag: 	nil


BlockClosure>>ensure:
	Receiver: [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
tmp2 := self applyChang...etc...
	Arguments and temporary variables: 
		arg1: 	[ applyingChanges := false ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>changesAccepte...etc...
		startpc: 	130
		numArgs: 	0


ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>applyChangesBy:
	Receiver: a ClyClassCreationToolMorph(260610816)
	Arguments and temporary variables: 
		arg1: 	[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
tmp2 :...etc..
	Receiver's instance variables: 
		bounds: 	(464.0@423.0) corner: (1311.0@706.0)
		owner: 	a Morph(378206208)
		submorphs: 	an Array(a PanelMorph(254284032))
		fullBounds: 	(464@423) corner: (1311@706)
		color: 	Color transparent
		extension: 	a MorphExtension (617146624)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(582660096)
		context: 	a ClyPackageContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(990548224)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(38634240)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(380268032)
		changesCancelRequested: 	false
		applyingChanges: 	true
		package: 	a RPackage()
		classTag: 	nil


ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyClassCreationToolMorph(260610816)
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(464.0@423.0) corner: (1311.0@706.0)
		owner: 	a Morph(378206208)
		submorphs: 	an Array(a PanelMorph(254284032))
		fullBounds: 	(464@423) corner: (1311@706)
		color: 	Color transparent
		extension: 	a MorphExtension (617146624)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(582660096)
		context: 	a ClyPackageContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(990548224)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(38634240)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(380268032)
		changesCancelRequested: 	false
		applyingChanges: 	true
		package: 	a RPackage()
		classTag: 	nil


MessageSend>>value
	Receiver: MessageSend(#changesAccepted -> a ClyClassCreationToolMorph(260610816))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyClassCreationToolMorph(260610816)
		selector: 	#changesAccepted
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#changesAccepted -> a ClyClassCreationToolMorph(260610816))
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepte
	Receiver's instance variables: 
		receiver: 	a ClyClassCreationToolMorph(260610816)
		selector: 	#changesAccepted
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#changesAccepted -> a ClyClassCreationToolMorph(260610816))
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepted
		arg2: 	an Announce
	Receiver's instance variables: 
		receiver: 	a ClyClassCreationToolMorph(260610816)
		selector: 	#changesAccepted
		arguments: 	#()


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepte
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a ClyClassCreationToolMorph(260610816)
		action: 	MessageSend(#changesAccepted -> a ClyClassCreationToolMorph(260610816))...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg2 | arg2 pass 
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepte
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a ClyClassCreationToolMorph(260610816)
		action: 	MessageSend(#changesAccepted -> a ClyClassCreationToolMorph(260610816))...etc...


[ tmp4 deliver: arg1 ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ tmp4 deliver: arg1 ]
	Arguments and temporary variables: 
		arg1: 	[ self deliver: arg1 to: arg2 startingAt: tmp3 + 1 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepted
		arg2: 	an Array(an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		tmp2: 	an Array(an AnnouncementSubscription)
		arg1: 	a RubTextAccepte
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepted
		tmp1: 	a RubTextAccepte
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubScrolledTextMorph>>acceptContents
	Receiver: a RubScrolledTextMorph(380268032)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(464.0@423.0) corner: (1311.0@681.0)
		owner: 	a PanelMorph(254284032)
		submorphs: 	an Array(a RubTextScrollPane(739509760) a RubAdornmentDisplayer(1028...etc...
		fullBounds: 	(464@423) corner: (1311@681)
		color: 	(Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0.1300097751710655...etc...
		extension: 	a MorphExtension (655316224) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	nil
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(739509760)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(531232512) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()
		getBackgroundColorSelector: 	nil
		askBeforeDiscardingEdits: 	true


RubScrolledTextMorph>>whenTextAcceptRequest:
	Receiver: a RubScrolledTextMorph(380268032)
	Arguments and temporary variables: 
		arg1: 	a RubTextAcceptReques
	Receiver's instance variables: 
		bounds: 	(464.0@423.0) corner: (1311.0@681.0)
		owner: 	a PanelMorph(254284032)
		submorphs: 	an Array(a RubTextScrollPane(739509760) a RubAdornmentDisplayer(1028...etc...
		fullBounds: 	(464@423) corner: (1311@681)
		color: 	(Color r: 0.1300097751710655 g: 0.1300097751710655 b: 0.1300097751710655...etc...
		extension: 	a MorphExtension (655316224) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	nil
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(739509760)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(531232512) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()
		getBackgroundColorSelector: 	nil
		askBeforeDiscardingEdits: 	true


MessageSend>>value:
	Receiver: MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(380268032))
	Arguments and temporary variables: 
		arg1: 	a RubTextAcceptReques
	Receiver's instance variables: 
		receiver: 	a RubScrolledTextMorph(380268032)
		selector: 	#whenTextAcceptRequest:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(380268032))
	Arguments and temporary variables: 
		arg1: 	a RubTextAcceptReques
	Receiver's instance variables: 
		receiver: 	a RubScrolledTextMorph(380268032)
		selector: 	#whenTextAcceptRequest:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(380268032))
	Arguments and temporary variables: 
		arg1: 	a RubTextAcceptRequest
		arg2: 	an Announce
	Receiver's instance variables: 
		receiver: 	a RubScrolledTextMorph(380268032)
		selector: 	#whenTextAcceptRequest:
		arguments: 	#()


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a RubTextAcceptReques
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAcceptRequest
		subscriber: 	a RubScrolledTextMorph(380268032)
		action: 	MessageSend(#whenTextAcceptRequest: -> a RubScrolledTextMorph(380268032...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg2 | arg2 pass 
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
ShiftClassBuilder>>validateClassName
ShiftClassBuilder>>name:
[ :arg6 | 
| tmp2 |
tmp2 := arg6.
tmp2
	superclass: self;
	name: arg1;
	layoutClass: self classLayout class;
	slots: arg2 asSlotCollection;
	sharedVariablesFromString: arg3;
	sharedPools: arg4;
	category: arg5;
	environment: self environment ] in RTView class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
ShiftClassInstaller>>make:
ShiftClassInstaller class>>make:
RTView class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:package:
RTView class(Class)>>subclass:instanceVariableNames:classVariableNames:package:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
ClySystemEnvironment>>compileANewClassFrom:notifying:startingFrom:
ClyFullBrowser>>compileANewClassFrom:notifying:startingFrom:
ClyClassCreationToolMorph>>applyChanges
[ self changesAreAboutApply.
tmp2 := self applyChanges ] in [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
tmp2 := self applyChanges ]
	on: Error
	do: [ :arg1 | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		arg1 pass ].
tmp2
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>changesAccepted
BlockClosure>>on:do:
[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
tmp2 := self applyChanges ]
	on: Error
	do: [ :arg1 | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		arg1 pass ].
tmp2
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>changesAccepted
BlockClosure>>ensure:
ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>applyChangesBy:
ClyClassCreationToolMorph(ClyTextEditorToolMorph)>>changesAccepted
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ tmp4 deliver: arg1 ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
AnnouncementSubscription>>deliver:
[ tmp4 deliver: arg1 ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
RubEditingArea(RubAbstractTextArea)>>acceptContents
ClyTextEditor(RubTextEditor)>>accept
[ :arg3 | arg3 editor accept ] in RubTextEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :arg3 | arg3 completeMatch: self buffer: arg2 ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :arg4 | arg4 onMatchWith: arg1 notify: arg2 andDo: arg3 ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :arg2 | arg2 verifyMatchWith: arg1 notifying: self thenDoing: [ ^ self ] ] in CmdKMDispatcher(KMDispatcher)>>dispatch:
OrderedCollection>>do:
CmdKMDispatcher(KMDispatcher)>>dispatch:
CmdKMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :arg2 | 
arg2 dispatch: KMBuffer uniqueInstance buffer copy.
arg1 wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
CmdKMDispatcher(KMDispatcher)>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
25 June 2021 6:08:08.05291 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T18:08:08.01191+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T18:08:08.01191+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T18:08:08.01191+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T18:08:08.01191+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T18:08:08.01191+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-25T18:08:08.01191+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#elements was sent to nil
25 June 2021 6:10:20.93791 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #elements
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
nil

UndefinedObject>>doesNotUnderstand: #elements
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
nil

'Next day' in SimulationView>>initView
	Receiver: a SimulationView
	Arguments and temporary variables: 
		tmp1: 	a RTSpringLayoutStepping
		tmp2: 	nil
		tmp3: 	nil
		tmp46: 	nil
		tmp49: 	nil
		tmp47: 	nil
		tmp50: 	nil
		tmp48: 	nil
		tmp5: 	nil
		tmp6: 	nil
		tmp32: 	a Dictionary('NumberOfBad'->1 'NumberOfGood'->5 'currentEpoch'->1 'final...etc...
		tmp33: 	nil
		tmp34: 	a ZnClient
		tmp35: 	nil
		tmp36: 	nil
		tmp37: 	nil
		tmp38: 	nil
		tmp39: 	nil
		tmp40: 	nil
		tmp41: 	nil
		tmp42: 	nil
		tmp43: 	nil
		tmp44: 	ni
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#GlamourContext->a RTInteractiveViewContext )
		elements: 	a RTGroup()
		edges: 	a RTGroup()
		trCanvas: 	a TRCanvas


[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection()
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(596.0@590.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(1060315392)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#elements was sent to nil
25 June 2021 6:19:43.56291 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #elements
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
nil

UndefinedObject>>doesNotUnderstand: #elements
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
nil

tmp1 addNode: tmp13 in SimulationView>>initView
	Receiver: a SimulationView
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#GlamourContext->a RTInteractiveViewContext )
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edges: 	a RTGroup(a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge...etc...
		trCanvas: 	a TRCanvas
		v: 	nil


[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TREllipseShape a TREllipseShape...etc...
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(407.0@590.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(351205632)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #elements
UndefinedObject>>doesNotUnderstand: #elements
tmp1 addNode: tmp13 in SimulationView>>initView
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#add: was sent to nil
25 June 2021 6:19:53.49391 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
nil

UndefinedObject>>doesNotUnderstand: #add:
	Receiver: nil
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
nil

tmp24 cr in [ | tmp7 tmp8 tmp9 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16 tmp18 tmp20 tmp22 tmp24 tmp26 |
tmp18 := ZnClient new.
tmp18
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :arg1 | NeoJSONReader fromString: arg1 contents ].
tmp7 := tmp18 get.
tmp8 := self elements size.
tmp8 ~= 0
	ifTrue: [ tmp9 := tmp8 - 1.
		1 to: tmp9 do: [ :tmp10 | (self elements at: tmp8 - tmp10) remove ].
		self elements atRandom remove ].
Transcript
	show: 'Epoche: ';
	show: (tmp7 at: #currentEpoch);
	show: '/'.
tmp20 := Transcript.
tmp20
	show: (tmp7 at: #finalEpoch);
	cr.
Transcript show: 'Number of good individuals: '.
tmp22 := Transcript.
tmp22
	show: (tmp7 at: #NumberOfGood);
	cr.
Transcript show: 'Number of bad individuals: '.
tmp24 := Transcript.
tmp24
	show: (tmp7 at: #NumberOfBad);
	cr.
tmp26 := Transcript.
tmp26
	show: '-----------------------------------------------';
	cr.
(tmp7 at: #foodSources)
	do: [ :arg2 | 
		| tmp28 |
		tmp28 := RTEllipse new.
		tmp28 size: 30.
		tmp16 := (tmp28 color: (Color green alpha: 0.4)) element.
		tmp16
			@ RTDraggable;
			translateTo: 1 atRandom @ 1 atRandom.
		self add: tmp16.
		(arg2 at: #Occupied) = 0
			ifTrue: [ tmp1 addNode: tmp16 ].
		(arg2 at: #Occupied) = 1
			ifTrue: [ | tmp30 |
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp30 := RTEllipse new.
				tmp30 size: 30.
				tmp12 := (tmp30 color: (tmp15 alpha: 0.4)) element.
				tmp12
					@ RTDraggable;
					translateTo: 1 atRandom @ 1 atRandom.
				self add: tmp12.
				tmp14 := RTLine edgeFrom: tmp12 to: tmp16.
				v add: tmp14.
				tmp1
					addNode: tmp16;
					addNode: tmp12;
					addEdge: tmp14 ].
		(arg2 at: #Occupied) = 2
			ifTrue: [ | tmp32 tmp34 |
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp32 := RTEllipse new.
				tmp32 size: 30.
				tmp12 := (tmp32 color: (tmp15 alpha: 0.4)) element.
				tmp12
					@ RTDraggable;
					translateTo: 1 atRandom @ 1 atRandom.
				self add: tmp12.
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp34 := RTEllipse new.
				tmp34 size: 30.
				tmp13 := (tmp34 color: (tmp15 alpha: 0.4)) element.
				tmp13
					@ RTDraggable;
					translateTo: 5 atRandom @ 5 atRandom.
				self add: tmp13.
				tmp14 := RTLine edgeFrom: tmp12 to: tmp16.
				tmp11 := RTLine edgeFrom: tmp13 to: tmp16.
				self
					add: tmp14;
					add: tmp11.
				tmp1
					addNode: tmp16;
					addNode: tmp12;
					addEdge: tmp14;
					addNode: tmp13;
					addEdge: tmp11 ] ].
self signalUpdate ] in SimulationView>>initView
	Receiver: a SimulationView
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#GlamourContext->a RTInteractiveViewContext )
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edges: 	a RTGroup(a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge...etc...
		trCanvas: 	a TRCanvas
		v: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a Dictionary('Occupied'->2 'OccupiedBy'->an Array(a Dictionary('health'->50 'nigh...etc...

[ | tmp7 tmp8 tmp9 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16 tmp18 tmp20 tmp22 tmp24 tmp26 |
tmp18 := ZnClient new.
tmp18
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :arg1 | NeoJSONReader fromString: arg1 contents ].
tmp7 := tmp18 get.
tmp8 := self elements size.
tmp8 ~= 0
	ifTrue: [ tmp9 := tmp8 - 1.
		1 to: tmp9 do: [ :tmp10 | (self elements at: tmp8 - tmp10) remove ].
		self elements atRandom remove ].
Transcript
	show: 'Epoche: ';
	show: (tmp7 at: #currentEpoch);
	show: '/'.
tmp20 := Transcript.
tmp20
	show: (tmp7 at: #finalEpoch);
	cr.
Transcript show: 'Number of good individuals: '.
tmp22 := Transcript.
tmp22
	show: (tmp7 at: #NumberOfGood);
	cr.
Transcript show: 'Number of bad individuals: '.
tmp24 := Transcript.
tmp24
	show: (tmp7 at: #NumberOfBad);
	cr.
tmp26 := Transcript.
tmp26
	show: '-----------------------------------------------';
	cr.
(tmp7 at: #foodSources)
	do: [ :arg2 | 
		| tmp28 |
		tmp28 := RTEllipse new.
		tmp28 size: 30.
		tmp16 := (tmp28 color: (Color green alpha: 0.4)) element.
		tmp16
			@ RTDraggable;
			translateTo: 1 atRandom @ 1 atRandom.
		self add: tmp16.
		(arg2 at: #Occupied) = 0
			ifTrue: [ tmp1 addNode: tmp16 ].
		(arg2 at: #Occupied) = 1
			ifTrue: [ | tmp30 |
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp30 := RTEllipse new.
				tmp30 size: 30.
				tmp12 := (tmp30 color: (tmp15 alpha: 0.4)) element.
				tmp12
					@ RTDraggable;
					translateTo: 1 atRandom @ 1 atRandom.
				self add: tmp12.
				tmp14 := RTLine edgeFrom: tmp12 to: tmp16.
				v add: tmp14.
				tmp1
					addNode: tmp16;
					addNode: tmp12;
					addEdge: tmp14 ].
		(arg2 at: #Occupied) = 2
			ifTrue: [ | tmp32 tmp34 |
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp32 := RTEllipse new.
				tmp32 size: 30.
				tmp12 := (tmp32 color: (tmp15 alpha: 0.4)) element.
				tmp12
					@ RTDraggable;
					translateTo: 1 atRandom @ 1 atRandom.
				self add: tmp12.
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp34 := RTEllipse new.
				tmp34 size: 30.
				tmp13 := (tmp34 color: (tmp15 alpha: 0.4)) element.
				tmp13
					@ RTDraggable;
					translateTo: 5 atRandom @ 5 atRandom.
				self add: tmp13.
				tmp14 := RTLine edgeFrom: tmp12 to: tmp16.
				tmp11 := RTLine edgeFrom: tmp13 to: tmp16.
				self
					add: tmp14;
					add: tmp11.
				tmp1
					addNode: tmp16;
					addNode: tmp12;
					addEdge: tmp14;
					addNode: tmp13;
					addEdge: tmp11 ] ].
self signalUpdate ] in SimulationView>>initView
	Receiver: a SimulationView
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		announcer: 	an Announcer
		attributes: 	a Dictionary(#GlamourContext->a RTInteractiveViewContext )
		elements: 	a RTGroup(a RTElement a RTElement a RTElement a RTElement a RTElement...etc...
		edges: 	a RTGroup(a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge a RTEdge...etc...
		trCanvas: 	a TRCanvas
		v: 	nil


[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
	Receiver: a TRCanvas
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		callbacks: 	nil
		canvas: 	an AthensCairoSurface
		shapes: 	an OrderedCollection(a TREllipseShape a TREllipseShape a TREllipseShape...etc...
		fixedShapes: 	an OrderedCollection(a TRLabelShape a TRLabelShape)
		extent: 	(407.0@590.0)
		animations: 	an OrderedCollection(a RTSpringLayoutStepping)
		morph: 	a TRMorph(351205632)
		camera: 	a TRCamera
		announcer: 	an Announcer
		color: 	Color veryDarkGray
		session: 	a WorkingSession
		eventOverseer: 	nil
		theme: 	a TRDarkSolarizedTheme
		clearBackground: 	true


BlockClosure>>cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :arg5 | arg2 value ]
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClick
		arg2: 	an Announce
	Receiver's instance variables: 
		outerContext: 	TRCanvas>>addMenu:callback:
		startpc: 	217
		numArgs: 	1


[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		arg1: 	a TRMouseLeftClic
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	TRMouseClick
		subscriber: 	a TRCanvas
		action: 	[ :arg5 | arg2 value ]


BlockClosure>>on:do:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
		arg1: 	UnhandledError
		arg2: 	[ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 :=...etc..
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
	Receiver: [ action cull: arg1 cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #add:
UndefinedObject>>doesNotUnderstand: #add:
tmp24 cr in [ | tmp7 tmp8 tmp9 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16 tmp18 tmp20 tmp22 tmp24 tmp26 |
tmp18 := ZnClient new.
tmp18
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :arg1 | NeoJSONReader fromString: arg1 contents ].
tmp7 := tmp18 get.
tmp8 := self elements size.
tmp8 ~= 0
	ifTrue: [ tmp9 := tmp8 - 1.
		1 to: tmp9 do: [ :tmp10 | (self elements at: tmp8 - tmp10) remove ].
		self elements atRandom remove ].
Transcript
	show: 'Epoche: ';
	show: (tmp7 at: #currentEpoch);
	show: '/'.
tmp20 := Transcript.
tmp20
	show: (tmp7 at: #finalEpoch);
	cr.
Transcript show: 'Number of good individuals: '.
tmp22 := Transcript.
tmp22
	show: (tmp7 at: #NumberOfGood);
	cr.
Transcript show: 'Number of bad individuals: '.
tmp24 := Transcript.
tmp24
	show: (tmp7 at: #NumberOfBad);
	cr.
tmp26 := Transcript.
tmp26
	show: '-----------------------------------------------';
	cr.
(tmp7 at: #foodSources)
	do: [ :arg2 | 
		| tmp28 |
		tmp28 := RTEllipse new.
		tmp28 size: 30.
		tmp16 := (tmp28 color: (Color green alpha: 0.4)) element.
		tmp16
			@ RTDraggable;
			translateTo: 1 atRandom @ 1 atRandom.
		self add: tmp16.
		(arg2 at: #Occupied) = 0
			ifTrue: [ tmp1 addNode: tmp16 ].
		(arg2 at: #Occupied) = 1
			ifTrue: [ | tmp30 |
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp30 := RTEllipse new.
				tmp30 size: 30.
				tmp12 := (tmp30 color: (tmp15 alpha: 0.4)) element.
				tmp12
					@ RTDraggable;
					translateTo: 1 atRandom @ 1 atRandom.
				self add: tmp12.
				tmp14 := RTLine edgeFrom: tmp12 to: tmp16.
				v add: tmp14.
				tmp1
					addNode: tmp16;
					addNode: tmp12;
					addEdge: tmp14 ].
		(arg2 at: #Occupied) = 2
			ifTrue: [ | tmp32 tmp34 |
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp32 := RTEllipse new.
				tmp32 size: 30.
				tmp12 := (tmp32 color: (tmp15 alpha: 0.4)) element.
				tmp12
					@ RTDraggable;
					translateTo: 1 atRandom @ 1 atRandom.
				self add: tmp12.
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp34 := RTEllipse new.
				tmp34 size: 30.
				tmp13 := (tmp34 color: (tmp15 alpha: 0.4)) element.
				tmp13
					@ RTDraggable;
					translateTo: 5 atRandom @ 5 atRandom.
				self add: tmp13.
				tmp14 := RTLine edgeFrom: tmp12 to: tmp16.
				tmp11 := RTLine edgeFrom: tmp13 to: tmp16.
				self
					add: tmp14;
					add: tmp11.
				tmp1
					addNode: tmp16;
					addNode: tmp12;
					addEdge: tmp14;
					addNode: tmp13;
					addEdge: tmp11 ] ].
self signalUpdate ] in SimulationView>>initView
Array(SequenceableCollection)>>do:
[ | tmp7 tmp8 tmp9 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16 tmp18 tmp20 tmp22 tmp24 tmp26 |
tmp18 := ZnClient new.
tmp18
	url: 'http://localhost:8080/toTheEnd';
	enforceHttpSuccess: true;
	accept: ZnMimeType applicationJson;
	timeout: 1000;
	contentReader: [ :arg1 | NeoJSONReader fromString: arg1 contents ].
tmp7 := tmp18 get.
tmp8 := self elements size.
tmp8 ~= 0
	ifTrue: [ tmp9 := tmp8 - 1.
		1 to: tmp9 do: [ :tmp10 | (self elements at: tmp8 - tmp10) remove ].
		self elements atRandom remove ].
Transcript
	show: 'Epoche: ';
	show: (tmp7 at: #currentEpoch);
	show: '/'.
tmp20 := Transcript.
tmp20
	show: (tmp7 at: #finalEpoch);
	cr.
Transcript show: 'Number of good individuals: '.
tmp22 := Transcript.
tmp22
	show: (tmp7 at: #NumberOfGood);
	cr.
Transcript show: 'Number of bad individuals: '.
tmp24 := Transcript.
tmp24
	show: (tmp7 at: #NumberOfBad);
	cr.
tmp26 := Transcript.
tmp26
	show: '-----------------------------------------------';
	cr.
(tmp7 at: #foodSources)
	do: [ :arg2 | 
		| tmp28 |
		tmp28 := RTEllipse new.
		tmp28 size: 30.
		tmp16 := (tmp28 color: (Color green alpha: 0.4)) element.
		tmp16
			@ RTDraggable;
			translateTo: 1 atRandom @ 1 atRandom.
		self add: tmp16.
		(arg2 at: #Occupied) = 0
			ifTrue: [ tmp1 addNode: tmp16 ].
		(arg2 at: #Occupied) = 1
			ifTrue: [ | tmp30 |
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp30 := RTEllipse new.
				tmp30 size: 30.
				tmp12 := (tmp30 color: (tmp15 alpha: 0.4)) element.
				tmp12
					@ RTDraggable;
					translateTo: 1 atRandom @ 1 atRandom.
				self add: tmp12.
				tmp14 := RTLine edgeFrom: tmp12 to: tmp16.
				v add: tmp14.
				tmp1
					addNode: tmp16;
					addNode: tmp12;
					addEdge: tmp14 ].
		(arg2 at: #Occupied) = 2
			ifTrue: [ | tmp32 tmp34 |
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 1) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp32 := RTEllipse new.
				tmp32 size: 30.
				tmp12 := (tmp32 color: (tmp15 alpha: 0.4)) element.
				tmp12
					@ RTDraggable;
					translateTo: 1 atRandom @ 1 atRandom.
				self add: tmp12.
				tmp15 := Color blue.
				(((arg2 at: #OccupiedBy) at: 2) at: #typeOfIndividual) = 1
					ifTrue: [ tmp15 := Color red ].
				tmp34 := RTEllipse new.
				tmp34 size: 30.
				tmp13 := (tmp34 color: (tmp15 alpha: 0.4)) element.
				tmp13
					@ RTDraggable;
					translateTo: 5 atRandom @ 5 atRandom.
				self add: tmp13.
				tmp14 := RTLine edgeFrom: tmp12 to: tmp16.
				tmp11 := RTLine edgeFrom: tmp13 to: tmp16.
				self
					add: tmp14;
					add: tmp11.
				tmp1
					addNode: tmp16;
					addNode: tmp12;
					addEdge: tmp14;
					addNode: tmp13;
					addEdge: tmp11 ] ].
self signalUpdate ] in SimulationView>>initView
[ :arg5 | arg2 value ] in TRCanvas>>addMenu:callback:
BlockClosure>>cull:
BlockClosure>>cull:cull:
[ action cull: arg1 cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :arg3 | 
| tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |
tmp2 := thisContext.
tmp6 := tmp2 home.
[ tmp2 sender == tmp6 ]
	whileFalse: [ tmp2 := tmp2 sender.
		tmp2 ifNil: [ ^ arg2 cull: arg3 ] ].
tmp5 := [ Processor terminateActive ] asContext.
tmp2 privSender: tmp5.
tmp4 := [ arg2 cull: arg3 ] asContext.
tmp4 privSender: thisContext sender.
(Process forContext: tmp4 priority: Processor activePriority) resume.
thisContext privSender: tmp6 ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #text
25 June 2021 6:41:55.01491 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #text
	Receiver: 'easy'
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
'easy'

[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'lvl' value: tmp7 text);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	a ZnClient
		tmp7: 	'easy
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(426683648
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(426683648))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(426683648)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1207@235) mouseUp 41930978 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1207@235) mouseUp 41930978 nil]
		tmp1: 	an Array(a PluggableButtonMorph(426683648))
		arg3: 	a PluggableButtonMorph(426683648
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(426683648))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(426683648))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	an Array(a PluggableButtonMorph(426683648))
		tmp1: 	an Array(a PluggableButtonMorph(426683648))
		arg3: 	[(1207@235) mouseUp 41930978 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1207@235) mouseUp 41930978 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1207@235) mouseUp 41930978 nil]
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(426683648
	Receiver's instance variables: 
		timeStamp: 	41930978
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1207@235)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1207@235) mouseUp 41930978 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1207@235) mouseUp 41930978 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(426683648)
		arg2: 	[(1207@235) mouseUp 41930978 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(1207@235.0) corner: (1223@251.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1207@235.0) corner: (1223@251.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1207@235) mouseUp 41930978 nil]
		targetOffset: 	(132.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41930978 1207 235 0 0 1 1)
		lastKeyScanCode: 	67
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(1207@235) mouseOver red 41930884 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(1207@235.0) corner: (1223@251.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1207@235.0) corner: (1223@251.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1207@235) mouseUp 41930978 nil]
		targetOffset: 	(132.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41930978 1207 235 0 0 1 1)
		lastKeyScanCode: 	67
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1207@235) mouseUp 41930978 nil]
		arg2: 	a PluggableButtonMorph(426683648)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(1207@235.0) corner: (1223@251.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1207@235.0) corner: (1223@251.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1207@235) mouseUp 41930978 nil]
		targetOffset: 	(132.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41930978 1207 235 0 0 1 1)
		lastKeyScanCode: 	67
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1207@235) mouseUp 41930978 nil
	Receiver's instance variables: 
		bounds: 	(1207@235.0) corner: (1223@251.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1207@235.0) corner: (1223@251.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1207@235) mouseUp 41930978 nil]
		targetOffset: 	(132.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41930978 1207 235 0 0 1 1)
		lastKeyScanCode: 	67
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1207@235) mouseUp 41930978 nil]
		tmp1: 	[(1207@235) mouseUp 41930978 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(1207@235.0) corner: (1223@251.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1207@235.0) corner: (1223@251.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1207@235) mouseUp 41930978 nil]
		targetOffset: 	(132.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41930978 1207 235 0 0 1 1)
		lastKeyScanCode: 	67
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(1207@235) mouseUp 41930978 nil]
		tmp2: 	#(1 41930978 1207 235 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(1207@235.0) corner: (1223@251.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1207@235.0) corner: (1223@251.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1207@235) mouseUp 41930978 nil]
		targetOffset: 	(132.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41930978 1207 235 0 0 1 1)
		lastKeyScanCode: 	67
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1207@235.0) corner: (1223@251.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1207@235.0) corner: (1223@251.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1207@235) mouseUp 41930978 nil]
		targetOffset: 	(132.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41930978 1207 235 0 0 1 1)
		lastKeyScanCode: 	67
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(330381056))(a TRMorph(330381...etc...
		lastStepTime: 	2027032
		lastStepMessage: 	nil
		lastCycleTime: 	2027060
		alarms: 	a Heap()
		lastAlarmTime: 	2027032
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(330381056))(a TRMorph(330381...etc...
		lastStepTime: 	2027032
		lastStepMessage: 	nil
		lastCycleTime: 	2027060
		alarms: 	a Heap()
		lastAlarmTime: 	2027032
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(330381056))(a TRMorph(330381...etc...
		lastStepTime: 	2027032
		lastStepMessage: 	nil
		lastCycleTime: 	2027060
		alarms: 	a Heap()
		lastAlarmTime: 	2027032
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(330381056))(a TRMorph(330381...etc...
		lastStepTime: 	2027032
		lastStepMessage: 	nil
		lastCycleTime: 	2027060
		alarms: 	a Heap()
		lastAlarmTime: 	2027032
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #text
[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'lvl' value: tmp7 text);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 stateTHERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #text
25 June 2021 6:42:15.59691 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

ByteString(Object)>>doesNotUnderstand: #text
	Receiver: 'easy'
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
'easy'

[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'lvl' value: tmp7 text);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	a ZnClient
		tmp7: 	'easy
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(426683648
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(426683648))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(426683648)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1155@226) mouseUp 41951572 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1155@226) mouseUp 41951572 nil]
		tmp1: 	an Array(a PluggableButtonMorph(426683648))
		arg3: 	a PluggableButtonMorph(426683648
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(426683648))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(426683648))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	an Array(a PluggableButtonMorph(426683648))
		tmp1: 	an Array(a PluggableButtonMorph(426683648))
		arg3: 	[(1155@226) mouseUp 41951572 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1155@226) mouseUp 41951572 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1155@226) mouseUp 41951572 nil]
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(426683648
	Receiver's instance variables: 
		timeStamp: 	41951572
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1155@226)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1155@226) mouseUp 41951572 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(426683648)
	Arguments and temporary variables: 
		arg1: 	[(1155@226) mouseUp 41951572 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(826860288)
		submorphs: 	an Array(an AlignmentMorph(1002789120))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (1046734080) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(275251456)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(426683648)
		arg2: 	[(1155@226) mouseUp 41951572 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(1155@226.0) corner: (1171@242.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@226) mouseUp 41951572 nil]
		targetOffset: 	(80.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41951572 1155 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(1155@226) mouseOver red 41951494 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(1155@226.0) corner: (1171@242.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@226) mouseUp 41951572 nil]
		targetOffset: 	(80.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41951572 1155 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1155@226) mouseUp 41951572 nil]
		arg2: 	a PluggableButtonMorph(426683648)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(1155@226.0) corner: (1171@242.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@226) mouseUp 41951572 nil]
		targetOffset: 	(80.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41951572 1155 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1155@226) mouseUp 41951572 nil
	Receiver's instance variables: 
		bounds: 	(1155@226.0) corner: (1171@242.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@226) mouseUp 41951572 nil]
		targetOffset: 	(80.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41951572 1155 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1155@226) mouseUp 41951572 nil]
		tmp1: 	[(1155@226) mouseUp 41951572 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(1155@226.0) corner: (1171@242.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@226) mouseUp 41951572 nil]
		targetOffset: 	(80.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41951572 1155 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(1155@226) mouseUp 41951572 nil]
		tmp2: 	#(1 41951572 1155 226 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(1155@226.0) corner: (1171@242.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@226) mouseUp 41951572 nil]
		targetOffset: 	(80.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41951572 1155 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1155@226.0) corner: (1171@242.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(426683648)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@226) mouseUp 41951572 nil]
		targetOffset: 	(80.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 41951572 1155 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(330381056))(a TRMorph(330381...etc...
		lastStepTime: 	2047621
		lastStepMessage: 	nil
		lastCycleTime: 	2047644
		alarms: 	a Heap()
		lastAlarmTime: 	2047621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(330381056))(a TRMorph(330381...etc...
		lastStepTime: 	2047621
		lastStepMessage: 	nil
		lastCycleTime: 	2047644
		alarms: 	a Heap()
		lastAlarmTime: 	2047621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(330381056))(a TRMorph(330381...etc...
		lastStepTime: 	2047621
		lastStepMessage: 	nil
		lastCycleTime: 	2047644
		alarms: 	a Heap()
		lastAlarmTime: 	2047621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(330381056))(a TRMorph(330381...etc...
		lastStepTime: 	2047621
		lastStepMessage: 	nil
		lastCycleTime: 	2047644
		alarms: 	a Heap()
		lastAlarmTime: 	2047621
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #text
[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'lvl' value: tmp7 text);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of True are not indexable
25 June 2021 6:44:40.56591 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True(Object)>>error:
	Receiver: true
	Arguments and temporary variables: 
		arg1: 	'Instances of True are not indexable
	Receiver's instance variables: 
true

True(Object)>>errorNotIndexable
	Receiver: true
	Arguments and temporary variables: 

	Receiver's instance variables: 
true

True(Object)>>size
	Receiver: true
	Arguments and temporary variables: 

	Receiver's instance variables: 
true

ZnByteArrayEntity class>>bytes:
	Receiver: ZnByteArrayEntity
	Arguments and temporary variables: 
		arg1: 	true
		tmp2: 	ZnByteArrayEntit
	Receiver's instance variables: 
		superclass: 	ZnEntity
		methodDict: 	a MethodDictionary(#=->ZnByteArrayEntity>>#= #bytes->ZnByteArrayEnt...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnByteArrayEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnEntity class>>bytes:
	Receiver: ZnEntity
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnEntity>>#= #asByteArray->ZnEntity>>#asByte...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ZnApplicationFormUrlEncodedEntity. ZnByteArrayEntity. ZnMultiPartF...etc...
		name: 	#ZnEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnEntity class>>with:
	Receiver: ZnEntity
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnEntity>>#= #asByteArray->ZnEntity>>#asByte...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ZnApplicationFormUrlEncodedEntity. ZnByteArrayEntity. ZnMultiPartF...etc...
		name: 	#ZnEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnMimePart class>>fieldName:value:
	Receiver: ZnMimePart
	Arguments and temporary variables: 
		arg1: 	'lvl2'
		arg2: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnMimePart>>#= #contentDisposition->ZnMimePa...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnMimePart
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'simulator-lvl' value: tmp7);
	addPart:
		(ZnMimePart
			fieldName: 'lvl'
			value:
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]));
	addPart: (ZnMimePart fieldName: 'lvl2' value: button1 state);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	a ZnClient
		tmp7: 	'easy
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(52988672
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(52988672))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(52988672)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(52988672)
	Arguments and temporary variables: 
		arg1: 	[(671@469) mouseUp 42096541 nil
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(450251520)
		submorphs: 	an Array(an AlignmentMorph(750536960))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (627536128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(709121280)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(52988672)
	Arguments and temporary variables: 
		arg1: 	[(671@469) mouseUp 42096541 nil]
		tmp1: 	an Array(a PluggableButtonMorph(52988672))
		arg3: 	a PluggableButtonMorph(52988672
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(450251520)
		submorphs: 	an Array(an AlignmentMorph(750536960))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (627536128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(709121280)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(52988672))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(52988672))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(52988672)
	Arguments and temporary variables: 
		arg1: 	an Array(a PluggableButtonMorph(52988672))
		tmp1: 	an Array(a PluggableButtonMorph(52988672))
		arg3: 	[(671@469) mouseUp 42096541 nil
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(450251520)
		submorphs: 	an Array(an AlignmentMorph(750536960))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (627536128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(709121280)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(52988672)
	Arguments and temporary variables: 
		arg1: 	[(671@469) mouseUp 42096541 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(450251520)
		submorphs: 	an Array(an AlignmentMorph(750536960))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (627536128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(709121280)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(671@469) mouseUp 42096541 nil]
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(52988672
	Receiver's instance variables: 
		timeStamp: 	42096541
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(671@469)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(52988672)
	Arguments and temporary variables: 
		arg1: 	[(671@469) mouseUp 42096541 nil
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(450251520)
		submorphs: 	an Array(an AlignmentMorph(750536960))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (627536128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(709121280)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(52988672)
	Arguments and temporary variables: 
		arg1: 	[(671@469) mouseUp 42096541 nil
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(450251520)
		submorphs: 	an Array(an AlignmentMorph(750536960))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (627536128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(709121280)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(52988672)
		arg2: 	[(671@469) mouseUp 42096541 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(671@469.0) corner: (687@485.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(671@469.0) corner: (687@485.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(52988672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(671@469) mouseUp 42096541 nil]
		targetOffset: 	(131.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42096541 671 469 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(671@469) mouseOver red 42096447 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(671@469.0) corner: (687@485.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(671@469.0) corner: (687@485.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(52988672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(671@469) mouseUp 42096541 nil]
		targetOffset: 	(131.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42096541 671 469 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(671@469) mouseUp 42096541 nil]
		arg2: 	a PluggableButtonMorph(52988672)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(671@469.0) corner: (687@485.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(671@469.0) corner: (687@485.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(52988672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(671@469) mouseUp 42096541 nil]
		targetOffset: 	(131.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42096541 671 469 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(671@469) mouseUp 42096541 nil
	Receiver's instance variables: 
		bounds: 	(671@469.0) corner: (687@485.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(671@469.0) corner: (687@485.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(52988672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(671@469) mouseUp 42096541 nil]
		targetOffset: 	(131.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42096541 671 469 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(671@469) mouseUp 42096541 nil]
		tmp1: 	[(671@469) mouseUp 42096541 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(671@469.0) corner: (687@485.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(671@469.0) corner: (687@485.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(52988672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(671@469) mouseUp 42096541 nil]
		targetOffset: 	(131.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42096541 671 469 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(671@469) mouseUp 42096541 nil]
		tmp2: 	#(1 42096541 671 469 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(671@469.0) corner: (687@485.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(671@469.0) corner: (687@485.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(52988672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(671@469) mouseUp 42096541 nil]
		targetOffset: 	(131.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42096541 671 469 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(671@469.0) corner: (687@485.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(671@469.0) corner: (687@485.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(52988672)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(671@469) mouseUp 42096541 nil]
		targetOffset: 	(131.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42096541 671 469 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(743537408))(a TRMorph(743537...etc...
		lastStepTime: 	2192572
		lastStepMessage: 	nil
		lastCycleTime: 	2192613
		alarms: 	a Heap()
		lastAlarmTime: 	2192572
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(743537408))(a TRMorph(743537...etc...
		lastStepTime: 	2192572
		lastStepMessage: 	nil
		lastCycleTime: 	2192613
		alarms: 	a Heap()
		lastAlarmTime: 	2192572
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(743537408))(a TRMorph(743537...etc...
		lastStepTime: 	2192572
		lastStepMessage: 	nil
		lastCycleTime: 	2192613
		alarms: 	a Heap()
		lastAlarmTime: 	2192572
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(743537408))(a TRMorph(743537...etc...
		lastStepTime: 	2192572
		lastStepMessage: 	nil
		lastCycleTime: 	2192613
		alarms: 	a Heap()
		lastAlarmTime: 	2192572
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
True(Object)>>error:
True(Object)>>errorNotIndexable
True(Object)>>size
ZnByteArrayEntity class>>bytes:
ZnEntity class>>bytes:
ZnEntity class>>with:
ZnMimePart class>>fieldName:value:
[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'simulator-lvl' value: tmp7);
	addPart:
		(ZnMimePart
			fieldName: 'lvl'
			value:
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]));
	addPart: (ZnMimePart fieldName: 'lvl2' value: button1 state);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of True are not indexable
25 June 2021 6:45:16.77791 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True(Object)>>error:
	Receiver: true
	Arguments and temporary variables: 
		arg1: 	'Instances of True are not indexable
	Receiver's instance variables: 
true

True(Object)>>errorNotIndexable
	Receiver: true
	Arguments and temporary variables: 

	Receiver's instance variables: 
true

True(Object)>>size
	Receiver: true
	Arguments and temporary variables: 

	Receiver's instance variables: 
true

ZnByteArrayEntity class>>bytes:
	Receiver: ZnByteArrayEntity
	Arguments and temporary variables: 
		arg1: 	true
		tmp2: 	ZnByteArrayEntit
	Receiver's instance variables: 
		superclass: 	ZnEntity
		methodDict: 	a MethodDictionary(#=->ZnByteArrayEntity>>#= #bytes->ZnByteArrayEnt...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnByteArrayEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnEntity class>>bytes:
	Receiver: ZnEntity
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnEntity>>#= #asByteArray->ZnEntity>>#asByte...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ZnApplicationFormUrlEncodedEntity. ZnByteArrayEntity. ZnMultiPartF...etc...
		name: 	#ZnEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnEntity class>>with:
	Receiver: ZnEntity
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnEntity>>#= #asByteArray->ZnEntity>>#asByte...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ZnApplicationFormUrlEncodedEntity. ZnByteArrayEntity. ZnMultiPartF...etc...
		name: 	#ZnEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnMimePart class>>fieldName:value:
	Receiver: ZnMimePart
	Arguments and temporary variables: 
		arg1: 	'lvl2'
		arg2: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnMimePart>>#= #contentDisposition->ZnMimePa...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnMimePart
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'simulator-lvl' value: tmp7);
	addPart:
		(ZnMimePart
			fieldName: 'lvl'
			value:
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]));
	addPart: (ZnMimePart fieldName: 'lvl2' value: button1 state);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	a ZnClient
		tmp7: 	'easy
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(167589632
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(167589632))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(167589632)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(167589632)
	Arguments and temporary variables: 
		arg1: 	[(1294@225) mouseUp 42132697 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(255753984)
		submorphs: 	an Array(an AlignmentMorph(903493888))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (747131648) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(707407104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(167589632)
	Arguments and temporary variables: 
		arg1: 	[(1294@225) mouseUp 42132697 nil]
		tmp1: 	an Array(a PluggableButtonMorph(167589632))
		arg3: 	a PluggableButtonMorph(167589632
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(255753984)
		submorphs: 	an Array(an AlignmentMorph(903493888))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (747131648) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(707407104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(167589632))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(167589632))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(167589632)
	Arguments and temporary variables: 
		arg1: 	an Array(a PluggableButtonMorph(167589632))
		tmp1: 	an Array(a PluggableButtonMorph(167589632))
		arg3: 	[(1294@225) mouseUp 42132697 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(255753984)
		submorphs: 	an Array(an AlignmentMorph(903493888))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (747131648) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(707407104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(167589632)
	Arguments and temporary variables: 
		arg1: 	[(1294@225) mouseUp 42132697 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(255753984)
		submorphs: 	an Array(an AlignmentMorph(903493888))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (747131648) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(707407104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1294@225) mouseUp 42132697 nil]
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(167589632
	Receiver's instance variables: 
		timeStamp: 	42132697
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1294@225)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(167589632)
	Arguments and temporary variables: 
		arg1: 	[(1294@225) mouseUp 42132697 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(255753984)
		submorphs: 	an Array(an AlignmentMorph(903493888))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (747131648) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(707407104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(167589632)
	Arguments and temporary variables: 
		arg1: 	[(1294@225) mouseUp 42132697 nil
	Receiver's instance variables: 
		bounds: 	(1075.0@212.0) corner: (1522.0@237.0)
		owner: 	a Morph(255753984)
		submorphs: 	an Array(an AlignmentMorph(903493888))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (747131648) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(707407104)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(167589632)
		arg2: 	[(1294@225) mouseUp 42132697 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(1294@225.0) corner: (1310@241.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1294@225.0) corner: (1310@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(167589632)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1294@225) mouseUp 42132697 nil]
		targetOffset: 	(219.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42132697 1294 225 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(1294@225) mouseOver red 42132603 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(1294@225.0) corner: (1310@241.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1294@225.0) corner: (1310@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(167589632)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1294@225) mouseUp 42132697 nil]
		targetOffset: 	(219.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42132697 1294 225 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1294@225) mouseUp 42132697 nil]
		arg2: 	a PluggableButtonMorph(167589632)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(1294@225.0) corner: (1310@241.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1294@225.0) corner: (1310@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(167589632)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1294@225) mouseUp 42132697 nil]
		targetOffset: 	(219.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42132697 1294 225 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1294@225) mouseUp 42132697 nil
	Receiver's instance variables: 
		bounds: 	(1294@225.0) corner: (1310@241.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1294@225.0) corner: (1310@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(167589632)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1294@225) mouseUp 42132697 nil]
		targetOffset: 	(219.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42132697 1294 225 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(1294@225) mouseUp 42132697 nil]
		tmp1: 	[(1294@225) mouseUp 42132697 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(1294@225.0) corner: (1310@241.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1294@225.0) corner: (1310@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(167589632)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1294@225) mouseUp 42132697 nil]
		targetOffset: 	(219.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42132697 1294 225 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(1294@225) mouseUp 42132697 nil]
		tmp2: 	#(1 42132697 1294 225 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(1294@225.0) corner: (1310@241.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1294@225.0) corner: (1310@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(167589632)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1294@225) mouseUp 42132697 nil]
		targetOffset: 	(219.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42132697 1294 225 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1294@225.0) corner: (1310@241.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(1294@225.0) corner: (1310@241.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(167589632)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1294@225) mouseUp 42132697 nil]
		targetOffset: 	(219.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42132697 1294 225 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(923334912))(a TRMorph(923334...etc...
		lastStepTime: 	2228760
		lastStepMessage: 	nil
		lastCycleTime: 	2228829
		alarms: 	a Heap()
		lastAlarmTime: 	2228760
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(923334912))(a TRMorph(923334...etc...
		lastStepTime: 	2228760
		lastStepMessage: 	nil
		lastCycleTime: 	2228829
		alarms: 	a Heap()
		lastAlarmTime: 	2228760
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(923334912))(a TRMorph(923334...etc...
		lastStepTime: 	2228760
		lastStepMessage: 	nil
		lastCycleTime: 	2228829
		alarms: 	a Heap()
		lastAlarmTime: 	2228760
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(923334912))(a TRMorph(923334...etc...
		lastStepTime: 	2228760
		lastStepMessage: 	nil
		lastCycleTime: 	2228829
		alarms: 	a Heap()
		lastAlarmTime: 	2228760
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
True(Object)>>error:
True(Object)>>errorNotIndexable
True(Object)>>size
ZnByteArrayEntity class>>bytes:
ZnEntity class>>bytes:
ZnEntity class>>with:
ZnMimePart class>>fieldName:value:
[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'simulator-lvl' value: tmp7);
	addPart:
		(ZnMimePart
			fieldName: 'lvl'
			value:
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]));
	addPart: (ZnMimePart fieldName: 'lvl2' value: button1 state);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of True are not indexable
25 June 2021 6:46:43.49291 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

True(Object)>>error:
	Receiver: true
	Arguments and temporary variables: 
		arg1: 	'Instances of True are not indexable
	Receiver's instance variables: 
true

True(Object)>>errorNotIndexable
	Receiver: true
	Arguments and temporary variables: 

	Receiver's instance variables: 
true

True(Object)>>size
	Receiver: true
	Arguments and temporary variables: 

	Receiver's instance variables: 
true

ZnByteArrayEntity class>>bytes:
	Receiver: ZnByteArrayEntity
	Arguments and temporary variables: 
		arg1: 	true
		tmp2: 	ZnByteArrayEntit
	Receiver's instance variables: 
		superclass: 	ZnEntity
		methodDict: 	a MethodDictionary(#=->ZnByteArrayEntity>>#= #bytes->ZnByteArrayEnt...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnByteArrayEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnEntity class>>bytes:
	Receiver: ZnEntity
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnEntity>>#= #asByteArray->ZnEntity>>#asByte...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ZnApplicationFormUrlEncodedEntity. ZnByteArrayEntity. ZnMultiPartF...etc...
		name: 	#ZnEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnEntity class>>with:
	Receiver: ZnEntity
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnEntity>>#= #asByteArray->ZnEntity>>#asByte...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ZnApplicationFormUrlEncodedEntity. ZnByteArrayEntity. ZnMultiPartF...etc...
		name: 	#ZnEntity
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


ZnMimePart class>>fieldName:value:
	Receiver: ZnMimePart
	Arguments and temporary variables: 
		arg1: 	'lvl2'
		arg2: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#=->ZnMimePart>>#= #contentDisposition->ZnMimePa...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnMimePart
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Core'


[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'simulator-lvl' value: tmp7);
	addPart:
		(ZnMimePart
			fieldName: 'lvl'
			value:
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]));
	addPart: (ZnMimePart fieldName: 'lvl2' value: button1 state);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	a ZnClient
		tmp7: 	'easy
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(486077696
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(486077696))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(486077696)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(486077696)
	Arguments and temporary variables: 
		arg1: 	[(718@468) mouseUp 42219447 nil
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(482728704)
		submorphs: 	an Array(an AlignmentMorph(318758656))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (539475712) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(295018752)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(486077696)
	Arguments and temporary variables: 
		arg1: 	[(718@468) mouseUp 42219447 nil]
		tmp1: 	an Array(a PluggableButtonMorph(486077696))
		arg3: 	a PluggableButtonMorph(486077696
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(482728704)
		submorphs: 	an Array(an AlignmentMorph(318758656))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (539475712) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(295018752)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(486077696))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(486077696))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(486077696)
	Arguments and temporary variables: 
		arg1: 	an Array(a PluggableButtonMorph(486077696))
		tmp1: 	an Array(a PluggableButtonMorph(486077696))
		arg3: 	[(718@468) mouseUp 42219447 nil
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(482728704)
		submorphs: 	an Array(an AlignmentMorph(318758656))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (539475712) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(295018752)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(486077696)
	Arguments and temporary variables: 
		arg1: 	[(718@468) mouseUp 42219447 nil]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(482728704)
		submorphs: 	an Array(an AlignmentMorph(318758656))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (539475712) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(295018752)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(718@468) mouseUp 42219447 nil]
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(486077696
	Receiver's instance variables: 
		timeStamp: 	42219447
		source: 	a HandMorph(43742976)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(718@468)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(486077696)
	Arguments and temporary variables: 
		arg1: 	[(718@468) mouseUp 42219447 nil
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(482728704)
		submorphs: 	an Array(an AlignmentMorph(318758656))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (539475712) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(295018752)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(486077696)
	Arguments and temporary variables: 
		arg1: 	[(718@468) mouseUp 42219447 nil
	Receiver's instance variables: 
		bounds: 	(540.0@454.0) corner: (987.0@479.0)
		owner: 	a Morph(482728704)
		submorphs: 	an Array(an AlignmentMorph(318758656))
		fullBounds: 	nil
		color: 	(Color r: 0.2903225806451613 g: 0.2883675464320626 b: 0.2883675464320626...etc...
		extension: 	a MorphExtension (539475712) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a SpMorphicButtonAdapter
		label: 	a Text for 'Open 1'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		getLabelSelector: 	#label
		getMenuSelector: 	#menu:
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		labelMorph: 	a TextMorph(295018752)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	a PluggableButtonMorph(486077696)
		arg2: 	[(718@468) mouseUp 42219447 nil]
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	a WorldMorph(684500736) [world]
		tmp5: 	#(nil)
		tmp3: 	ni
	Receiver's instance variables: 
		bounds: 	(718@468.0) corner: (734@484.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(718@468.0) corner: (734@484.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(486077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(718@468) mouseUp 42219447 nil]
		targetOffset: 	(178.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42219447 718 468 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transform...etc...
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg2 | 
ActiveWorld := tmp1.
ActiveEvent := tmp3.
ActiveHand := tmp2.
...etc..
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph>>becomeActiveDuring:
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 
		arg1: 	[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent...etc...
		tmp1: 	a WorldMorph(684500736) [world]
		tmp2: 	a HandMorph(43742976)
		tmp3: 	[(718@468) mouseOver red 42219306 nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(718@468.0) corner: (734@484.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(718@468.0) corner: (734@484.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(486077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(718@468) mouseUp 42219447 nil]
		targetOffset: 	(178.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42219447 718 468 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(718@468) mouseUp 42219447 nil]
		arg2: 	a PluggableButtonMorph(486077696)
		arg3: 	[ self mouseFocus: nil ]
		tmp1: 	ni
	Receiver's instance variables: 
		bounds: 	(718@468.0) corner: (734@484.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(718@468.0) corner: (734@484.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(486077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(718@468) mouseUp 42219447 nil]
		targetOffset: 	(178.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42219447 718 468 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(718@468) mouseUp 42219447 nil
	Receiver's instance variables: 
		bounds: 	(718@468.0) corner: (734@484.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(718@468.0) corner: (734@484.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(486077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(718@468) mouseUp 42219447 nil]
		targetOffset: 	(178.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42219447 718 468 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	[(718@468) mouseUp 42219447 nil]
		tmp1: 	[(718@468) mouseUp 42219447 nil]
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	ni
	Receiver's instance variables: 
		bounds: 	(718@468.0) corner: (734@484.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(718@468.0) corner: (734@484.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(486077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(718@468) mouseUp 42219447 nil]
		targetOffset: 	(178.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42219447 718 468 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 
		arg1: 	an InputEventSensor
		tmp1: 	[(718@468) mouseUp 42219447 nil]
		tmp2: 	#(1 42219447 718 468 0 0 1 1)
		tmp3: 	1
		tmp4: 	fals
	Receiver's instance variables: 
		bounds: 	(718@468.0) corner: (734@484.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(718@468.0) corner: (734@484.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(486077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(718@468) mouseUp 42219447 nil]
		targetOffset: 	(178.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42219447 718 468 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(43742976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(718@468.0) corner: (734@484.0)
		owner: 	a WorldMorph(684500736) [world]
		submorphs: 	#()
		fullBounds: 	(718@468.0) corner: (734@484.0)
		color: 	Color blue
		extension: 	a MorphExtension (993567488)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(486077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(718@468) mouseUp 42219447 nil]
		targetOffset: 	(178.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 42219447 718 468 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a HandMorph(43742976
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(915776768))(a TRMorph(915776...etc...
		lastStepTime: 	2315505
		lastStepMessage: 	nil
		lastCycleTime: 	2315540
		alarms: 	a Heap()
		lastAlarmTime: 	2315505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(43742976))
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a HandMorph(43742976))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: ni...etc..
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(915776768))(a TRMorph(915776...etc...
		lastStepTime: 	2315505
		lastStepMessage: 	nil
		lastCycleTime: 	2315540
		alarms: 	a Heap()
		lastAlarmTime: 	2315505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world]
		arg2: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(915776768))(a TRMorph(915776...etc...
		lastStepTime: 	2315505
		lastStepMessage: 	nil
		lastCycleTime: 	2315540
		alarms: 	a Heap()
		lastAlarmTime: 	2315505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		arg1: 	a WorldMorph(684500736) [world
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(43742976))
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a TRMorph(915776768))(a TRMorph(915776...etc...
		lastStepTime: 	2315505
		lastStepMessage: 	nil
		lastCycleTime: 	2315540
		alarms: 	a Heap()
		lastAlarmTime: 	2315505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(43742976)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...
		worldRenderer: 	a VMWorldRenderer
		realWindowExtent: 	(1520@783)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(684500736) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1520@783)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(874237184) a TaskbarMorph(741035776) a SpWin...etc...
		fullBounds: 	(0@0) corner: (1520@783)
		color: 	(Color r: 0.29521016617790813 g: 0.29521016617790813 b: 0.29521016617790...etc...
		extension: 	a MorphExtension (68998144) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8611925708699902 g: 1.0 b: 0.7223851417399805 alpha: 1...etc...
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65547
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(68...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
True(Object)>>error:
True(Object)>>errorNotIndexable
True(Object)>>size
ZnByteArrayEntity class>>bytes:
ZnEntity class>>bytes:
ZnEntity class>>with:
ZnMimePart class>>fieldName:value:
[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
Transcript show: tmp7.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'simulator-lvl' value: tmp7);
	addPart:
		(ZnMimePart
			fieldName: 'lvl'
			value:
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]));
	addPart: (ZnMimePart fieldName: 'lvl2' value: button1 state);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
SpButtonPresenter>>performAction
SpMorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :arg3 | 
(arg3 containsPoint: arg1 cursorPoint)
	ifTrue: [ arg3 enabled
			ifTrue: [ arg3 performAction: arg1 ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := arg1.
tmp3 := arg2
	handleFocusEvent: (arg1 transformedBy: (arg2 transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :arg2 | 
self activeHand: arg2.
arg2 processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ConnectionTimedOut: Cannot connect to 127.0.0.1:8080
26 June 2021 11:35:24.78591 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver stringFromAddress: arg1) , ':'
			, arg2 asString ] in Socket>>connectTo:port:waitForConnectionFor:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	100
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[134 227 96 34 0 0 0 0 96 124 47 4 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>waitForConnectionFor:ifTimedOut:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	1000
		arg2: 	[ ConnectionTimedOut
	signal:
		'Cannot connect to ' , (NetNameResolver s...etc...
		tmp1: 	62834795
		tmp2: 	1000000
		tmp3: 	0
		tmp4: 	
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[134 227 96 34 0 0 0 0 96 124 47 4 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


Socket>>connectTo:port:waitForConnectionFor:
	Receiver: a Socket[unconnected]
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	100
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[134 227 96 34 0 0 0 0 96 124 47 4 0 0 0 0]
		readSemaphore: 	a Semaphore()
		writeSemaphore: 	a Semaphore()


ZdcSocketStream(ZdcAbstractSocketStream)>>socketConnectTo:port:
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	808
	Receiver's instance variables: 
		socket: 	a Socket[unconnected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	1000
		debug: 	false


ZdcSocketStream(ZdcSimpleSocketStream)>>connectTo:port:
	Receiver: a ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	808
	Receiver's instance variables: 
		socket: 	a Socket[unconnected]
		readBuffer: 	a ZdcIOBuffer(#[] +4096)
		writeBuffer: 	a ZdcIOBuffer(#[] +4096)
		timeout: 	1000
		debug: 	false


ZdcSocketStream class(ZdcSimpleSocketStream class)>>openConnectionToHost:port:timeout:
	Receiver: ZdcSocketStream
	Arguments and temporary variables: 
		arg1: 	127.0.0.1
		arg2: 	8080
		arg3: 	1000
		tmp1: 	a Socket[unconnected]
		tmp3: 	a ZdcSocketStrea
	Receiver's instance variables: 
		superclass: 	ZdcOptimizedSocketStream
		methodDict: 	a MethodDictionary(#next:putAll:startingAt:->ZdcSocketStream>>#next...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZdcSocketStream
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zodiac-Core'


ZnNetworkingUtils>>socketStreamToUrlDirectly:
	Receiver: a ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/setGlobals
		tmp1: 	nil
		tmp2: 	127.0.0.
	Receiver's instance variables: 
		socketStreamClass: 	ZdcSocketStream
		secureSocketStreamClass: 	ZdcSecureSocketStream


ZnNetworkingUtils>>socketStreamToUrl:
	Receiver: a ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/setGlobal
	Receiver's instance variables: 
		socketStreamClass: 	ZdcSocketStream
		secureSocketStreamClass: 	ZdcSecureSocketStream


ZnNetworkingUtils class>>socketStreamToUrl:
	Receiver: ZnNetworkingUtils
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/setGlobal
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bufferSize->ZnNetworkingUtils>>#bufferSize #htt...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnNetworkingUtils
		classPool: 	a Dictionary(#Default->a ZnNetworkingUtils #DefaultSocketStreamTimeo...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Support'


ZnClient>>newConnectionTo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	http://localhost:8080/setGlobals
		tmp1: 	6283479
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>getConnectionAndExecute
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithRedirectsRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRedirectsRemaining: self maxNumberOfRedirects ] in ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRedirectsRemaining: self maxNumberOfRedirects ]
	Arguments and temporary variables: 
		arg1: 	an ExceptionSet
		arg2: 	[ :arg2 | 
arg1 > 0
	ifTrue: [ | tmp2 |
		tmp2 := self.
		tmp2
			handleR...etc..
	Receiver's instance variables: 
		outerContext: 	ZnClient>>executeWithRetriesRemaining:
		startpc: 	93
		numArgs: 	0


ZnClient>>executeWithRetriesRemaining:
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ self executeWithRetriesRemaining: self numberOfRetries ] in [ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


BlockClosure>>on:do:
	Receiver: [ self executeWithRetriesRemaining: self numberOfRetries ]
	Arguments and temporary variables: 
		arg1: 	Error
		arg2: 	[ :arg1 | arg1 pass 
	Receiver's instance variables: 
		outerContext: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on:...etc...
		startpc: 	82
		numArgs: 	0


[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	do: self ifFailBlock ] in ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	1000
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnConnectionTimeout(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnConnectionTimeout(DynamicVariable)>>value:during:
	Receiver: a ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	1000
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	6


ZnConnectionTimeout class(DynamicVariable class)>>value:during:
	Receiver: ZnConnectionTimeout
	Arguments and temporary variables: 
		arg1: 	1000
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnConnectionTimeout
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnConnectionTimeout


ZnClient>>withTimeoutDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ [ self executeWithRetriesRemaining: self numberOfRetries ]
	on: Error
	...etc..
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>executeWithTimeout
	Receiver: a ZnClient
	Arguments and temporary variables: 

	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ tmp2 := self executeWithTimeout ] in ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ ^ arg1 value ] in ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ tmp1 psValueAt: index put: arg1.
arg2 value ] in ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	a Process in nil
		arg2: 	false
		tmp1: 	[ ^ arg1 value ]
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


BlockClosure>>ensure:
	Receiver: [ tmp1 psValueAt: index put: arg1.
arg2 value ]
	Arguments and temporary variables: 
		arg1: 	[ tmp1 psValueAt: index put: tmp2 ]
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		outerContext: 	ZnSignalProgress(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


ZnSignalProgress(DynamicVariable)>>value:during:
	Receiver: a ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value ]
		tmp1: 	a Process in nil
		tmp2: 	ni
	Receiver's instance variables: 
		index: 	5


ZnSignalProgress class(DynamicVariable class)>>value:during:
	Receiver: ZnSignalProgress
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	[ ^ arg1 value 
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ZnSignalProgress
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Zinc-HTTP-Variables'
		soleInstance: 	a ZnSignalProgress


ZnClient>>withProgressDo:
	Receiver: a ZnClient
	Arguments and temporary variables: 
		arg1: 	[ tmp2 := self executeWithTimeout 
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>execute
	Receiver: a ZnClient
	Arguments and temporary variables: 
		tmp2: 	ni
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


ZnClient>>post
	Receiver: a ZnClient
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		request: 	a ZnRequest(POST /setGlobals)
		response: 	nil
		connection: 	nil
		lastUsed: 	nil
		options: 	a Dictionary(#autoResetEntityMethods->#(#HEAD #DELETE) #ifFailBlock->[...etc...
		session: 	nil
		logLevel: 	3


[ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1 state
	ifTrue: [ 'easy' ]
	ifFalse: [ button2 state
			ifTrue: [ 'normal' ]
			ifFalse: [ 'hard' ] ]) asString.
tmp6
	url: 'http://localhost:8080/setGlobals';
	timeout: 1000;
	addPart:
		(ZnMimePart
			fieldName: 'search-field'
			value:
				button2 label asString , ' ' , button2 label asString , ' '
					, numberOfGoods text asString);
	addPart: (ZnMimePart fieldName: 'number-of-goods' value: numberOfGoods text);
	addPart:
		(ZnMimePart
			fieldName: 'number-of-food-sources'
			value: numberOfFoodSources text);
	addPart: (ZnMimePart fieldName: 'number-of-bads' value: numberOfBads text);
	addPart: (ZnMimePart fieldName: 'simulator-lvl' value: tmp7);
	post.
'D:\testfile.txt' asFileReference
	writeStreamDo: [ :arg1 | 
		arg1
			<<
				(button1 state
					ifTrue: [ 'easy' ]
					ifFalse: [ button2 state
							ifTrue: [ 'normal' ]
							ifFalse: [ 'hard' ] ]) ].
(Delay forSeconds: 1) wait.
self window close ] in SimulationDataSetterUI>>initializePresenters
	Receiver: a SimulationDataSetterUI
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	nil
		tmp3: 	nil
		tmp4: 	nil
		tmp5: 	nil
		tmp6: 	a ZnClient
		tmp7: 	'easy
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicBoxAdapter a SpMorphicBoxAdapter a SpM...etc...
		announcer: 	an Announcer
		owner: 	a SpWindowPresenter
		adapter: 	a SpMorphicBoxAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	a SpNullApplication
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Sumulation Data Setter' ]
		additionalSubpresentersMap: 	a Dictionary()
		layout: 	a SpBoxLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		labelLvl: 	a SpLabelPresenter
		labelaNumberOfFoodSources: 	a SpLabelPresenter
		numberOfFoodSources: 	a SpNumberInputFieldPresenter
		labelNumberOfGoods: 	a SpLabelPresenter
		numberOfGoods: 	a SpNumberInputFieldPresenter
		labelNumberOfBads: 	a SpLabelPresenter
		numberOfBads: 	a SpNumberInputFieldPresenter
		button1: 	a SpRadioButtonPresenter
		button2: 	a SpRadioButtonPresenter
		button3: 	a SpRadioButtonPresenter
		subBtn: 	a SpButtonPresenter
		label: 	a SpLabelPresenter


SpButtonPresenter>>performAction
	Receiver: a SpButtonPresenter
	Arguments and temporary variables: 
		tmp1: 	ni
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SpMorphicButtonAdapter)
		announcer: 	an Announcer
		owner: 	a SimulationDataSetterUI
		adapter: 	a SpMorphicButtonAdapter
		needRebuild: 	a SpValueHolder[ true ]
		application: 	nil
		focusOrder: 	nil
		contextKeyBindings: 	nil
		windowIcon: 	a SpValueHolder[ nil ]
		aboutText: 	a SpValueHolder[ nil ]
		askOkToClose: 	a SpValueHolder[ false ]
		titleHolder: 	a SpValueHolder[ 'Button' ]
		additionalSubpresentersMap: 	nil
		layout: 	a SpAbstractWidgetLayout
		visible: 	a SpValueHolder[ true ]
		extent: 	a SpValueHolder[ nil ]
		borderWidth: 	a SpValueHolder[ 0 ]
		borderColor: 	a SpValueHolder[ Color transparent ]
		dragEnabled: 	a SpValueHolder[ false ]
		dropEnabled: 	a SpValueHolder[ false ]
		dragTransformationBlock: 	a SpValueHolder[ {arg11} ]
		wantDropBlock: 	a SpValueHolder[ [ :arg13 | 
self
	withWidgetDo: [ :arg14 | arg1...etc...
		acceptDropBlock: 	a SpValueHolder[ [ :arg14 | arg14 update: #borderWidth: with: ...etc...
		transferBlock: 	a SpValueHolder[ [ :arg16 | arg16 update: #borderColor: with: {a...etc...
		color: 	a SpValueHolder[ nil ]
		help: 	a SpValueHolder[ nil ]
		enabled: 	a SpValueHolder[ true ]
		styles: 	#()
		icon: 	a SpValueHolder[ nil ]
		label: 	a SpValueHolder[ 'Open 1' ]
		action: 	a SpValueHolder[ [ | tmp6 tmp7 |
tmp6 := ZnClient new.
tmp7 := (button1...etc...
		actionPerformed: 	a SpValueHolder[ nil ]
		askBeforeChanging: 	a SpValueHolder[ false ]
		font: 	a SpValueHolder[ nil ]
		shortcut: 	a SpValueHolder[ nil ]
		state: 	a SpValueHolder[ false ]
		contextMenu: 	a SpValueHolder[ nil ]


SpMorphicButtonAdapter>>action
	Receiver: a SpMorphicButtonAdapter
	Arguments and temporary variables: 
		tmp1: 	a PluggableButtonMorph(339084032
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(339084032))
		announcer: 	nil
		model: 	a SpButtonPresenter
		widget: 	a PluggableButtonMorph(339084032)
		selector: 	nil
		owner: 	a SpButtonPresenter
		subMenuWidget: 	nil
		styleName: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(339084032)
	Arguments and temporary variables: 
		arg1: 	[(385@244) mouseUp 102738728 nil
	Receiver's instance variables: 
		bounds: 	(131.0@223.0) corner: (578.0@248.0)
		owner: 	a Morph(639079168)
		submorphs: 	an Array(an AlignmTHERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
27 June 2021 3:01:09.750491 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T15:01:09.655491+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T15:01:09.655491+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T15:01:09.655491+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T15:01:09.655491+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T15:01:09.655491+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T15:01:09.655491+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
27 June 2021 5:08:54.551122 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:08:54.519122+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:08:54.519122+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:08:54.519122+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:08:54.519122+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:08:54.519122+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:08:54.519122+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pharo8.0-32bit-0932da8.sources.

Please check that the file is named properly and is in the
same directory as this image.
27 June 2021 5:16:17.846662 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo8.0.0 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc...
		tmp1: 	ni
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate the sources file named C:\Users\Damjan\Documents\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'the sources file named C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 ...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withSourceRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc...
		arg2: 	'C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stable)-01\Pha...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informCannotLocateSources
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	'Pharo cannot locate &fileRef.

Please check that the file is named prope...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>sourcesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		tmp1: 	SourceFile(C:\Users\Damjan\Documents\Pharo\images\Pharo 8.0 - 64bit (stab...etc..
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		tmp1: 	nil
		tmp2: 	ni
	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:16:17.799662+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:16:17.799662+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:16:17.799662+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(SessionAccessModeResolv...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(SmallInteger) a ClassSessionHandler(Sessio...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:16:17.799662+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:16:17.799662+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	tru
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ])
		id: 	nil
		creationTime: 	2021-06-27T17:16:17.799662+02:00
		properties: 	a Dictionary(#accessMode->#readWrite )


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	true
		tmp1: 	true
		tmp2: 	tru
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withSourceRef:
PharoFilesOpener>>informCannotLocateSources
PharoFilesOpener>>sourcesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

