sp := SimulationDataSetterUI  new.sp openWithSpec .Transcript clear.v := RTView new.	v @ RTDraggableView.	"(ZnClient new 		url: 'http://localhost:8080/initData';		enforceHttpSuccess: true;		accept: ZnMimeType applicationJson;		contentReader: [ :asd | NeoJSONReader fromString: asd contents ];		post)."	"We set a dynamic spring layout"	stepping := RTSpringLayoutStepping new view: v.	stepping after: [ v canvas camera focusOnCenter ].	v addAnimation: stepping.	"Add a new circle when pressing on a button"	v canvas addMenu: 'To the end' callback: [ 		| el edge food el2 edge2 response|				response := (ZnClient new 		url: 'http://localhost:8080/toTheEnd';		enforceHttpSuccess: true;		accept: ZnMimeType applicationJson;		 timeout: 1000;		contentReader: [ :reader | NeoJSONReader fromString: reader contents ];		get).		size:= v elements size.		(size~=0)		ifTrue:[		1 to: size-1 do: [:i|  			(v elements at:(size-i)) remove.].		v elements atRandom remove.		].		Transcript show: 'Epoche: '.		Transcript show: (response at:#currentEpoch).		Transcript show: '/'.		Transcript show: (response at:#finalEpoch); cr.		Transcript show: 'Number of good individuals: '.		Transcript show: (response at:#NumberOfGood); cr.		Transcript show: 'Number of bad individuals: '.		Transcript show: (response at:#NumberOfBad); cr.		Transcript show: '-----------------------------------------------'; cr.		(response at:#foodSources) do: 		[:foodSource|		food := (RTEllipse new size: 30; color: (Color green alpha: 0.4)) 		element.		food @ RTDraggable.		food translateTo: 1 atRandom @ 1 atRandom. 		v add: food.		((foodSource at:#Occupied) =0)		ifTrue: [  stepping addNode: food.].		((foodSource at:#Occupied) =1)		ifTrue: [  			c := Color blue.			((((foodSource at:#OccupiedBy) at:1) at:#typeOfIndividual)=1)			ifTrue: [  				c:=Color red.			].			el := (RTEllipse new size: 30; color: (c alpha: 0.4)) element.			el @ RTDraggable.			el translateTo: 1 atRandom @ 1 atRandom.			v add: el.			edge := RTLine edgeFrom: el to: food.			v add: edge.			stepping addNode: food;addNode: el; addEdge: edge.			].		((foodSource at:#Occupied) =2)		ifTrue: [ 			c := Color blue.			((((foodSource at:#OccupiedBy) at:1) at:#typeOfIndividual)=1)			ifTrue: [  				c:=Color red.			].			el := (RTEllipse new size: 30; color: (c alpha: 0.4)) element.			el @ RTDraggable.			el translateTo: 1 atRandom @ 1 atRandom.			v add: el.			c := Color blue.			((((foodSource at:#OccupiedBy) at:2) at:#typeOfIndividual)=1)			ifTrue: [  				c:=Color red.			].			el2 := (RTEllipse new size: 30; color: (c alpha: 0.4)) element.			el2 @ RTDraggable.			el2 translateTo: 5 atRandom @ 5 atRandom.			v add: el2.			edge := RTLine edgeFrom: el to: food.			edge2 := RTLine edgeFrom: el2 to: food.			v add: edge.			v add: edge2.			stepping addNode: food; addNode: el; addEdge: edge; addNode: el2; addEdge: edge2. 			 ].		] .		v signalUpdate.	].	"Add a new edge when pressing on a button"	v canvas addMenu: 'Next day' callback: [ 		| el edge food el2 edge2 response|				response := (ZnClient new 		url: 'http://localhost:8080/nextEpoch';		enforceHttpSuccess: true;		accept: ZnMimeType applicationJson;		contentReader: [ :asd | NeoJSONReader fromString: asd contents ];		get).		size:= v elements size.		(size~=0)		ifTrue:[		1 to: size-1 do: [:i|  			(v elements at:(size-i)) remove.].		v elements atRandom remove.		].		Transcript show: 'Epoche: '.		Transcript show: (response at:#currentEpoch).		Transcript show: '/'.		Transcript show: (response at:#finalEpoch); cr.		Transcript show: 'Number of good individuals: '.		Transcript show: (response at:#NumberOfGood); cr.		Transcript show: 'Number of bad individuals: '.		Transcript show: (response at:#NumberOfBad); cr.		Transcript show: '-----------------------------------------------'; cr.		(response at:#foodSources) do: 		[:foodSource|		food := (RTEllipse new size: 30; color: (Color green alpha: 0.4)) 		element.		food @ RTDraggable.		food translateTo: 1 atRandom @ 1 atRandom. 		v add: food.		((foodSource at:#Occupied) =0)		ifTrue: [  stepping addNode: food.].		((foodSource at:#Occupied) =1)		ifTrue: [  			c := Color blue.			((((foodSource at:#OccupiedBy) at:1) at:#typeOfIndividual)=1)			ifTrue: [  				c:=Color red.			].			el := (RTEllipse new size: 30; color: (c alpha: 0.4)) element.			el @ RTDraggable.			el translateTo: 1 atRandom @ 1 atRandom.			v add: el.			edge := RTLine edgeFrom: el to: food.			v add: edge.			stepping addNode: food;addNode: el; addEdge: edge.			].		((foodSource at:#Occupied) =2)		ifTrue: [ 			c := Color blue.			((((foodSource at:#OccupiedBy) at:1) at:#typeOfIndividual)=1)			ifTrue: [  				c:=Color red.			].			el := (RTEllipse new size: 30; color: (c alpha: 0.4)) element.			el @ RTDraggable.			el translateTo: 1 atRandom @ 1 atRandom.			v add: el.			c := Color blue.			((((foodSource at:#OccupiedBy) at:2) at:#typeOfIndividual)=1)			ifTrue: [  				c:=Color red.			].			el2 := (RTEllipse new size: 30; color: (c alpha: 0.4)) element.			"el2 @ RTDraggable."			el2 translateTo: 5 atRandom @ 5 atRandom.			v add: el2.			edge := RTLine edgeFrom: el to: food.			edge2 := RTLine edgeFrom: el2 to: food.			v add: edge.			v add: edge2.			stepping addNode: food; addNode: el; addEdge: edge; addNode: el2; addEdge: edge2. 			 ].		] .				v signalUpdate.	].	v 